// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/softilium/mb4/ent/industry"
)

// Industry is the model entity for the Industry schema.
type Industry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Descr holds the value of the "Descr" field.
	Descr string `json:"Descr,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Industry) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case industry.FieldID:
			values[i] = new(sql.NullInt64)
		case industry.FieldDescr:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Industry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Industry fields.
func (i *Industry) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case industry.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case industry.FieldDescr:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Descr", values[j])
			} else if value.Valid {
				i.Descr = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Industry.
// Note that you need to call Industry.Unwrap() before calling this method if this Industry
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Industry) Update() *IndustryUpdateOne {
	return (&IndustryClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Industry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Industry) Unwrap() *Industry {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Industry is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Industry) String() string {
	var builder strings.Builder
	builder.WriteString("Industry(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", Descr=")
	builder.WriteString(i.Descr)
	builder.WriteByte(')')
	return builder.String()
}

// Industries is a parsable slice of Industry.
type Industries []*Industry

func (i Industries) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
