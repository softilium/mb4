// Code generated by entc, DO NOT EDIT.

package ticker

const (
	// Label holds the string label denoting the ticker type in the database.
	Label = "ticker"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescr holds the string denoting the descr field in the database.
	FieldDescr = "descr"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// EdgeEmitent holds the string denoting the emitent edge name in mutations.
	EdgeEmitent = "Emitent"
	// EdgeQuotes holds the string denoting the quotes edge name in mutations.
	EdgeQuotes = "Quotes"
	// EdgeDivPayouts holds the string denoting the divpayouts edge name in mutations.
	EdgeDivPayouts = "DivPayouts"
	// EdgeEmissions holds the string denoting the emissions edge name in mutations.
	EdgeEmissions = "Emissions"
	// Table holds the table name of the ticker in the database.
	Table = "tickers"
	// EmitentTable is the table that holds the Emitent relation/edge.
	EmitentTable = "tickers"
	// EmitentInverseTable is the table name for the Emitent entity.
	// It exists in this package in order to avoid circular dependency with the "emitent" package.
	EmitentInverseTable = "emitents"
	// EmitentColumn is the table column denoting the Emitent relation/edge.
	EmitentColumn = "emitent_tickers"
	// QuotesTable is the table that holds the Quotes relation/edge.
	QuotesTable = "quotes"
	// QuotesInverseTable is the table name for the Quote entity.
	// It exists in this package in order to avoid circular dependency with the "quote" package.
	QuotesInverseTable = "quotes"
	// QuotesColumn is the table column denoting the Quotes relation/edge.
	QuotesColumn = "ticker_quotes"
	// DivPayoutsTable is the table that holds the DivPayouts relation/edge.
	DivPayoutsTable = "div_payouts"
	// DivPayoutsInverseTable is the table name for the DivPayout entity.
	// It exists in this package in order to avoid circular dependency with the "divpayout" package.
	DivPayoutsInverseTable = "div_payouts"
	// DivPayoutsColumn is the table column denoting the DivPayouts relation/edge.
	DivPayoutsColumn = "ticker_div_payouts"
	// EmissionsTable is the table that holds the Emissions relation/edge.
	EmissionsTable = "emissions"
	// EmissionsInverseTable is the table name for the Emission entity.
	// It exists in this package in order to avoid circular dependency with the "emission" package.
	EmissionsInverseTable = "emissions"
	// EmissionsColumn is the table column denoting the Emissions relation/edge.
	EmissionsColumn = "ticker_emissions"
)

// Columns holds all SQL columns for ticker fields.
var Columns = []string{
	FieldID,
	FieldDescr,
	FieldKind,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"emitent_tickers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	DescrValidator func(string) error
	// DefaultKind holds the default value on creation for the "Kind" field.
	DefaultKind int32
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
