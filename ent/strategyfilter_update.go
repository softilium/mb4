// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfilter"
)

// StrategyFilterUpdate is the builder for updating StrategyFilter entities.
type StrategyFilterUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyFilterMutation
}

// Where appends a list predicates to the StrategyFilterUpdate builder.
func (sfu *StrategyFilterUpdate) Where(ps ...predicate.StrategyFilter) *StrategyFilterUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetLineNum sets the "LineNum" field.
func (sfu *StrategyFilterUpdate) SetLineNum(i int) *StrategyFilterUpdate {
	sfu.mutation.ResetLineNum()
	sfu.mutation.SetLineNum(i)
	return sfu
}

// SetNillableLineNum sets the "LineNum" field if the given value is not nil.
func (sfu *StrategyFilterUpdate) SetNillableLineNum(i *int) *StrategyFilterUpdate {
	if i != nil {
		sfu.SetLineNum(*i)
	}
	return sfu
}

// AddLineNum adds i to the "LineNum" field.
func (sfu *StrategyFilterUpdate) AddLineNum(i int) *StrategyFilterUpdate {
	sfu.mutation.AddLineNum(i)
	return sfu
}

// SetIsUsed sets the "IsUsed" field.
func (sfu *StrategyFilterUpdate) SetIsUsed(b bool) *StrategyFilterUpdate {
	sfu.mutation.SetIsUsed(b)
	return sfu
}

// SetNillableIsUsed sets the "IsUsed" field if the given value is not nil.
func (sfu *StrategyFilterUpdate) SetNillableIsUsed(b *bool) *StrategyFilterUpdate {
	if b != nil {
		sfu.SetIsUsed(*b)
	}
	return sfu
}

// SetLeftValueKind sets the "LeftValueKind" field.
func (sfu *StrategyFilterUpdate) SetLeftValueKind(i int) *StrategyFilterUpdate {
	sfu.mutation.ResetLeftValueKind()
	sfu.mutation.SetLeftValueKind(i)
	return sfu
}

// SetNillableLeftValueKind sets the "LeftValueKind" field if the given value is not nil.
func (sfu *StrategyFilterUpdate) SetNillableLeftValueKind(i *int) *StrategyFilterUpdate {
	if i != nil {
		sfu.SetLeftValueKind(*i)
	}
	return sfu
}

// AddLeftValueKind adds i to the "LeftValueKind" field.
func (sfu *StrategyFilterUpdate) AddLeftValueKind(i int) *StrategyFilterUpdate {
	sfu.mutation.AddLeftValueKind(i)
	return sfu
}

// SetLeftValue sets the "LeftValue" field.
func (sfu *StrategyFilterUpdate) SetLeftValue(s string) *StrategyFilterUpdate {
	sfu.mutation.SetLeftValue(s)
	return sfu
}

// SetRVT sets the "RVT" field.
func (sfu *StrategyFilterUpdate) SetRVT(i int) *StrategyFilterUpdate {
	sfu.mutation.ResetRVT()
	sfu.mutation.SetRVT(i)
	return sfu
}

// AddRVT adds i to the "RVT" field.
func (sfu *StrategyFilterUpdate) AddRVT(i int) *StrategyFilterUpdate {
	sfu.mutation.AddRVT(i)
	return sfu
}

// SetOperation sets the "Operation" field.
func (sfu *StrategyFilterUpdate) SetOperation(i int) *StrategyFilterUpdate {
	sfu.mutation.ResetOperation()
	sfu.mutation.SetOperation(i)
	return sfu
}

// SetNillableOperation sets the "Operation" field if the given value is not nil.
func (sfu *StrategyFilterUpdate) SetNillableOperation(i *int) *StrategyFilterUpdate {
	if i != nil {
		sfu.SetOperation(*i)
	}
	return sfu
}

// AddOperation adds i to the "Operation" field.
func (sfu *StrategyFilterUpdate) AddOperation(i int) *StrategyFilterUpdate {
	sfu.mutation.AddOperation(i)
	return sfu
}

// SetRightValue sets the "RightValue" field.
func (sfu *StrategyFilterUpdate) SetRightValue(s string) *StrategyFilterUpdate {
	sfu.mutation.SetRightValue(s)
	return sfu
}

// SetStrategyID sets the "Strategy" edge to the Strategy entity by ID.
func (sfu *StrategyFilterUpdate) SetStrategyID(id xid.ID) *StrategyFilterUpdate {
	sfu.mutation.SetStrategyID(id)
	return sfu
}

// SetStrategy sets the "Strategy" edge to the Strategy entity.
func (sfu *StrategyFilterUpdate) SetStrategy(s *Strategy) *StrategyFilterUpdate {
	return sfu.SetStrategyID(s.ID)
}

// Mutation returns the StrategyFilterMutation object of the builder.
func (sfu *StrategyFilterUpdate) Mutation() *StrategyFilterMutation {
	return sfu.mutation
}

// ClearStrategy clears the "Strategy" edge to the Strategy entity.
func (sfu *StrategyFilterUpdate) ClearStrategy() *StrategyFilterUpdate {
	sfu.mutation.ClearStrategy()
	return sfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *StrategyFilterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sfu.hooks) == 0 {
		if err = sfu.check(); err != nil {
			return 0, err
		}
		affected, err = sfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sfu.check(); err != nil {
				return 0, err
			}
			sfu.mutation = mutation
			affected, err = sfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sfu.hooks) - 1; i >= 0; i-- {
			if sfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *StrategyFilterUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *StrategyFilterUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *StrategyFilterUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfu *StrategyFilterUpdate) check() error {
	if v, ok := sfu.mutation.LineNum(); ok {
		if err := strategyfilter.LineNumValidator(v); err != nil {
			return &ValidationError{Name: "LineNum", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LineNum": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.LeftValueKind(); ok {
		if err := strategyfilter.LeftValueKindValidator(v); err != nil {
			return &ValidationError{Name: "LeftValueKind", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LeftValueKind": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.LeftValue(); ok {
		if err := strategyfilter.LeftValueValidator(v); err != nil {
			return &ValidationError{Name: "LeftValue", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LeftValue": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.Operation(); ok {
		if err := strategyfilter.OperationValidator(v); err != nil {
			return &ValidationError{Name: "Operation", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.Operation": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.RightValue(); ok {
		if err := strategyfilter.RightValueValidator(v); err != nil {
			return &ValidationError{Name: "RightValue", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.RightValue": %w`, err)}
		}
	}
	if _, ok := sfu.mutation.StrategyID(); sfu.mutation.StrategyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StrategyFilter.Strategy"`)
	}
	return nil
}

func (sfu *StrategyFilterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   strategyfilter.Table,
			Columns: strategyfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategyfilter.FieldID,
			},
		},
	}
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.LineNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLineNum,
		})
	}
	if value, ok := sfu.mutation.AddedLineNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLineNum,
		})
	}
	if value, ok := sfu.mutation.IsUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategyfilter.FieldIsUsed,
		})
	}
	if value, ok := sfu.mutation.LeftValueKind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLeftValueKind,
		})
	}
	if value, ok := sfu.mutation.AddedLeftValueKind(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLeftValueKind,
		})
	}
	if value, ok := sfu.mutation.LeftValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfilter.FieldLeftValue,
		})
	}
	if value, ok := sfu.mutation.RVT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldRVT,
		})
	}
	if value, ok := sfu.mutation.AddedRVT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldRVT,
		})
	}
	if value, ok := sfu.mutation.Operation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldOperation,
		})
	}
	if value, ok := sfu.mutation.AddedOperation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldOperation,
		})
	}
	if value, ok := sfu.mutation.RightValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfilter.FieldRightValue,
		})
	}
	if sfu.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfilter.StrategyTable,
			Columns: []string{strategyfilter.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfilter.StrategyTable,
			Columns: []string{strategyfilter.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StrategyFilterUpdateOne is the builder for updating a single StrategyFilter entity.
type StrategyFilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyFilterMutation
}

// SetLineNum sets the "LineNum" field.
func (sfuo *StrategyFilterUpdateOne) SetLineNum(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.ResetLineNum()
	sfuo.mutation.SetLineNum(i)
	return sfuo
}

// SetNillableLineNum sets the "LineNum" field if the given value is not nil.
func (sfuo *StrategyFilterUpdateOne) SetNillableLineNum(i *int) *StrategyFilterUpdateOne {
	if i != nil {
		sfuo.SetLineNum(*i)
	}
	return sfuo
}

// AddLineNum adds i to the "LineNum" field.
func (sfuo *StrategyFilterUpdateOne) AddLineNum(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.AddLineNum(i)
	return sfuo
}

// SetIsUsed sets the "IsUsed" field.
func (sfuo *StrategyFilterUpdateOne) SetIsUsed(b bool) *StrategyFilterUpdateOne {
	sfuo.mutation.SetIsUsed(b)
	return sfuo
}

// SetNillableIsUsed sets the "IsUsed" field if the given value is not nil.
func (sfuo *StrategyFilterUpdateOne) SetNillableIsUsed(b *bool) *StrategyFilterUpdateOne {
	if b != nil {
		sfuo.SetIsUsed(*b)
	}
	return sfuo
}

// SetLeftValueKind sets the "LeftValueKind" field.
func (sfuo *StrategyFilterUpdateOne) SetLeftValueKind(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.ResetLeftValueKind()
	sfuo.mutation.SetLeftValueKind(i)
	return sfuo
}

// SetNillableLeftValueKind sets the "LeftValueKind" field if the given value is not nil.
func (sfuo *StrategyFilterUpdateOne) SetNillableLeftValueKind(i *int) *StrategyFilterUpdateOne {
	if i != nil {
		sfuo.SetLeftValueKind(*i)
	}
	return sfuo
}

// AddLeftValueKind adds i to the "LeftValueKind" field.
func (sfuo *StrategyFilterUpdateOne) AddLeftValueKind(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.AddLeftValueKind(i)
	return sfuo
}

// SetLeftValue sets the "LeftValue" field.
func (sfuo *StrategyFilterUpdateOne) SetLeftValue(s string) *StrategyFilterUpdateOne {
	sfuo.mutation.SetLeftValue(s)
	return sfuo
}

// SetRVT sets the "RVT" field.
func (sfuo *StrategyFilterUpdateOne) SetRVT(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.ResetRVT()
	sfuo.mutation.SetRVT(i)
	return sfuo
}

// AddRVT adds i to the "RVT" field.
func (sfuo *StrategyFilterUpdateOne) AddRVT(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.AddRVT(i)
	return sfuo
}

// SetOperation sets the "Operation" field.
func (sfuo *StrategyFilterUpdateOne) SetOperation(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.ResetOperation()
	sfuo.mutation.SetOperation(i)
	return sfuo
}

// SetNillableOperation sets the "Operation" field if the given value is not nil.
func (sfuo *StrategyFilterUpdateOne) SetNillableOperation(i *int) *StrategyFilterUpdateOne {
	if i != nil {
		sfuo.SetOperation(*i)
	}
	return sfuo
}

// AddOperation adds i to the "Operation" field.
func (sfuo *StrategyFilterUpdateOne) AddOperation(i int) *StrategyFilterUpdateOne {
	sfuo.mutation.AddOperation(i)
	return sfuo
}

// SetRightValue sets the "RightValue" field.
func (sfuo *StrategyFilterUpdateOne) SetRightValue(s string) *StrategyFilterUpdateOne {
	sfuo.mutation.SetRightValue(s)
	return sfuo
}

// SetStrategyID sets the "Strategy" edge to the Strategy entity by ID.
func (sfuo *StrategyFilterUpdateOne) SetStrategyID(id xid.ID) *StrategyFilterUpdateOne {
	sfuo.mutation.SetStrategyID(id)
	return sfuo
}

// SetStrategy sets the "Strategy" edge to the Strategy entity.
func (sfuo *StrategyFilterUpdateOne) SetStrategy(s *Strategy) *StrategyFilterUpdateOne {
	return sfuo.SetStrategyID(s.ID)
}

// Mutation returns the StrategyFilterMutation object of the builder.
func (sfuo *StrategyFilterUpdateOne) Mutation() *StrategyFilterMutation {
	return sfuo.mutation
}

// ClearStrategy clears the "Strategy" edge to the Strategy entity.
func (sfuo *StrategyFilterUpdateOne) ClearStrategy() *StrategyFilterUpdateOne {
	sfuo.mutation.ClearStrategy()
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *StrategyFilterUpdateOne) Select(field string, fields ...string) *StrategyFilterUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated StrategyFilter entity.
func (sfuo *StrategyFilterUpdateOne) Save(ctx context.Context) (*StrategyFilter, error) {
	var (
		err  error
		node *StrategyFilter
	)
	if len(sfuo.hooks) == 0 {
		if err = sfuo.check(); err != nil {
			return nil, err
		}
		node, err = sfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sfuo.check(); err != nil {
				return nil, err
			}
			sfuo.mutation = mutation
			node, err = sfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sfuo.hooks) - 1; i >= 0; i-- {
			if sfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *StrategyFilterUpdateOne) SaveX(ctx context.Context) *StrategyFilter {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *StrategyFilterUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *StrategyFilterUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfuo *StrategyFilterUpdateOne) check() error {
	if v, ok := sfuo.mutation.LineNum(); ok {
		if err := strategyfilter.LineNumValidator(v); err != nil {
			return &ValidationError{Name: "LineNum", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LineNum": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.LeftValueKind(); ok {
		if err := strategyfilter.LeftValueKindValidator(v); err != nil {
			return &ValidationError{Name: "LeftValueKind", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LeftValueKind": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.LeftValue(); ok {
		if err := strategyfilter.LeftValueValidator(v); err != nil {
			return &ValidationError{Name: "LeftValue", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LeftValue": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.Operation(); ok {
		if err := strategyfilter.OperationValidator(v); err != nil {
			return &ValidationError{Name: "Operation", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.Operation": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.RightValue(); ok {
		if err := strategyfilter.RightValueValidator(v); err != nil {
			return &ValidationError{Name: "RightValue", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.RightValue": %w`, err)}
		}
	}
	if _, ok := sfuo.mutation.StrategyID(); sfuo.mutation.StrategyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StrategyFilter.Strategy"`)
	}
	return nil
}

func (sfuo *StrategyFilterUpdateOne) sqlSave(ctx context.Context) (_node *StrategyFilter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   strategyfilter.Table,
			Columns: strategyfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategyfilter.FieldID,
			},
		},
	}
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StrategyFilter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategyfilter.FieldID)
		for _, f := range fields {
			if !strategyfilter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategyfilter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.LineNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLineNum,
		})
	}
	if value, ok := sfuo.mutation.AddedLineNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLineNum,
		})
	}
	if value, ok := sfuo.mutation.IsUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategyfilter.FieldIsUsed,
		})
	}
	if value, ok := sfuo.mutation.LeftValueKind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLeftValueKind,
		})
	}
	if value, ok := sfuo.mutation.AddedLeftValueKind(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLeftValueKind,
		})
	}
	if value, ok := sfuo.mutation.LeftValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfilter.FieldLeftValue,
		})
	}
	if value, ok := sfuo.mutation.RVT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldRVT,
		})
	}
	if value, ok := sfuo.mutation.AddedRVT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldRVT,
		})
	}
	if value, ok := sfuo.mutation.Operation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldOperation,
		})
	}
	if value, ok := sfuo.mutation.AddedOperation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldOperation,
		})
	}
	if value, ok := sfuo.mutation.RightValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfilter.FieldRightValue,
		})
	}
	if sfuo.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfilter.StrategyTable,
			Columns: []string{strategyfilter.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfilter.StrategyTable,
			Columns: []string{strategyfilter.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StrategyFilter{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
