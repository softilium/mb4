// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/report"
)

// ReportCreate is the builder for creating a Report entity.
type ReportCreate struct {
	config
	mutation *ReportMutation
	hooks    []Hook
}

// SetYear sets the "Year" field.
func (rc *ReportCreate) SetYear(i int) *ReportCreate {
	rc.mutation.SetYear(i)
	return rc
}

// SetQuarter sets the "Quarter" field.
func (rc *ReportCreate) SetQuarter(i int) *ReportCreate {
	rc.mutation.SetQuarter(i)
	return rc
}

// SetReportDate sets the "ReportDate" field.
func (rc *ReportCreate) SetReportDate(t time.Time) *ReportCreate {
	rc.mutation.SetReportDate(t)
	return rc
}

// SetPnlRevenueYtd sets the "PnlRevenueYtd" field.
func (rc *ReportCreate) SetPnlRevenueYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlRevenueYtd(f)
	return rc
}

// SetPnlAmortizationYtd sets the "PnlAmortizationYtd" field.
func (rc *ReportCreate) SetPnlAmortizationYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlAmortizationYtd(f)
	return rc
}

// SetPnlOperationIncomeYtd sets the "PnlOperationIncomeYtd" field.
func (rc *ReportCreate) SetPnlOperationIncomeYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlOperationIncomeYtd(f)
	return rc
}

// SetPnlInterestIncomeYtd sets the "PnlInterestIncomeYtd" field.
func (rc *ReportCreate) SetPnlInterestIncomeYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlInterestIncomeYtd(f)
	return rc
}

// SetPnlInterestExpensesYtd sets the "PnlInterestExpensesYtd" field.
func (rc *ReportCreate) SetPnlInterestExpensesYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlInterestExpensesYtd(f)
	return rc
}

// SetPnlIncomeTaxYtd sets the "PnlIncomeTaxYtd" field.
func (rc *ReportCreate) SetPnlIncomeTaxYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlIncomeTaxYtd(f)
	return rc
}

// SetPnlNetIncomeYtd sets the "PnlNetIncomeYtd" field.
func (rc *ReportCreate) SetPnlNetIncomeYtd(f float64) *ReportCreate {
	rc.mutation.SetPnlNetIncomeYtd(f)
	return rc
}

// SetCfCashSld sets the "CfCashSld" field.
func (rc *ReportCreate) SetCfCashSld(f float64) *ReportCreate {
	rc.mutation.SetCfCashSld(f)
	return rc
}

// SetCfNonCurrentLiabilitiesSld sets the "CfNonCurrentLiabilitiesSld" field.
func (rc *ReportCreate) SetCfNonCurrentLiabilitiesSld(f float64) *ReportCreate {
	rc.mutation.SetCfNonCurrentLiabilitiesSld(f)
	return rc
}

// SetCfCurrentLiabilitesSld sets the "CfCurrentLiabilitesSld" field.
func (rc *ReportCreate) SetCfCurrentLiabilitesSld(f float64) *ReportCreate {
	rc.mutation.SetCfCurrentLiabilitesSld(f)
	return rc
}

// SetCfNonControlledSld sets the "CfNonControlledSld" field.
func (rc *ReportCreate) SetCfNonControlledSld(f float64) *ReportCreate {
	rc.mutation.SetCfNonControlledSld(f)
	return rc
}

// SetCfEquitySld sets the "CfEquitySld" field.
func (rc *ReportCreate) SetCfEquitySld(f float64) *ReportCreate {
	rc.mutation.SetCfEquitySld(f)
	return rc
}

// SetCfTotalSld sets the "CfTotalSld" field.
func (rc *ReportCreate) SetCfTotalSld(f float64) *ReportCreate {
	rc.mutation.SetCfTotalSld(f)
	return rc
}

// SetURL sets the "Url" field.
func (rc *ReportCreate) SetURL(s string) *ReportCreate {
	rc.mutation.SetURL(s)
	return rc
}

// SetNillableURL sets the "Url" field if the given value is not nil.
func (rc *ReportCreate) SetNillableURL(s *string) *ReportCreate {
	if s != nil {
		rc.SetURL(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReportCreate) SetID(x xid.ID) *ReportCreate {
	rc.mutation.SetID(x)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReportCreate) SetNillableID(x *xid.ID) *ReportCreate {
	if x != nil {
		rc.SetID(*x)
	}
	return rc
}

// SetEmitentID sets the "Emitent" edge to the Emitent entity by ID.
func (rc *ReportCreate) SetEmitentID(id xid.ID) *ReportCreate {
	rc.mutation.SetEmitentID(id)
	return rc
}

// SetEmitent sets the "Emitent" edge to the Emitent entity.
func (rc *ReportCreate) SetEmitent(e *Emitent) *ReportCreate {
	return rc.SetEmitentID(e.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (rc *ReportCreate) Mutation() *ReportMutation {
	return rc.mutation
}

// Save creates the Report in the database.
func (rc *ReportCreate) Save(ctx context.Context) (*Report, error) {
	var (
		err  error
		node *Report
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReportCreate) SaveX(ctx context.Context) *Report {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReportCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReportCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReportCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := report.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReportCreate) check() error {
	if _, ok := rc.mutation.Year(); !ok {
		return &ValidationError{Name: "Year", err: errors.New(`ent: missing required field "Report.Year"`)}
	}
	if v, ok := rc.mutation.Year(); ok {
		if err := report.YearValidator(v); err != nil {
			return &ValidationError{Name: "Year", err: fmt.Errorf(`ent: validator failed for field "Report.Year": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Quarter(); !ok {
		return &ValidationError{Name: "Quarter", err: errors.New(`ent: missing required field "Report.Quarter"`)}
	}
	if v, ok := rc.mutation.Quarter(); ok {
		if err := report.QuarterValidator(v); err != nil {
			return &ValidationError{Name: "Quarter", err: fmt.Errorf(`ent: validator failed for field "Report.Quarter": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ReportDate(); !ok {
		return &ValidationError{Name: "ReportDate", err: errors.New(`ent: missing required field "Report.ReportDate"`)}
	}
	if _, ok := rc.mutation.PnlRevenueYtd(); !ok {
		return &ValidationError{Name: "PnlRevenueYtd", err: errors.New(`ent: missing required field "Report.PnlRevenueYtd"`)}
	}
	if _, ok := rc.mutation.PnlAmortizationYtd(); !ok {
		return &ValidationError{Name: "PnlAmortizationYtd", err: errors.New(`ent: missing required field "Report.PnlAmortizationYtd"`)}
	}
	if _, ok := rc.mutation.PnlOperationIncomeYtd(); !ok {
		return &ValidationError{Name: "PnlOperationIncomeYtd", err: errors.New(`ent: missing required field "Report.PnlOperationIncomeYtd"`)}
	}
	if _, ok := rc.mutation.PnlInterestIncomeYtd(); !ok {
		return &ValidationError{Name: "PnlInterestIncomeYtd", err: errors.New(`ent: missing required field "Report.PnlInterestIncomeYtd"`)}
	}
	if _, ok := rc.mutation.PnlInterestExpensesYtd(); !ok {
		return &ValidationError{Name: "PnlInterestExpensesYtd", err: errors.New(`ent: missing required field "Report.PnlInterestExpensesYtd"`)}
	}
	if _, ok := rc.mutation.PnlIncomeTaxYtd(); !ok {
		return &ValidationError{Name: "PnlIncomeTaxYtd", err: errors.New(`ent: missing required field "Report.PnlIncomeTaxYtd"`)}
	}
	if _, ok := rc.mutation.PnlNetIncomeYtd(); !ok {
		return &ValidationError{Name: "PnlNetIncomeYtd", err: errors.New(`ent: missing required field "Report.PnlNetIncomeYtd"`)}
	}
	if _, ok := rc.mutation.CfCashSld(); !ok {
		return &ValidationError{Name: "CfCashSld", err: errors.New(`ent: missing required field "Report.CfCashSld"`)}
	}
	if _, ok := rc.mutation.CfNonCurrentLiabilitiesSld(); !ok {
		return &ValidationError{Name: "CfNonCurrentLiabilitiesSld", err: errors.New(`ent: missing required field "Report.CfNonCurrentLiabilitiesSld"`)}
	}
	if _, ok := rc.mutation.CfCurrentLiabilitesSld(); !ok {
		return &ValidationError{Name: "CfCurrentLiabilitesSld", err: errors.New(`ent: missing required field "Report.CfCurrentLiabilitesSld"`)}
	}
	if _, ok := rc.mutation.CfNonControlledSld(); !ok {
		return &ValidationError{Name: "CfNonControlledSld", err: errors.New(`ent: missing required field "Report.CfNonControlledSld"`)}
	}
	if _, ok := rc.mutation.CfEquitySld(); !ok {
		return &ValidationError{Name: "CfEquitySld", err: errors.New(`ent: missing required field "Report.CfEquitySld"`)}
	}
	if _, ok := rc.mutation.CfTotalSld(); !ok {
		return &ValidationError{Name: "CfTotalSld", err: errors.New(`ent: missing required field "Report.CfTotalSld"`)}
	}
	if v, ok := rc.mutation.URL(); ok {
		if err := report.URLValidator(v); err != nil {
			return &ValidationError{Name: "Url", err: fmt.Errorf(`ent: validator failed for field "Report.Url": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := report.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Report.id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.EmitentID(); !ok {
		return &ValidationError{Name: "Emitent", err: errors.New(`ent: missing required edge "Report.Emitent"`)}
	}
	return nil
}

func (rc *ReportCreate) sqlSave(ctx context.Context) (*Report, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *ReportCreate) createSpec() (*Report, *sqlgraph.CreateSpec) {
	var (
		_node = &Report{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: report.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: report.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Year(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldYear,
		})
		_node.Year = value
	}
	if value, ok := rc.mutation.Quarter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldQuarter,
		})
		_node.Quarter = value
	}
	if value, ok := rc.mutation.ReportDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: report.FieldReportDate,
		})
		_node.ReportDate = value
	}
	if value, ok := rc.mutation.PnlRevenueYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlRevenueYtd,
		})
		_node.PnlRevenueYtd = value
	}
	if value, ok := rc.mutation.PnlAmortizationYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlAmortizationYtd,
		})
		_node.PnlAmortizationYtd = value
	}
	if value, ok := rc.mutation.PnlOperationIncomeYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlOperationIncomeYtd,
		})
		_node.PnlOperationIncomeYtd = value
	}
	if value, ok := rc.mutation.PnlInterestIncomeYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestIncomeYtd,
		})
		_node.PnlInterestIncomeYtd = value
	}
	if value, ok := rc.mutation.PnlInterestExpensesYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestExpensesYtd,
		})
		_node.PnlInterestExpensesYtd = value
	}
	if value, ok := rc.mutation.PnlIncomeTaxYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlIncomeTaxYtd,
		})
		_node.PnlIncomeTaxYtd = value
	}
	if value, ok := rc.mutation.PnlNetIncomeYtd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlNetIncomeYtd,
		})
		_node.PnlNetIncomeYtd = value
	}
	if value, ok := rc.mutation.CfCashSld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCashSld,
		})
		_node.CfCashSld = value
	}
	if value, ok := rc.mutation.CfNonCurrentLiabilitiesSld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonCurrentLiabilitiesSld,
		})
		_node.CfNonCurrentLiabilitiesSld = value
	}
	if value, ok := rc.mutation.CfCurrentLiabilitesSld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCurrentLiabilitesSld,
		})
		_node.CfCurrentLiabilitesSld = value
	}
	if value, ok := rc.mutation.CfNonControlledSld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonControlledSld,
		})
		_node.CfNonControlledSld = value
	}
	if value, ok := rc.mutation.CfEquitySld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfEquitySld,
		})
		_node.CfEquitySld = value
	}
	if value, ok := rc.mutation.CfTotalSld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfTotalSld,
		})
		_node.CfTotalSld = value
	}
	if value, ok := rc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldURL,
		})
		_node.URL = value
	}
	if nodes := rc.mutation.EmitentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.EmitentTable,
			Columns: []string{report.EmitentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emitent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.emitent_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportCreateBulk is the builder for creating many Report entities in bulk.
type ReportCreateBulk struct {
	config
	builders []*ReportCreate
}

// Save creates the Report entities in the database.
func (rcb *ReportCreateBulk) Save(ctx context.Context) ([]*Report, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Report, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReportCreateBulk) SaveX(ctx context.Context) []*Report {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReportCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReportCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
