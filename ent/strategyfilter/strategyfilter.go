// Code generated by entc, DO NOT EDIT.

package strategyfilter

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the strategyfilter type in the database.
	Label = "strategy_filter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLineNum holds the string denoting the linenum field in the database.
	FieldLineNum = "line_num"
	// FieldIsUsed holds the string denoting the isused field in the database.
	FieldIsUsed = "is_used"
	// FieldLeftValueKind holds the string denoting the leftvaluekind field in the database.
	FieldLeftValueKind = "left_value_kind"
	// FieldLeftValue holds the string denoting the leftvalue field in the database.
	FieldLeftValue = "left_value"
	// FieldRVT holds the string denoting the rvt field in the database.
	FieldRVT = "rvt"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldRightValue holds the string denoting the rightvalue field in the database.
	FieldRightValue = "right_value"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "Strategy"
	// Table holds the table name of the strategyfilter in the database.
	Table = "strategy_filters"
	// StrategyTable is the table that holds the Strategy relation/edge.
	StrategyTable = "strategy_filters"
	// StrategyInverseTable is the table name for the Strategy entity.
	// It exists in this package in order to avoid circular dependency with the "strategy" package.
	StrategyInverseTable = "strategies"
	// StrategyColumn is the table column denoting the Strategy relation/edge.
	StrategyColumn = "strategy_filters"
)

// Columns holds all SQL columns for strategyfilter fields.
var Columns = []string{
	FieldID,
	FieldLineNum,
	FieldIsUsed,
	FieldLeftValueKind,
	FieldLeftValue,
	FieldRVT,
	FieldOperation,
	FieldRightValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "strategy_filters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"strategy_filters",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLineNum holds the default value on creation for the "LineNum" field.
	DefaultLineNum int
	// LineNumValidator is a validator for the "LineNum" field. It is called by the builders before save.
	LineNumValidator func(int) error
	// DefaultIsUsed holds the default value on creation for the "IsUsed" field.
	DefaultIsUsed bool
	// DefaultLeftValueKind holds the default value on creation for the "LeftValueKind" field.
	DefaultLeftValueKind int
	// LeftValueKindValidator is a validator for the "LeftValueKind" field. It is called by the builders before save.
	LeftValueKindValidator func(int) error
	// LeftValueValidator is a validator for the "LeftValue" field. It is called by the builders before save.
	LeftValueValidator func(string) error
	// DefaultOperation holds the default value on creation for the "Operation" field.
	DefaultOperation int
	// OperationValidator is a validator for the "Operation" field. It is called by the builders before save.
	OperationValidator func(int) error
	// RightValueValidator is a validator for the "RightValue" field. It is called by the builders before save.
	RightValueValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
