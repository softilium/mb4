// Code generated by entc, DO NOT EDIT.

package strategyfilter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/softilium/mb4/domains"
	"github.com/softilium/mb4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LineNum applies equality check predicate on the "LineNum" field. It's identical to LineNumEQ.
func LineNum(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineNum), v))
	})
}

// IsUsed applies equality check predicate on the "IsUsed" field. It's identical to IsUsedEQ.
func IsUsed(v bool) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUsed), v))
	})
}

// LeftValueKind applies equality check predicate on the "LeftValueKind" field. It's identical to LeftValueKindEQ.
func LeftValueKind(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftValueKind), vc))
	})
}

// LeftReportValue applies equality check predicate on the "LeftReportValue" field. It's identical to LeftReportValueEQ.
func LeftReportValue(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueType applies equality check predicate on the "LeftReportValueType" field. It's identical to LeftReportValueTypeEQ.
func LeftReportValueType(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftReportValueType), vc))
	})
}

// Operation applies equality check predicate on the "Operation" field. It's identical to OperationEQ.
func Operation(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperation), vc))
	})
}

// RightValueStr applies equality check predicate on the "RightValueStr" field. It's identical to RightValueStrEQ.
func RightValueStr(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightValueStr), v))
	})
}

// RightValueFloat applies equality check predicate on the "RightValueFloat" field. It's identical to RightValueFloatEQ.
func RightValueFloat(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightValueFloat), v))
	})
}

// LineNumEQ applies the EQ predicate on the "LineNum" field.
func LineNumEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineNum), v))
	})
}

// LineNumNEQ applies the NEQ predicate on the "LineNum" field.
func LineNumNEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLineNum), v))
	})
}

// LineNumIn applies the In predicate on the "LineNum" field.
func LineNumIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLineNum), v...))
	})
}

// LineNumNotIn applies the NotIn predicate on the "LineNum" field.
func LineNumNotIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLineNum), v...))
	})
}

// LineNumGT applies the GT predicate on the "LineNum" field.
func LineNumGT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLineNum), v))
	})
}

// LineNumGTE applies the GTE predicate on the "LineNum" field.
func LineNumGTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLineNum), v))
	})
}

// LineNumLT applies the LT predicate on the "LineNum" field.
func LineNumLT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLineNum), v))
	})
}

// LineNumLTE applies the LTE predicate on the "LineNum" field.
func LineNumLTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLineNum), v))
	})
}

// IsUsedEQ applies the EQ predicate on the "IsUsed" field.
func IsUsedEQ(v bool) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUsed), v))
	})
}

// IsUsedNEQ applies the NEQ predicate on the "IsUsed" field.
func IsUsedNEQ(v bool) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsUsed), v))
	})
}

// LeftValueKindEQ applies the EQ predicate on the "LeftValueKind" field.
func LeftValueKindEQ(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftValueKind), vc))
	})
}

// LeftValueKindNEQ applies the NEQ predicate on the "LeftValueKind" field.
func LeftValueKindNEQ(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeftValueKind), vc))
	})
}

// LeftValueKindIn applies the In predicate on the "LeftValueKind" field.
func LeftValueKindIn(vs ...domains.FilterValueKind) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeftValueKind), v...))
	})
}

// LeftValueKindNotIn applies the NotIn predicate on the "LeftValueKind" field.
func LeftValueKindNotIn(vs ...domains.FilterValueKind) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeftValueKind), v...))
	})
}

// LeftValueKindGT applies the GT predicate on the "LeftValueKind" field.
func LeftValueKindGT(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeftValueKind), vc))
	})
}

// LeftValueKindGTE applies the GTE predicate on the "LeftValueKind" field.
func LeftValueKindGTE(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeftValueKind), vc))
	})
}

// LeftValueKindLT applies the LT predicate on the "LeftValueKind" field.
func LeftValueKindLT(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeftValueKind), vc))
	})
}

// LeftValueKindLTE applies the LTE predicate on the "LeftValueKind" field.
func LeftValueKindLTE(v domains.FilterValueKind) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeftValueKind), vc))
	})
}

// LeftReportValueEQ applies the EQ predicate on the "LeftReportValue" field.
func LeftReportValueEQ(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueNEQ applies the NEQ predicate on the "LeftReportValue" field.
func LeftReportValueNEQ(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueIn applies the In predicate on the "LeftReportValue" field.
func LeftReportValueIn(vs ...domains.ReportValue) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeftReportValue), v...))
	})
}

// LeftReportValueNotIn applies the NotIn predicate on the "LeftReportValue" field.
func LeftReportValueNotIn(vs ...domains.ReportValue) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeftReportValue), v...))
	})
}

// LeftReportValueGT applies the GT predicate on the "LeftReportValue" field.
func LeftReportValueGT(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueGTE applies the GTE predicate on the "LeftReportValue" field.
func LeftReportValueGTE(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueLT applies the LT predicate on the "LeftReportValue" field.
func LeftReportValueLT(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueLTE applies the LTE predicate on the "LeftReportValue" field.
func LeftReportValueLTE(v domains.ReportValue) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeftReportValue), vc))
	})
}

// LeftReportValueTypeEQ applies the EQ predicate on the "LeftReportValueType" field.
func LeftReportValueTypeEQ(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftReportValueType), vc))
	})
}

// LeftReportValueTypeNEQ applies the NEQ predicate on the "LeftReportValueType" field.
func LeftReportValueTypeNEQ(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeftReportValueType), vc))
	})
}

// LeftReportValueTypeIn applies the In predicate on the "LeftReportValueType" field.
func LeftReportValueTypeIn(vs ...domains.ReportValueType) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeftReportValueType), v...))
	})
}

// LeftReportValueTypeNotIn applies the NotIn predicate on the "LeftReportValueType" field.
func LeftReportValueTypeNotIn(vs ...domains.ReportValueType) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeftReportValueType), v...))
	})
}

// LeftReportValueTypeGT applies the GT predicate on the "LeftReportValueType" field.
func LeftReportValueTypeGT(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeftReportValueType), vc))
	})
}

// LeftReportValueTypeGTE applies the GTE predicate on the "LeftReportValueType" field.
func LeftReportValueTypeGTE(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeftReportValueType), vc))
	})
}

// LeftReportValueTypeLT applies the LT predicate on the "LeftReportValueType" field.
func LeftReportValueTypeLT(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeftReportValueType), vc))
	})
}

// LeftReportValueTypeLTE applies the LTE predicate on the "LeftReportValueType" field.
func LeftReportValueTypeLTE(v domains.ReportValueType) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeftReportValueType), vc))
	})
}

// OperationEQ applies the EQ predicate on the "Operation" field.
func OperationEQ(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperation), vc))
	})
}

// OperationNEQ applies the NEQ predicate on the "Operation" field.
func OperationNEQ(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperation), vc))
	})
}

// OperationIn applies the In predicate on the "Operation" field.
func OperationIn(vs ...domains.FilterOp) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperation), v...))
	})
}

// OperationNotIn applies the NotIn predicate on the "Operation" field.
func OperationNotIn(vs ...domains.FilterOp) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperation), v...))
	})
}

// OperationGT applies the GT predicate on the "Operation" field.
func OperationGT(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperation), vc))
	})
}

// OperationGTE applies the GTE predicate on the "Operation" field.
func OperationGTE(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperation), vc))
	})
}

// OperationLT applies the LT predicate on the "Operation" field.
func OperationLT(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperation), vc))
	})
}

// OperationLTE applies the LTE predicate on the "Operation" field.
func OperationLTE(v domains.FilterOp) predicate.StrategyFilter {
	vc := int(v)
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperation), vc))
	})
}

// RightValueStrEQ applies the EQ predicate on the "RightValueStr" field.
func RightValueStrEQ(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrNEQ applies the NEQ predicate on the "RightValueStr" field.
func RightValueStrNEQ(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrIn applies the In predicate on the "RightValueStr" field.
func RightValueStrIn(vs ...string) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRightValueStr), v...))
	})
}

// RightValueStrNotIn applies the NotIn predicate on the "RightValueStr" field.
func RightValueStrNotIn(vs ...string) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRightValueStr), v...))
	})
}

// RightValueStrGT applies the GT predicate on the "RightValueStr" field.
func RightValueStrGT(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrGTE applies the GTE predicate on the "RightValueStr" field.
func RightValueStrGTE(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrLT applies the LT predicate on the "RightValueStr" field.
func RightValueStrLT(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrLTE applies the LTE predicate on the "RightValueStr" field.
func RightValueStrLTE(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrContains applies the Contains predicate on the "RightValueStr" field.
func RightValueStrContains(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrHasPrefix applies the HasPrefix predicate on the "RightValueStr" field.
func RightValueStrHasPrefix(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrHasSuffix applies the HasSuffix predicate on the "RightValueStr" field.
func RightValueStrHasSuffix(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrEqualFold applies the EqualFold predicate on the "RightValueStr" field.
func RightValueStrEqualFold(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRightValueStr), v))
	})
}

// RightValueStrContainsFold applies the ContainsFold predicate on the "RightValueStr" field.
func RightValueStrContainsFold(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRightValueStr), v))
	})
}

// RightValueFloatEQ applies the EQ predicate on the "RightValueFloat" field.
func RightValueFloatEQ(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightValueFloat), v))
	})
}

// RightValueFloatNEQ applies the NEQ predicate on the "RightValueFloat" field.
func RightValueFloatNEQ(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRightValueFloat), v))
	})
}

// RightValueFloatIn applies the In predicate on the "RightValueFloat" field.
func RightValueFloatIn(vs ...float64) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRightValueFloat), v...))
	})
}

// RightValueFloatNotIn applies the NotIn predicate on the "RightValueFloat" field.
func RightValueFloatNotIn(vs ...float64) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRightValueFloat), v...))
	})
}

// RightValueFloatGT applies the GT predicate on the "RightValueFloat" field.
func RightValueFloatGT(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRightValueFloat), v))
	})
}

// RightValueFloatGTE applies the GTE predicate on the "RightValueFloat" field.
func RightValueFloatGTE(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRightValueFloat), v))
	})
}

// RightValueFloatLT applies the LT predicate on the "RightValueFloat" field.
func RightValueFloatLT(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRightValueFloat), v))
	})
}

// RightValueFloatLTE applies the LTE predicate on the "RightValueFloat" field.
func RightValueFloatLTE(v float64) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRightValueFloat), v))
	})
}

// HasStrategy applies the HasEdge predicate on the "Strategy" edge.
func HasStrategy() predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StrategyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "Strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.Strategy) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StrategyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StrategyFilter) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StrategyFilter) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StrategyFilter) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		p(s.Not())
	})
}
