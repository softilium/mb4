// Code generated by entc, DO NOT EDIT.

package strategyfilter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LineNum applies equality check predicate on the "LineNum" field. It's identical to LineNumEQ.
func LineNum(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineNum), v))
	})
}

// IsUsed applies equality check predicate on the "IsUsed" field. It's identical to IsUsedEQ.
func IsUsed(v bool) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUsed), v))
	})
}

// LeftValueKind applies equality check predicate on the "LeftValueKind" field. It's identical to LeftValueKindEQ.
func LeftValueKind(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftValueKind), v))
	})
}

// LeftValue applies equality check predicate on the "LeftValue" field. It's identical to LeftValueEQ.
func LeftValue(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftValue), v))
	})
}

// RVT applies equality check predicate on the "RVT" field. It's identical to RVTEQ.
func RVT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRVT), v))
	})
}

// Operation applies equality check predicate on the "Operation" field. It's identical to OperationEQ.
func Operation(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperation), v))
	})
}

// RightValue applies equality check predicate on the "RightValue" field. It's identical to RightValueEQ.
func RightValue(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightValue), v))
	})
}

// LineNumEQ applies the EQ predicate on the "LineNum" field.
func LineNumEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineNum), v))
	})
}

// LineNumNEQ applies the NEQ predicate on the "LineNum" field.
func LineNumNEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLineNum), v))
	})
}

// LineNumIn applies the In predicate on the "LineNum" field.
func LineNumIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLineNum), v...))
	})
}

// LineNumNotIn applies the NotIn predicate on the "LineNum" field.
func LineNumNotIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLineNum), v...))
	})
}

// LineNumGT applies the GT predicate on the "LineNum" field.
func LineNumGT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLineNum), v))
	})
}

// LineNumGTE applies the GTE predicate on the "LineNum" field.
func LineNumGTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLineNum), v))
	})
}

// LineNumLT applies the LT predicate on the "LineNum" field.
func LineNumLT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLineNum), v))
	})
}

// LineNumLTE applies the LTE predicate on the "LineNum" field.
func LineNumLTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLineNum), v))
	})
}

// IsUsedEQ applies the EQ predicate on the "IsUsed" field.
func IsUsedEQ(v bool) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUsed), v))
	})
}

// IsUsedNEQ applies the NEQ predicate on the "IsUsed" field.
func IsUsedNEQ(v bool) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsUsed), v))
	})
}

// LeftValueKindEQ applies the EQ predicate on the "LeftValueKind" field.
func LeftValueKindEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftValueKind), v))
	})
}

// LeftValueKindNEQ applies the NEQ predicate on the "LeftValueKind" field.
func LeftValueKindNEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeftValueKind), v))
	})
}

// LeftValueKindIn applies the In predicate on the "LeftValueKind" field.
func LeftValueKindIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeftValueKind), v...))
	})
}

// LeftValueKindNotIn applies the NotIn predicate on the "LeftValueKind" field.
func LeftValueKindNotIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeftValueKind), v...))
	})
}

// LeftValueKindGT applies the GT predicate on the "LeftValueKind" field.
func LeftValueKindGT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeftValueKind), v))
	})
}

// LeftValueKindGTE applies the GTE predicate on the "LeftValueKind" field.
func LeftValueKindGTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeftValueKind), v))
	})
}

// LeftValueKindLT applies the LT predicate on the "LeftValueKind" field.
func LeftValueKindLT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeftValueKind), v))
	})
}

// LeftValueKindLTE applies the LTE predicate on the "LeftValueKind" field.
func LeftValueKindLTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeftValueKind), v))
	})
}

// LeftValueEQ applies the EQ predicate on the "LeftValue" field.
func LeftValueEQ(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeftValue), v))
	})
}

// LeftValueNEQ applies the NEQ predicate on the "LeftValue" field.
func LeftValueNEQ(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeftValue), v))
	})
}

// LeftValueIn applies the In predicate on the "LeftValue" field.
func LeftValueIn(vs ...string) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeftValue), v...))
	})
}

// LeftValueNotIn applies the NotIn predicate on the "LeftValue" field.
func LeftValueNotIn(vs ...string) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeftValue), v...))
	})
}

// LeftValueGT applies the GT predicate on the "LeftValue" field.
func LeftValueGT(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeftValue), v))
	})
}

// LeftValueGTE applies the GTE predicate on the "LeftValue" field.
func LeftValueGTE(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeftValue), v))
	})
}

// LeftValueLT applies the LT predicate on the "LeftValue" field.
func LeftValueLT(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeftValue), v))
	})
}

// LeftValueLTE applies the LTE predicate on the "LeftValue" field.
func LeftValueLTE(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeftValue), v))
	})
}

// LeftValueContains applies the Contains predicate on the "LeftValue" field.
func LeftValueContains(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLeftValue), v))
	})
}

// LeftValueHasPrefix applies the HasPrefix predicate on the "LeftValue" field.
func LeftValueHasPrefix(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLeftValue), v))
	})
}

// LeftValueHasSuffix applies the HasSuffix predicate on the "LeftValue" field.
func LeftValueHasSuffix(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLeftValue), v))
	})
}

// LeftValueEqualFold applies the EqualFold predicate on the "LeftValue" field.
func LeftValueEqualFold(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLeftValue), v))
	})
}

// LeftValueContainsFold applies the ContainsFold predicate on the "LeftValue" field.
func LeftValueContainsFold(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLeftValue), v))
	})
}

// RVTEQ applies the EQ predicate on the "RVT" field.
func RVTEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRVT), v))
	})
}

// RVTNEQ applies the NEQ predicate on the "RVT" field.
func RVTNEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRVT), v))
	})
}

// RVTIn applies the In predicate on the "RVT" field.
func RVTIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRVT), v...))
	})
}

// RVTNotIn applies the NotIn predicate on the "RVT" field.
func RVTNotIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRVT), v...))
	})
}

// RVTGT applies the GT predicate on the "RVT" field.
func RVTGT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRVT), v))
	})
}

// RVTGTE applies the GTE predicate on the "RVT" field.
func RVTGTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRVT), v))
	})
}

// RVTLT applies the LT predicate on the "RVT" field.
func RVTLT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRVT), v))
	})
}

// RVTLTE applies the LTE predicate on the "RVT" field.
func RVTLTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRVT), v))
	})
}

// OperationEQ applies the EQ predicate on the "Operation" field.
func OperationEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperation), v))
	})
}

// OperationNEQ applies the NEQ predicate on the "Operation" field.
func OperationNEQ(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperation), v))
	})
}

// OperationIn applies the In predicate on the "Operation" field.
func OperationIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperation), v...))
	})
}

// OperationNotIn applies the NotIn predicate on the "Operation" field.
func OperationNotIn(vs ...int) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperation), v...))
	})
}

// OperationGT applies the GT predicate on the "Operation" field.
func OperationGT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperation), v))
	})
}

// OperationGTE applies the GTE predicate on the "Operation" field.
func OperationGTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperation), v))
	})
}

// OperationLT applies the LT predicate on the "Operation" field.
func OperationLT(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperation), v))
	})
}

// OperationLTE applies the LTE predicate on the "Operation" field.
func OperationLTE(v int) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperation), v))
	})
}

// RightValueEQ applies the EQ predicate on the "RightValue" field.
func RightValueEQ(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRightValue), v))
	})
}

// RightValueNEQ applies the NEQ predicate on the "RightValue" field.
func RightValueNEQ(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRightValue), v))
	})
}

// RightValueIn applies the In predicate on the "RightValue" field.
func RightValueIn(vs ...string) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRightValue), v...))
	})
}

// RightValueNotIn applies the NotIn predicate on the "RightValue" field.
func RightValueNotIn(vs ...string) predicate.StrategyFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRightValue), v...))
	})
}

// RightValueGT applies the GT predicate on the "RightValue" field.
func RightValueGT(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRightValue), v))
	})
}

// RightValueGTE applies the GTE predicate on the "RightValue" field.
func RightValueGTE(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRightValue), v))
	})
}

// RightValueLT applies the LT predicate on the "RightValue" field.
func RightValueLT(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRightValue), v))
	})
}

// RightValueLTE applies the LTE predicate on the "RightValue" field.
func RightValueLTE(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRightValue), v))
	})
}

// RightValueContains applies the Contains predicate on the "RightValue" field.
func RightValueContains(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRightValue), v))
	})
}

// RightValueHasPrefix applies the HasPrefix predicate on the "RightValue" field.
func RightValueHasPrefix(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRightValue), v))
	})
}

// RightValueHasSuffix applies the HasSuffix predicate on the "RightValue" field.
func RightValueHasSuffix(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRightValue), v))
	})
}

// RightValueEqualFold applies the EqualFold predicate on the "RightValue" field.
func RightValueEqualFold(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRightValue), v))
	})
}

// RightValueContainsFold applies the ContainsFold predicate on the "RightValue" field.
func RightValueContainsFold(v string) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRightValue), v))
	})
}

// HasStrategy applies the HasEdge predicate on the "Strategy" edge.
func HasStrategy() predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StrategyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "Strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.Strategy) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StrategyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StrategyFilter) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StrategyFilter) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StrategyFilter) predicate.StrategyFilter {
	return predicate.StrategyFilter(func(s *sql.Selector) {
		p(s.Not())
	})
}
