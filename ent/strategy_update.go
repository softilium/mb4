// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/domains"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfactor"
	"github.com/softilium/mb4/ent/strategyfilter"
	"github.com/softilium/mb4/ent/strategyfixedticker"
	"github.com/softilium/mb4/ent/user"
)

// StrategyUpdate is the builder for updating Strategy entities.
type StrategyUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyMutation
}

// Where appends a list predicates to the StrategyUpdate builder.
func (su *StrategyUpdate) Where(ps ...predicate.Strategy) *StrategyUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDescr sets the "Descr" field.
func (su *StrategyUpdate) SetDescr(s string) *StrategyUpdate {
	su.mutation.SetDescr(s)
	return su
}

// SetMaxTickers sets the "MaxTickers" field.
func (su *StrategyUpdate) SetMaxTickers(i int) *StrategyUpdate {
	su.mutation.ResetMaxTickers()
	su.mutation.SetMaxTickers(i)
	return su
}

// SetNillableMaxTickers sets the "MaxTickers" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableMaxTickers(i *int) *StrategyUpdate {
	if i != nil {
		su.SetMaxTickers(*i)
	}
	return su
}

// AddMaxTickers adds i to the "MaxTickers" field.
func (su *StrategyUpdate) AddMaxTickers(i int) *StrategyUpdate {
	su.mutation.AddMaxTickers(i)
	return su
}

// SetMaxTickersPerIndustry sets the "MaxTickersPerIndustry" field.
func (su *StrategyUpdate) SetMaxTickersPerIndustry(i int) *StrategyUpdate {
	su.mutation.ResetMaxTickersPerIndustry()
	su.mutation.SetMaxTickersPerIndustry(i)
	return su
}

// SetNillableMaxTickersPerIndustry sets the "MaxTickersPerIndustry" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableMaxTickersPerIndustry(i *int) *StrategyUpdate {
	if i != nil {
		su.SetMaxTickersPerIndustry(*i)
	}
	return su
}

// AddMaxTickersPerIndustry adds i to the "MaxTickersPerIndustry" field.
func (su *StrategyUpdate) AddMaxTickersPerIndustry(i int) *StrategyUpdate {
	su.mutation.AddMaxTickersPerIndustry(i)
	return su
}

// SetBaseIndex sets the "BaseIndex" field.
func (su *StrategyUpdate) SetBaseIndex(s string) *StrategyUpdate {
	su.mutation.SetBaseIndex(s)
	return su
}

// SetNillableBaseIndex sets the "BaseIndex" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableBaseIndex(s *string) *StrategyUpdate {
	if s != nil {
		su.SetBaseIndex(*s)
	}
	return su
}

// ClearBaseIndex clears the value of the "BaseIndex" field.
func (su *StrategyUpdate) ClearBaseIndex() *StrategyUpdate {
	su.mutation.ClearBaseIndex()
	return su
}

// SetLastYearInventResult sets the "LastYearInventResult" field.
func (su *StrategyUpdate) SetLastYearInventResult(f float64) *StrategyUpdate {
	su.mutation.ResetLastYearInventResult()
	su.mutation.SetLastYearInventResult(f)
	return su
}

// SetNillableLastYearInventResult sets the "LastYearInventResult" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableLastYearInventResult(f *float64) *StrategyUpdate {
	if f != nil {
		su.SetLastYearInventResult(*f)
	}
	return su
}

// AddLastYearInventResult adds f to the "LastYearInventResult" field.
func (su *StrategyUpdate) AddLastYearInventResult(f float64) *StrategyUpdate {
	su.mutation.AddLastYearInventResult(f)
	return su
}

// SetLastYearYield sets the "LastYearYield" field.
func (su *StrategyUpdate) SetLastYearYield(f float64) *StrategyUpdate {
	su.mutation.ResetLastYearYield()
	su.mutation.SetLastYearYield(f)
	return su
}

// SetNillableLastYearYield sets the "LastYearYield" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableLastYearYield(f *float64) *StrategyUpdate {
	if f != nil {
		su.SetLastYearYield(*f)
	}
	return su
}

// AddLastYearYield adds f to the "LastYearYield" field.
func (su *StrategyUpdate) AddLastYearYield(f float64) *StrategyUpdate {
	su.mutation.AddLastYearYield(f)
	return su
}

// SetLast3YearsInvertResult sets the "Last3YearsInvertResult" field.
func (su *StrategyUpdate) SetLast3YearsInvertResult(f float64) *StrategyUpdate {
	su.mutation.ResetLast3YearsInvertResult()
	su.mutation.SetLast3YearsInvertResult(f)
	return su
}

// SetNillableLast3YearsInvertResult sets the "Last3YearsInvertResult" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableLast3YearsInvertResult(f *float64) *StrategyUpdate {
	if f != nil {
		su.SetLast3YearsInvertResult(*f)
	}
	return su
}

// AddLast3YearsInvertResult adds f to the "Last3YearsInvertResult" field.
func (su *StrategyUpdate) AddLast3YearsInvertResult(f float64) *StrategyUpdate {
	su.mutation.AddLast3YearsInvertResult(f)
	return su
}

// SetLast3YearsYield sets the "Last3YearsYield" field.
func (su *StrategyUpdate) SetLast3YearsYield(f float64) *StrategyUpdate {
	su.mutation.ResetLast3YearsYield()
	su.mutation.SetLast3YearsYield(f)
	return su
}

// SetNillableLast3YearsYield sets the "Last3YearsYield" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableLast3YearsYield(f *float64) *StrategyUpdate {
	if f != nil {
		su.SetLast3YearsYield(*f)
	}
	return su
}

// AddLast3YearsYield adds f to the "Last3YearsYield" field.
func (su *StrategyUpdate) AddLast3YearsYield(f float64) *StrategyUpdate {
	su.mutation.AddLast3YearsYield(f)
	return su
}

// SetWeekRefillAmount sets the "WeekRefillAmount" field.
func (su *StrategyUpdate) SetWeekRefillAmount(f float64) *StrategyUpdate {
	su.mutation.ResetWeekRefillAmount()
	su.mutation.SetWeekRefillAmount(f)
	return su
}

// AddWeekRefillAmount adds f to the "WeekRefillAmount" field.
func (su *StrategyUpdate) AddWeekRefillAmount(f float64) *StrategyUpdate {
	su.mutation.AddWeekRefillAmount(f)
	return su
}

// SetStartAmount sets the "StartAmount" field.
func (su *StrategyUpdate) SetStartAmount(f float64) *StrategyUpdate {
	su.mutation.ResetStartAmount()
	su.mutation.SetStartAmount(f)
	return su
}

// AddStartAmount adds f to the "StartAmount" field.
func (su *StrategyUpdate) AddStartAmount(f float64) *StrategyUpdate {
	su.mutation.AddStartAmount(f)
	return su
}

// SetStartSimulation sets the "StartSimulation" field.
func (su *StrategyUpdate) SetStartSimulation(ddo *domains.JSDateOnly) *StrategyUpdate {
	su.mutation.SetStartSimulation(ddo)
	return su
}

// SetBuyOnlyLowPrice sets the "BuyOnlyLowPrice" field.
func (su *StrategyUpdate) SetBuyOnlyLowPrice(b bool) *StrategyUpdate {
	su.mutation.SetBuyOnlyLowPrice(b)
	return su
}

// SetNillableBuyOnlyLowPrice sets the "BuyOnlyLowPrice" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableBuyOnlyLowPrice(b *bool) *StrategyUpdate {
	if b != nil {
		su.SetBuyOnlyLowPrice(*b)
	}
	return su
}

// SetAllowLossWhenSell sets the "AllowLossWhenSell" field.
func (su *StrategyUpdate) SetAllowLossWhenSell(b bool) *StrategyUpdate {
	su.mutation.SetAllowLossWhenSell(b)
	return su
}

// SetNillableAllowLossWhenSell sets the "AllowLossWhenSell" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableAllowLossWhenSell(b *bool) *StrategyUpdate {
	if b != nil {
		su.SetAllowLossWhenSell(*b)
	}
	return su
}

// SetAllowSellToFit sets the "AllowSellToFit" field.
func (su *StrategyUpdate) SetAllowSellToFit(b bool) *StrategyUpdate {
	su.mutation.SetAllowSellToFit(b)
	return su
}

// SetNillableAllowSellToFit sets the "AllowSellToFit" field if the given value is not nil.
func (su *StrategyUpdate) SetNillableAllowSellToFit(b *bool) *StrategyUpdate {
	if b != nil {
		su.SetAllowSellToFit(*b)
	}
	return su
}

// SetSameEmitent sets the "SameEmitent" field.
func (su *StrategyUpdate) SetSameEmitent(i int) *StrategyUpdate {
	su.mutation.ResetSameEmitent()
	su.mutation.SetSameEmitent(i)
	return su
}

// AddSameEmitent adds i to the "SameEmitent" field.
func (su *StrategyUpdate) AddSameEmitent(i int) *StrategyUpdate {
	su.mutation.AddSameEmitent(i)
	return su
}

// SetUserID sets the "User" edge to the User entity by ID.
func (su *StrategyUpdate) SetUserID(id xid.ID) *StrategyUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetUser sets the "User" edge to the User entity.
func (su *StrategyUpdate) SetUser(u *User) *StrategyUpdate {
	return su.SetUserID(u.ID)
}

// AddFactorIDs adds the "Factors" edge to the StrategyFactor entity by IDs.
func (su *StrategyUpdate) AddFactorIDs(ids ...xid.ID) *StrategyUpdate {
	su.mutation.AddFactorIDs(ids...)
	return su
}

// AddFactors adds the "Factors" edges to the StrategyFactor entity.
func (su *StrategyUpdate) AddFactors(s ...*StrategyFactor) *StrategyUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddFactorIDs(ids...)
}

// AddFilterIDs adds the "Filters" edge to the StrategyFilter entity by IDs.
func (su *StrategyUpdate) AddFilterIDs(ids ...xid.ID) *StrategyUpdate {
	su.mutation.AddFilterIDs(ids...)
	return su
}

// AddFilters adds the "Filters" edges to the StrategyFilter entity.
func (su *StrategyUpdate) AddFilters(s ...*StrategyFilter) *StrategyUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddFilterIDs(ids...)
}

// AddFixedTickerIDs adds the "FixedTickers" edge to the StrategyFixedTicker entity by IDs.
func (su *StrategyUpdate) AddFixedTickerIDs(ids ...xid.ID) *StrategyUpdate {
	su.mutation.AddFixedTickerIDs(ids...)
	return su
}

// AddFixedTickers adds the "FixedTickers" edges to the StrategyFixedTicker entity.
func (su *StrategyUpdate) AddFixedTickers(s ...*StrategyFixedTicker) *StrategyUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddFixedTickerIDs(ids...)
}

// Mutation returns the StrategyMutation object of the builder.
func (su *StrategyUpdate) Mutation() *StrategyMutation {
	return su.mutation
}

// ClearUser clears the "User" edge to the User entity.
func (su *StrategyUpdate) ClearUser() *StrategyUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearFactors clears all "Factors" edges to the StrategyFactor entity.
func (su *StrategyUpdate) ClearFactors() *StrategyUpdate {
	su.mutation.ClearFactors()
	return su
}

// RemoveFactorIDs removes the "Factors" edge to StrategyFactor entities by IDs.
func (su *StrategyUpdate) RemoveFactorIDs(ids ...xid.ID) *StrategyUpdate {
	su.mutation.RemoveFactorIDs(ids...)
	return su
}

// RemoveFactors removes "Factors" edges to StrategyFactor entities.
func (su *StrategyUpdate) RemoveFactors(s ...*StrategyFactor) *StrategyUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveFactorIDs(ids...)
}

// ClearFilters clears all "Filters" edges to the StrategyFilter entity.
func (su *StrategyUpdate) ClearFilters() *StrategyUpdate {
	su.mutation.ClearFilters()
	return su
}

// RemoveFilterIDs removes the "Filters" edge to StrategyFilter entities by IDs.
func (su *StrategyUpdate) RemoveFilterIDs(ids ...xid.ID) *StrategyUpdate {
	su.mutation.RemoveFilterIDs(ids...)
	return su
}

// RemoveFilters removes "Filters" edges to StrategyFilter entities.
func (su *StrategyUpdate) RemoveFilters(s ...*StrategyFilter) *StrategyUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveFilterIDs(ids...)
}

// ClearFixedTickers clears all "FixedTickers" edges to the StrategyFixedTicker entity.
func (su *StrategyUpdate) ClearFixedTickers() *StrategyUpdate {
	su.mutation.ClearFixedTickers()
	return su
}

// RemoveFixedTickerIDs removes the "FixedTickers" edge to StrategyFixedTicker entities by IDs.
func (su *StrategyUpdate) RemoveFixedTickerIDs(ids ...xid.ID) *StrategyUpdate {
	su.mutation.RemoveFixedTickerIDs(ids...)
	return su
}

// RemoveFixedTickers removes "FixedTickers" edges to StrategyFixedTicker entities.
func (su *StrategyUpdate) RemoveFixedTickers(s ...*StrategyFixedTicker) *StrategyUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveFixedTickerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StrategyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StrategyUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StrategyUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StrategyUpdate) check() error {
	if v, ok := su.mutation.Descr(); ok {
		if err := strategy.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "Strategy.Descr": %w`, err)}
		}
	}
	if v, ok := su.mutation.BaseIndex(); ok {
		if err := strategy.BaseIndexValidator(v); err != nil {
			return &ValidationError{Name: "BaseIndex", err: fmt.Errorf(`ent: validator failed for field "Strategy.BaseIndex": %w`, err)}
		}
	}
	if v, ok := su.mutation.WeekRefillAmount(); ok {
		if err := strategy.WeekRefillAmountValidator(v); err != nil {
			return &ValidationError{Name: "WeekRefillAmount", err: fmt.Errorf(`ent: validator failed for field "Strategy.WeekRefillAmount": %w`, err)}
		}
	}
	if v, ok := su.mutation.StartAmount(); ok {
		if err := strategy.StartAmountValidator(v); err != nil {
			return &ValidationError{Name: "StartAmount", err: fmt.Errorf(`ent: validator failed for field "Strategy.StartAmount": %w`, err)}
		}
	}
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Strategy.User"`)
	}
	return nil
}

func (su *StrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   strategy.Table,
			Columns: strategy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategy.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Descr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategy.FieldDescr,
		})
	}
	if value, ok := su.mutation.MaxTickers(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickers,
		})
	}
	if value, ok := su.mutation.AddedMaxTickers(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickers,
		})
	}
	if value, ok := su.mutation.MaxTickersPerIndustry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickersPerIndustry,
		})
	}
	if value, ok := su.mutation.AddedMaxTickersPerIndustry(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickersPerIndustry,
		})
	}
	if value, ok := su.mutation.BaseIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategy.FieldBaseIndex,
		})
	}
	if su.mutation.BaseIndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: strategy.FieldBaseIndex,
		})
	}
	if value, ok := su.mutation.LastYearInventResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearInventResult,
		})
	}
	if value, ok := su.mutation.AddedLastYearInventResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearInventResult,
		})
	}
	if value, ok := su.mutation.LastYearYield(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearYield,
		})
	}
	if value, ok := su.mutation.AddedLastYearYield(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearYield,
		})
	}
	if value, ok := su.mutation.Last3YearsInvertResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsInvertResult,
		})
	}
	if value, ok := su.mutation.AddedLast3YearsInvertResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsInvertResult,
		})
	}
	if value, ok := su.mutation.Last3YearsYield(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsYield,
		})
	}
	if value, ok := su.mutation.AddedLast3YearsYield(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsYield,
		})
	}
	if value, ok := su.mutation.WeekRefillAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldWeekRefillAmount,
		})
	}
	if value, ok := su.mutation.AddedWeekRefillAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldWeekRefillAmount,
		})
	}
	if value, ok := su.mutation.StartAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldStartAmount,
		})
	}
	if value, ok := su.mutation.AddedStartAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldStartAmount,
		})
	}
	if value, ok := su.mutation.StartSimulation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: strategy.FieldStartSimulation,
		})
	}
	if value, ok := su.mutation.BuyOnlyLowPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldBuyOnlyLowPrice,
		})
	}
	if value, ok := su.mutation.AllowLossWhenSell(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldAllowLossWhenSell,
		})
	}
	if value, ok := su.mutation.AllowSellToFit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldAllowSellToFit,
		})
	}
	if value, ok := su.mutation.SameEmitent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldSameEmitent,
		})
	}
	if value, ok := su.mutation.AddedSameEmitent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldSameEmitent,
		})
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedFactorsIDs(); len(nodes) > 0 && !su.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedFiltersIDs(); len(nodes) > 0 && !su.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FixedTickersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedFixedTickersIDs(); len(nodes) > 0 && !su.mutation.FixedTickersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FixedTickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StrategyUpdateOne is the builder for updating a single Strategy entity.
type StrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyMutation
}

// SetDescr sets the "Descr" field.
func (suo *StrategyUpdateOne) SetDescr(s string) *StrategyUpdateOne {
	suo.mutation.SetDescr(s)
	return suo
}

// SetMaxTickers sets the "MaxTickers" field.
func (suo *StrategyUpdateOne) SetMaxTickers(i int) *StrategyUpdateOne {
	suo.mutation.ResetMaxTickers()
	suo.mutation.SetMaxTickers(i)
	return suo
}

// SetNillableMaxTickers sets the "MaxTickers" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableMaxTickers(i *int) *StrategyUpdateOne {
	if i != nil {
		suo.SetMaxTickers(*i)
	}
	return suo
}

// AddMaxTickers adds i to the "MaxTickers" field.
func (suo *StrategyUpdateOne) AddMaxTickers(i int) *StrategyUpdateOne {
	suo.mutation.AddMaxTickers(i)
	return suo
}

// SetMaxTickersPerIndustry sets the "MaxTickersPerIndustry" field.
func (suo *StrategyUpdateOne) SetMaxTickersPerIndustry(i int) *StrategyUpdateOne {
	suo.mutation.ResetMaxTickersPerIndustry()
	suo.mutation.SetMaxTickersPerIndustry(i)
	return suo
}

// SetNillableMaxTickersPerIndustry sets the "MaxTickersPerIndustry" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableMaxTickersPerIndustry(i *int) *StrategyUpdateOne {
	if i != nil {
		suo.SetMaxTickersPerIndustry(*i)
	}
	return suo
}

// AddMaxTickersPerIndustry adds i to the "MaxTickersPerIndustry" field.
func (suo *StrategyUpdateOne) AddMaxTickersPerIndustry(i int) *StrategyUpdateOne {
	suo.mutation.AddMaxTickersPerIndustry(i)
	return suo
}

// SetBaseIndex sets the "BaseIndex" field.
func (suo *StrategyUpdateOne) SetBaseIndex(s string) *StrategyUpdateOne {
	suo.mutation.SetBaseIndex(s)
	return suo
}

// SetNillableBaseIndex sets the "BaseIndex" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableBaseIndex(s *string) *StrategyUpdateOne {
	if s != nil {
		suo.SetBaseIndex(*s)
	}
	return suo
}

// ClearBaseIndex clears the value of the "BaseIndex" field.
func (suo *StrategyUpdateOne) ClearBaseIndex() *StrategyUpdateOne {
	suo.mutation.ClearBaseIndex()
	return suo
}

// SetLastYearInventResult sets the "LastYearInventResult" field.
func (suo *StrategyUpdateOne) SetLastYearInventResult(f float64) *StrategyUpdateOne {
	suo.mutation.ResetLastYearInventResult()
	suo.mutation.SetLastYearInventResult(f)
	return suo
}

// SetNillableLastYearInventResult sets the "LastYearInventResult" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableLastYearInventResult(f *float64) *StrategyUpdateOne {
	if f != nil {
		suo.SetLastYearInventResult(*f)
	}
	return suo
}

// AddLastYearInventResult adds f to the "LastYearInventResult" field.
func (suo *StrategyUpdateOne) AddLastYearInventResult(f float64) *StrategyUpdateOne {
	suo.mutation.AddLastYearInventResult(f)
	return suo
}

// SetLastYearYield sets the "LastYearYield" field.
func (suo *StrategyUpdateOne) SetLastYearYield(f float64) *StrategyUpdateOne {
	suo.mutation.ResetLastYearYield()
	suo.mutation.SetLastYearYield(f)
	return suo
}

// SetNillableLastYearYield sets the "LastYearYield" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableLastYearYield(f *float64) *StrategyUpdateOne {
	if f != nil {
		suo.SetLastYearYield(*f)
	}
	return suo
}

// AddLastYearYield adds f to the "LastYearYield" field.
func (suo *StrategyUpdateOne) AddLastYearYield(f float64) *StrategyUpdateOne {
	suo.mutation.AddLastYearYield(f)
	return suo
}

// SetLast3YearsInvertResult sets the "Last3YearsInvertResult" field.
func (suo *StrategyUpdateOne) SetLast3YearsInvertResult(f float64) *StrategyUpdateOne {
	suo.mutation.ResetLast3YearsInvertResult()
	suo.mutation.SetLast3YearsInvertResult(f)
	return suo
}

// SetNillableLast3YearsInvertResult sets the "Last3YearsInvertResult" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableLast3YearsInvertResult(f *float64) *StrategyUpdateOne {
	if f != nil {
		suo.SetLast3YearsInvertResult(*f)
	}
	return suo
}

// AddLast3YearsInvertResult adds f to the "Last3YearsInvertResult" field.
func (suo *StrategyUpdateOne) AddLast3YearsInvertResult(f float64) *StrategyUpdateOne {
	suo.mutation.AddLast3YearsInvertResult(f)
	return suo
}

// SetLast3YearsYield sets the "Last3YearsYield" field.
func (suo *StrategyUpdateOne) SetLast3YearsYield(f float64) *StrategyUpdateOne {
	suo.mutation.ResetLast3YearsYield()
	suo.mutation.SetLast3YearsYield(f)
	return suo
}

// SetNillableLast3YearsYield sets the "Last3YearsYield" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableLast3YearsYield(f *float64) *StrategyUpdateOne {
	if f != nil {
		suo.SetLast3YearsYield(*f)
	}
	return suo
}

// AddLast3YearsYield adds f to the "Last3YearsYield" field.
func (suo *StrategyUpdateOne) AddLast3YearsYield(f float64) *StrategyUpdateOne {
	suo.mutation.AddLast3YearsYield(f)
	return suo
}

// SetWeekRefillAmount sets the "WeekRefillAmount" field.
func (suo *StrategyUpdateOne) SetWeekRefillAmount(f float64) *StrategyUpdateOne {
	suo.mutation.ResetWeekRefillAmount()
	suo.mutation.SetWeekRefillAmount(f)
	return suo
}

// AddWeekRefillAmount adds f to the "WeekRefillAmount" field.
func (suo *StrategyUpdateOne) AddWeekRefillAmount(f float64) *StrategyUpdateOne {
	suo.mutation.AddWeekRefillAmount(f)
	return suo
}

// SetStartAmount sets the "StartAmount" field.
func (suo *StrategyUpdateOne) SetStartAmount(f float64) *StrategyUpdateOne {
	suo.mutation.ResetStartAmount()
	suo.mutation.SetStartAmount(f)
	return suo
}

// AddStartAmount adds f to the "StartAmount" field.
func (suo *StrategyUpdateOne) AddStartAmount(f float64) *StrategyUpdateOne {
	suo.mutation.AddStartAmount(f)
	return suo
}

// SetStartSimulation sets the "StartSimulation" field.
func (suo *StrategyUpdateOne) SetStartSimulation(ddo *domains.JSDateOnly) *StrategyUpdateOne {
	suo.mutation.SetStartSimulation(ddo)
	return suo
}

// SetBuyOnlyLowPrice sets the "BuyOnlyLowPrice" field.
func (suo *StrategyUpdateOne) SetBuyOnlyLowPrice(b bool) *StrategyUpdateOne {
	suo.mutation.SetBuyOnlyLowPrice(b)
	return suo
}

// SetNillableBuyOnlyLowPrice sets the "BuyOnlyLowPrice" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableBuyOnlyLowPrice(b *bool) *StrategyUpdateOne {
	if b != nil {
		suo.SetBuyOnlyLowPrice(*b)
	}
	return suo
}

// SetAllowLossWhenSell sets the "AllowLossWhenSell" field.
func (suo *StrategyUpdateOne) SetAllowLossWhenSell(b bool) *StrategyUpdateOne {
	suo.mutation.SetAllowLossWhenSell(b)
	return suo
}

// SetNillableAllowLossWhenSell sets the "AllowLossWhenSell" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableAllowLossWhenSell(b *bool) *StrategyUpdateOne {
	if b != nil {
		suo.SetAllowLossWhenSell(*b)
	}
	return suo
}

// SetAllowSellToFit sets the "AllowSellToFit" field.
func (suo *StrategyUpdateOne) SetAllowSellToFit(b bool) *StrategyUpdateOne {
	suo.mutation.SetAllowSellToFit(b)
	return suo
}

// SetNillableAllowSellToFit sets the "AllowSellToFit" field if the given value is not nil.
func (suo *StrategyUpdateOne) SetNillableAllowSellToFit(b *bool) *StrategyUpdateOne {
	if b != nil {
		suo.SetAllowSellToFit(*b)
	}
	return suo
}

// SetSameEmitent sets the "SameEmitent" field.
func (suo *StrategyUpdateOne) SetSameEmitent(i int) *StrategyUpdateOne {
	suo.mutation.ResetSameEmitent()
	suo.mutation.SetSameEmitent(i)
	return suo
}

// AddSameEmitent adds i to the "SameEmitent" field.
func (suo *StrategyUpdateOne) AddSameEmitent(i int) *StrategyUpdateOne {
	suo.mutation.AddSameEmitent(i)
	return suo
}

// SetUserID sets the "User" edge to the User entity by ID.
func (suo *StrategyUpdateOne) SetUserID(id xid.ID) *StrategyUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetUser sets the "User" edge to the User entity.
func (suo *StrategyUpdateOne) SetUser(u *User) *StrategyUpdateOne {
	return suo.SetUserID(u.ID)
}

// AddFactorIDs adds the "Factors" edge to the StrategyFactor entity by IDs.
func (suo *StrategyUpdateOne) AddFactorIDs(ids ...xid.ID) *StrategyUpdateOne {
	suo.mutation.AddFactorIDs(ids...)
	return suo
}

// AddFactors adds the "Factors" edges to the StrategyFactor entity.
func (suo *StrategyUpdateOne) AddFactors(s ...*StrategyFactor) *StrategyUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddFactorIDs(ids...)
}

// AddFilterIDs adds the "Filters" edge to the StrategyFilter entity by IDs.
func (suo *StrategyUpdateOne) AddFilterIDs(ids ...xid.ID) *StrategyUpdateOne {
	suo.mutation.AddFilterIDs(ids...)
	return suo
}

// AddFilters adds the "Filters" edges to the StrategyFilter entity.
func (suo *StrategyUpdateOne) AddFilters(s ...*StrategyFilter) *StrategyUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddFilterIDs(ids...)
}

// AddFixedTickerIDs adds the "FixedTickers" edge to the StrategyFixedTicker entity by IDs.
func (suo *StrategyUpdateOne) AddFixedTickerIDs(ids ...xid.ID) *StrategyUpdateOne {
	suo.mutation.AddFixedTickerIDs(ids...)
	return suo
}

// AddFixedTickers adds the "FixedTickers" edges to the StrategyFixedTicker entity.
func (suo *StrategyUpdateOne) AddFixedTickers(s ...*StrategyFixedTicker) *StrategyUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddFixedTickerIDs(ids...)
}

// Mutation returns the StrategyMutation object of the builder.
func (suo *StrategyUpdateOne) Mutation() *StrategyMutation {
	return suo.mutation
}

// ClearUser clears the "User" edge to the User entity.
func (suo *StrategyUpdateOne) ClearUser() *StrategyUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearFactors clears all "Factors" edges to the StrategyFactor entity.
func (suo *StrategyUpdateOne) ClearFactors() *StrategyUpdateOne {
	suo.mutation.ClearFactors()
	return suo
}

// RemoveFactorIDs removes the "Factors" edge to StrategyFactor entities by IDs.
func (suo *StrategyUpdateOne) RemoveFactorIDs(ids ...xid.ID) *StrategyUpdateOne {
	suo.mutation.RemoveFactorIDs(ids...)
	return suo
}

// RemoveFactors removes "Factors" edges to StrategyFactor entities.
func (suo *StrategyUpdateOne) RemoveFactors(s ...*StrategyFactor) *StrategyUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveFactorIDs(ids...)
}

// ClearFilters clears all "Filters" edges to the StrategyFilter entity.
func (suo *StrategyUpdateOne) ClearFilters() *StrategyUpdateOne {
	suo.mutation.ClearFilters()
	return suo
}

// RemoveFilterIDs removes the "Filters" edge to StrategyFilter entities by IDs.
func (suo *StrategyUpdateOne) RemoveFilterIDs(ids ...xid.ID) *StrategyUpdateOne {
	suo.mutation.RemoveFilterIDs(ids...)
	return suo
}

// RemoveFilters removes "Filters" edges to StrategyFilter entities.
func (suo *StrategyUpdateOne) RemoveFilters(s ...*StrategyFilter) *StrategyUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveFilterIDs(ids...)
}

// ClearFixedTickers clears all "FixedTickers" edges to the StrategyFixedTicker entity.
func (suo *StrategyUpdateOne) ClearFixedTickers() *StrategyUpdateOne {
	suo.mutation.ClearFixedTickers()
	return suo
}

// RemoveFixedTickerIDs removes the "FixedTickers" edge to StrategyFixedTicker entities by IDs.
func (suo *StrategyUpdateOne) RemoveFixedTickerIDs(ids ...xid.ID) *StrategyUpdateOne {
	suo.mutation.RemoveFixedTickerIDs(ids...)
	return suo
}

// RemoveFixedTickers removes "FixedTickers" edges to StrategyFixedTicker entities.
func (suo *StrategyUpdateOne) RemoveFixedTickers(s ...*StrategyFixedTicker) *StrategyUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveFixedTickerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StrategyUpdateOne) Select(field string, fields ...string) *StrategyUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Strategy entity.
func (suo *StrategyUpdateOne) Save(ctx context.Context) (*Strategy, error) {
	var (
		err  error
		node *Strategy
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StrategyUpdateOne) SaveX(ctx context.Context) *Strategy {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StrategyUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StrategyUpdateOne) check() error {
	if v, ok := suo.mutation.Descr(); ok {
		if err := strategy.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "Strategy.Descr": %w`, err)}
		}
	}
	if v, ok := suo.mutation.BaseIndex(); ok {
		if err := strategy.BaseIndexValidator(v); err != nil {
			return &ValidationError{Name: "BaseIndex", err: fmt.Errorf(`ent: validator failed for field "Strategy.BaseIndex": %w`, err)}
		}
	}
	if v, ok := suo.mutation.WeekRefillAmount(); ok {
		if err := strategy.WeekRefillAmountValidator(v); err != nil {
			return &ValidationError{Name: "WeekRefillAmount", err: fmt.Errorf(`ent: validator failed for field "Strategy.WeekRefillAmount": %w`, err)}
		}
	}
	if v, ok := suo.mutation.StartAmount(); ok {
		if err := strategy.StartAmountValidator(v); err != nil {
			return &ValidationError{Name: "StartAmount", err: fmt.Errorf(`ent: validator failed for field "Strategy.StartAmount": %w`, err)}
		}
	}
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Strategy.User"`)
	}
	return nil
}

func (suo *StrategyUpdateOne) sqlSave(ctx context.Context) (_node *Strategy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   strategy.Table,
			Columns: strategy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategy.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Strategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategy.FieldID)
		for _, f := range fields {
			if !strategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Descr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategy.FieldDescr,
		})
	}
	if value, ok := suo.mutation.MaxTickers(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickers,
		})
	}
	if value, ok := suo.mutation.AddedMaxTickers(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickers,
		})
	}
	if value, ok := suo.mutation.MaxTickersPerIndustry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickersPerIndustry,
		})
	}
	if value, ok := suo.mutation.AddedMaxTickersPerIndustry(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickersPerIndustry,
		})
	}
	if value, ok := suo.mutation.BaseIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategy.FieldBaseIndex,
		})
	}
	if suo.mutation.BaseIndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: strategy.FieldBaseIndex,
		})
	}
	if value, ok := suo.mutation.LastYearInventResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearInventResult,
		})
	}
	if value, ok := suo.mutation.AddedLastYearInventResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearInventResult,
		})
	}
	if value, ok := suo.mutation.LastYearYield(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearYield,
		})
	}
	if value, ok := suo.mutation.AddedLastYearYield(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearYield,
		})
	}
	if value, ok := suo.mutation.Last3YearsInvertResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsInvertResult,
		})
	}
	if value, ok := suo.mutation.AddedLast3YearsInvertResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsInvertResult,
		})
	}
	if value, ok := suo.mutation.Last3YearsYield(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsYield,
		})
	}
	if value, ok := suo.mutation.AddedLast3YearsYield(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsYield,
		})
	}
	if value, ok := suo.mutation.WeekRefillAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldWeekRefillAmount,
		})
	}
	if value, ok := suo.mutation.AddedWeekRefillAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldWeekRefillAmount,
		})
	}
	if value, ok := suo.mutation.StartAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldStartAmount,
		})
	}
	if value, ok := suo.mutation.AddedStartAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldStartAmount,
		})
	}
	if value, ok := suo.mutation.StartSimulation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: strategy.FieldStartSimulation,
		})
	}
	if value, ok := suo.mutation.BuyOnlyLowPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldBuyOnlyLowPrice,
		})
	}
	if value, ok := suo.mutation.AllowLossWhenSell(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldAllowLossWhenSell,
		})
	}
	if value, ok := suo.mutation.AllowSellToFit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldAllowSellToFit,
		})
	}
	if value, ok := suo.mutation.SameEmitent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldSameEmitent,
		})
	}
	if value, ok := suo.mutation.AddedSameEmitent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldSameEmitent,
		})
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedFactorsIDs(); len(nodes) > 0 && !suo.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedFiltersIDs(); len(nodes) > 0 && !suo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FixedTickersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedFixedTickersIDs(); len(nodes) > 0 && !suo.mutation.FixedTickersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FixedTickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Strategy{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
