// Code generated by entc, DO NOT EDIT.

package divpayout

const (
	// Label holds the string label denoting the divpayout type in the database.
	Label = "div_payout"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldForYear holds the string denoting the foryear field in the database.
	FieldForYear = "for_year"
	// FieldForQuarter holds the string denoting the forquarter field in the database.
	FieldForQuarter = "for_quarter"
	// FieldCloseDate holds the string denoting the closedate field in the database.
	FieldCloseDate = "close_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDPS holds the string denoting the dps field in the database.
	FieldDPS = "dps"
	// EdgeTickers holds the string denoting the tickers edge name in mutations.
	EdgeTickers = "Tickers"
	// Table holds the table name of the divpayout in the database.
	Table = "div_payouts"
	// TickersTable is the table that holds the Tickers relation/edge.
	TickersTable = "div_payouts"
	// TickersInverseTable is the table name for the Ticker entity.
	// It exists in this package in order to avoid circular dependency with the "ticker" package.
	TickersInverseTable = "tickers"
	// TickersColumn is the table column denoting the Tickers relation/edge.
	TickersColumn = "ticker_div_payouts"
)

// Columns holds all SQL columns for divpayout fields.
var Columns = []string{
	FieldID,
	FieldForYear,
	FieldForQuarter,
	FieldCloseDate,
	FieldStatus,
	FieldDPS,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "div_payouts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ticker_div_payouts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ForYearValidator is a validator for the "ForYear" field. It is called by the builders before save.
	ForYearValidator func(int) error
	// ForQuarterValidator is a validator for the "ForQuarter" field. It is called by the builders before save.
	ForQuarterValidator func(int) error
	// StatusValidator is a validator for the "Status" field. It is called by the builders before save.
	StatusValidator func(int) error
)
