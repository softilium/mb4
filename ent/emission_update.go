// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/softilium/mb4/ent/emission"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/ticker"
)

// EmissionUpdate is the builder for updating Emission entities.
type EmissionUpdate struct {
	config
	hooks    []Hook
	mutation *EmissionMutation
}

// Where appends a list predicates to the EmissionUpdate builder.
func (eu *EmissionUpdate) Where(ps ...predicate.Emission) *EmissionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetRecDate sets the "RecDate" field.
func (eu *EmissionUpdate) SetRecDate(t time.Time) *EmissionUpdate {
	eu.mutation.SetRecDate(t)
	return eu
}

// SetSize sets the "Size" field.
func (eu *EmissionUpdate) SetSize(i int64) *EmissionUpdate {
	eu.mutation.ResetSize()
	eu.mutation.SetSize(i)
	return eu
}

// AddSize adds i to the "Size" field.
func (eu *EmissionUpdate) AddSize(i int64) *EmissionUpdate {
	eu.mutation.AddSize(i)
	return eu
}

// SetFreeFloat sets the "FreeFloat" field.
func (eu *EmissionUpdate) SetFreeFloat(i int) *EmissionUpdate {
	eu.mutation.ResetFreeFloat()
	eu.mutation.SetFreeFloat(i)
	return eu
}

// SetNillableFreeFloat sets the "FreeFloat" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableFreeFloat(i *int) *EmissionUpdate {
	if i != nil {
		eu.SetFreeFloat(*i)
	}
	return eu
}

// AddFreeFloat adds i to the "FreeFloat" field.
func (eu *EmissionUpdate) AddFreeFloat(i int) *EmissionUpdate {
	eu.mutation.AddFreeFloat(i)
	return eu
}

// ClearFreeFloat clears the value of the "FreeFloat" field.
func (eu *EmissionUpdate) ClearFreeFloat() *EmissionUpdate {
	eu.mutation.ClearFreeFloat()
	return eu
}

// SetLotSize sets the "LotSize" field.
func (eu *EmissionUpdate) SetLotSize(i int) *EmissionUpdate {
	eu.mutation.ResetLotSize()
	eu.mutation.SetLotSize(i)
	return eu
}

// SetNillableLotSize sets the "LotSize" field if the given value is not nil.
func (eu *EmissionUpdate) SetNillableLotSize(i *int) *EmissionUpdate {
	if i != nil {
		eu.SetLotSize(*i)
	}
	return eu
}

// AddLotSize adds i to the "LotSize" field.
func (eu *EmissionUpdate) AddLotSize(i int) *EmissionUpdate {
	eu.mutation.AddLotSize(i)
	return eu
}

// ClearLotSize clears the value of the "LotSize" field.
func (eu *EmissionUpdate) ClearLotSize() *EmissionUpdate {
	eu.mutation.ClearLotSize()
	return eu
}

// SetListingLevel sets the "ListingLevel" field.
func (eu *EmissionUpdate) SetListingLevel(i int) *EmissionUpdate {
	eu.mutation.ResetListingLevel()
	eu.mutation.SetListingLevel(i)
	return eu
}

// AddListingLevel adds i to the "ListingLevel" field.
func (eu *EmissionUpdate) AddListingLevel(i int) *EmissionUpdate {
	eu.mutation.AddListingLevel(i)
	return eu
}

// SetTickerID sets the "Ticker" edge to the Ticker entity by ID.
func (eu *EmissionUpdate) SetTickerID(id string) *EmissionUpdate {
	eu.mutation.SetTickerID(id)
	return eu
}

// SetTicker sets the "Ticker" edge to the Ticker entity.
func (eu *EmissionUpdate) SetTicker(t *Ticker) *EmissionUpdate {
	return eu.SetTickerID(t.ID)
}

// Mutation returns the EmissionMutation object of the builder.
func (eu *EmissionUpdate) Mutation() *EmissionMutation {
	return eu.mutation
}

// ClearTicker clears the "Ticker" edge to the Ticker entity.
func (eu *EmissionUpdate) ClearTicker() *EmissionUpdate {
	eu.mutation.ClearTicker()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmissionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmissionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmissionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmissionUpdate) check() error {
	if _, ok := eu.mutation.TickerID(); eu.mutation.TickerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Emission.Ticker"`)
	}
	return nil
}

func (eu *EmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emission.Table,
			Columns: emission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emission.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.RecDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: emission.FieldRecDate,
		})
	}
	if value, ok := eu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emission.FieldSize,
		})
	}
	if value, ok := eu.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emission.FieldSize,
		})
	}
	if value, ok := eu.mutation.FreeFloat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldFreeFloat,
		})
	}
	if value, ok := eu.mutation.AddedFreeFloat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldFreeFloat,
		})
	}
	if eu.mutation.FreeFloatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: emission.FieldFreeFloat,
		})
	}
	if value, ok := eu.mutation.LotSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldLotSize,
		})
	}
	if value, ok := eu.mutation.AddedLotSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldLotSize,
		})
	}
	if eu.mutation.LotSizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: emission.FieldLotSize,
		})
	}
	if value, ok := eu.mutation.ListingLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldListingLevel,
		})
	}
	if value, ok := eu.mutation.AddedListingLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldListingLevel,
		})
	}
	if eu.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emission.TickerTable,
			Columns: []string{emission.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emission.TickerTable,
			Columns: []string{emission.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EmissionUpdateOne is the builder for updating a single Emission entity.
type EmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmissionMutation
}

// SetRecDate sets the "RecDate" field.
func (euo *EmissionUpdateOne) SetRecDate(t time.Time) *EmissionUpdateOne {
	euo.mutation.SetRecDate(t)
	return euo
}

// SetSize sets the "Size" field.
func (euo *EmissionUpdateOne) SetSize(i int64) *EmissionUpdateOne {
	euo.mutation.ResetSize()
	euo.mutation.SetSize(i)
	return euo
}

// AddSize adds i to the "Size" field.
func (euo *EmissionUpdateOne) AddSize(i int64) *EmissionUpdateOne {
	euo.mutation.AddSize(i)
	return euo
}

// SetFreeFloat sets the "FreeFloat" field.
func (euo *EmissionUpdateOne) SetFreeFloat(i int) *EmissionUpdateOne {
	euo.mutation.ResetFreeFloat()
	euo.mutation.SetFreeFloat(i)
	return euo
}

// SetNillableFreeFloat sets the "FreeFloat" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableFreeFloat(i *int) *EmissionUpdateOne {
	if i != nil {
		euo.SetFreeFloat(*i)
	}
	return euo
}

// AddFreeFloat adds i to the "FreeFloat" field.
func (euo *EmissionUpdateOne) AddFreeFloat(i int) *EmissionUpdateOne {
	euo.mutation.AddFreeFloat(i)
	return euo
}

// ClearFreeFloat clears the value of the "FreeFloat" field.
func (euo *EmissionUpdateOne) ClearFreeFloat() *EmissionUpdateOne {
	euo.mutation.ClearFreeFloat()
	return euo
}

// SetLotSize sets the "LotSize" field.
func (euo *EmissionUpdateOne) SetLotSize(i int) *EmissionUpdateOne {
	euo.mutation.ResetLotSize()
	euo.mutation.SetLotSize(i)
	return euo
}

// SetNillableLotSize sets the "LotSize" field if the given value is not nil.
func (euo *EmissionUpdateOne) SetNillableLotSize(i *int) *EmissionUpdateOne {
	if i != nil {
		euo.SetLotSize(*i)
	}
	return euo
}

// AddLotSize adds i to the "LotSize" field.
func (euo *EmissionUpdateOne) AddLotSize(i int) *EmissionUpdateOne {
	euo.mutation.AddLotSize(i)
	return euo
}

// ClearLotSize clears the value of the "LotSize" field.
func (euo *EmissionUpdateOne) ClearLotSize() *EmissionUpdateOne {
	euo.mutation.ClearLotSize()
	return euo
}

// SetListingLevel sets the "ListingLevel" field.
func (euo *EmissionUpdateOne) SetListingLevel(i int) *EmissionUpdateOne {
	euo.mutation.ResetListingLevel()
	euo.mutation.SetListingLevel(i)
	return euo
}

// AddListingLevel adds i to the "ListingLevel" field.
func (euo *EmissionUpdateOne) AddListingLevel(i int) *EmissionUpdateOne {
	euo.mutation.AddListingLevel(i)
	return euo
}

// SetTickerID sets the "Ticker" edge to the Ticker entity by ID.
func (euo *EmissionUpdateOne) SetTickerID(id string) *EmissionUpdateOne {
	euo.mutation.SetTickerID(id)
	return euo
}

// SetTicker sets the "Ticker" edge to the Ticker entity.
func (euo *EmissionUpdateOne) SetTicker(t *Ticker) *EmissionUpdateOne {
	return euo.SetTickerID(t.ID)
}

// Mutation returns the EmissionMutation object of the builder.
func (euo *EmissionUpdateOne) Mutation() *EmissionMutation {
	return euo.mutation
}

// ClearTicker clears the "Ticker" edge to the Ticker entity.
func (euo *EmissionUpdateOne) ClearTicker() *EmissionUpdateOne {
	euo.mutation.ClearTicker()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmissionUpdateOne) Select(field string, fields ...string) *EmissionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Emission entity.
func (euo *EmissionUpdateOne) Save(ctx context.Context) (*Emission, error) {
	var (
		err  error
		node *Emission
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmissionUpdateOne) SaveX(ctx context.Context) *Emission {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmissionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmissionUpdateOne) check() error {
	if _, ok := euo.mutation.TickerID(); euo.mutation.TickerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Emission.Ticker"`)
	}
	return nil
}

func (euo *EmissionUpdateOne) sqlSave(ctx context.Context) (_node *Emission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emission.Table,
			Columns: emission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emission.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Emission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emission.FieldID)
		for _, f := range fields {
			if !emission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.RecDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: emission.FieldRecDate,
		})
	}
	if value, ok := euo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emission.FieldSize,
		})
	}
	if value, ok := euo.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emission.FieldSize,
		})
	}
	if value, ok := euo.mutation.FreeFloat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldFreeFloat,
		})
	}
	if value, ok := euo.mutation.AddedFreeFloat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldFreeFloat,
		})
	}
	if euo.mutation.FreeFloatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: emission.FieldFreeFloat,
		})
	}
	if value, ok := euo.mutation.LotSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldLotSize,
		})
	}
	if value, ok := euo.mutation.AddedLotSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldLotSize,
		})
	}
	if euo.mutation.LotSizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: emission.FieldLotSize,
		})
	}
	if value, ok := euo.mutation.ListingLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldListingLevel,
		})
	}
	if value, ok := euo.mutation.AddedListingLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: emission.FieldListingLevel,
		})
	}
	if euo.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emission.TickerTable,
			Columns: []string{emission.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emission.TickerTable,
			Columns: []string{emission.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Emission{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
