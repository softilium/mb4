// Code generated by entc, DO NOT EDIT.

package report

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ReportYear applies equality check predicate on the "ReportYear" field. It's identical to ReportYearEQ.
func ReportYear(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportYear), v))
	})
}

// ReportQuarter applies equality check predicate on the "ReportQuarter" field. It's identical to ReportQuarterEQ.
func ReportQuarter(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportQuarter), v))
	})
}

// ReportDate applies equality check predicate on the "ReportDate" field. It's identical to ReportDateEQ.
func ReportDate(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportDate), v))
	})
}

// PnlRevenueYtd applies equality check predicate on the "PnlRevenueYtd" field. It's identical to PnlRevenueYtdEQ.
func PnlRevenueYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlAmortizationYtd applies equality check predicate on the "PnlAmortizationYtd" field. It's identical to PnlAmortizationYtdEQ.
func PnlAmortizationYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlOperatingIncomeYtd applies equality check predicate on the "PnlOperatingIncomeYtd" field. It's identical to PnlOperatingIncomeYtdEQ.
func PnlOperatingIncomeYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlInterestIncomeYtd applies equality check predicate on the "PnlInterestIncomeYtd" field. It's identical to PnlInterestIncomeYtdEQ.
func PnlInterestIncomeYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestExpensesYtd applies equality check predicate on the "PnlInterestExpensesYtd" field. It's identical to PnlInterestExpensesYtdEQ.
func PnlInterestExpensesYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlIncomeTaxYtd applies equality check predicate on the "PnlIncomeTaxYtd" field. It's identical to PnlIncomeTaxYtdEQ.
func PnlIncomeTaxYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlNetIncomeYtd applies equality check predicate on the "PnlNetIncomeYtd" field. It's identical to PnlNetIncomeYtdEQ.
func PnlNetIncomeYtd(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// CfCashSld applies equality check predicate on the "CfCashSld" field. It's identical to CfCashSldEQ.
func CfCashSld(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfCashSld), v))
	})
}

// CfNonCurrentLiabilitiesSld applies equality check predicate on the "CfNonCurrentLiabilitiesSld" field. It's identical to CfNonCurrentLiabilitiesSldEQ.
func CfNonCurrentLiabilitiesSld(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfCurrentLiabilitesSld applies equality check predicate on the "CfCurrentLiabilitesSld" field. It's identical to CfCurrentLiabilitesSldEQ.
func CfCurrentLiabilitesSld(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfNonControllingSld applies equality check predicate on the "CfNonControllingSld" field. It's identical to CfNonControllingSldEQ.
func CfNonControllingSld(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfNonControllingSld), v))
	})
}

// CfEquitySld applies equality check predicate on the "CfEquitySld" field. It's identical to CfEquitySldEQ.
func CfEquitySld(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfEquitySld), v))
	})
}

// CfTotalSld applies equality check predicate on the "CfTotalSld" field. It's identical to CfTotalSldEQ.
func CfTotalSld(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfTotalSld), v))
	})
}

// URL applies equality check predicate on the "Url" field. It's identical to URLEQ.
func URL(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// ReportYearEQ applies the EQ predicate on the "ReportYear" field.
func ReportYearEQ(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportYear), v))
	})
}

// ReportYearNEQ applies the NEQ predicate on the "ReportYear" field.
func ReportYearNEQ(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportYear), v))
	})
}

// ReportYearIn applies the In predicate on the "ReportYear" field.
func ReportYearIn(vs ...int) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportYear), v...))
	})
}

// ReportYearNotIn applies the NotIn predicate on the "ReportYear" field.
func ReportYearNotIn(vs ...int) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportYear), v...))
	})
}

// ReportYearGT applies the GT predicate on the "ReportYear" field.
func ReportYearGT(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportYear), v))
	})
}

// ReportYearGTE applies the GTE predicate on the "ReportYear" field.
func ReportYearGTE(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportYear), v))
	})
}

// ReportYearLT applies the LT predicate on the "ReportYear" field.
func ReportYearLT(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportYear), v))
	})
}

// ReportYearLTE applies the LTE predicate on the "ReportYear" field.
func ReportYearLTE(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportYear), v))
	})
}

// ReportQuarterEQ applies the EQ predicate on the "ReportQuarter" field.
func ReportQuarterEQ(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportQuarter), v))
	})
}

// ReportQuarterNEQ applies the NEQ predicate on the "ReportQuarter" field.
func ReportQuarterNEQ(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportQuarter), v))
	})
}

// ReportQuarterIn applies the In predicate on the "ReportQuarter" field.
func ReportQuarterIn(vs ...int) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportQuarter), v...))
	})
}

// ReportQuarterNotIn applies the NotIn predicate on the "ReportQuarter" field.
func ReportQuarterNotIn(vs ...int) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportQuarter), v...))
	})
}

// ReportQuarterGT applies the GT predicate on the "ReportQuarter" field.
func ReportQuarterGT(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportQuarter), v))
	})
}

// ReportQuarterGTE applies the GTE predicate on the "ReportQuarter" field.
func ReportQuarterGTE(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportQuarter), v))
	})
}

// ReportQuarterLT applies the LT predicate on the "ReportQuarter" field.
func ReportQuarterLT(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportQuarter), v))
	})
}

// ReportQuarterLTE applies the LTE predicate on the "ReportQuarter" field.
func ReportQuarterLTE(v int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportQuarter), v))
	})
}

// ReportDateEQ applies the EQ predicate on the "ReportDate" field.
func ReportDateEQ(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportDate), v))
	})
}

// ReportDateNEQ applies the NEQ predicate on the "ReportDate" field.
func ReportDateNEQ(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportDate), v))
	})
}

// ReportDateIn applies the In predicate on the "ReportDate" field.
func ReportDateIn(vs ...time.Time) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportDate), v...))
	})
}

// ReportDateNotIn applies the NotIn predicate on the "ReportDate" field.
func ReportDateNotIn(vs ...time.Time) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportDate), v...))
	})
}

// ReportDateGT applies the GT predicate on the "ReportDate" field.
func ReportDateGT(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportDate), v))
	})
}

// ReportDateGTE applies the GTE predicate on the "ReportDate" field.
func ReportDateGTE(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportDate), v))
	})
}

// ReportDateLT applies the LT predicate on the "ReportDate" field.
func ReportDateLT(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportDate), v))
	})
}

// ReportDateLTE applies the LTE predicate on the "ReportDate" field.
func ReportDateLTE(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportDate), v))
	})
}

// PnlRevenueYtdEQ applies the EQ predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlRevenueYtdNEQ applies the NEQ predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlRevenueYtdIn applies the In predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlRevenueYtd), v...))
	})
}

// PnlRevenueYtdNotIn applies the NotIn predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlRevenueYtd), v...))
	})
}

// PnlRevenueYtdGT applies the GT predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlRevenueYtdGTE applies the GTE predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlRevenueYtdLT applies the LT predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlRevenueYtdLTE applies the LTE predicate on the "PnlRevenueYtd" field.
func PnlRevenueYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlRevenueYtd), v))
	})
}

// PnlAmortizationYtdEQ applies the EQ predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlAmortizationYtdNEQ applies the NEQ predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlAmortizationYtdIn applies the In predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlAmortizationYtd), v...))
	})
}

// PnlAmortizationYtdNotIn applies the NotIn predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlAmortizationYtd), v...))
	})
}

// PnlAmortizationYtdGT applies the GT predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlAmortizationYtdGTE applies the GTE predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlAmortizationYtdLT applies the LT predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlAmortizationYtdLTE applies the LTE predicate on the "PnlAmortizationYtd" field.
func PnlAmortizationYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlAmortizationYtd), v))
	})
}

// PnlOperatingIncomeYtdEQ applies the EQ predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlOperatingIncomeYtdNEQ applies the NEQ predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlOperatingIncomeYtdIn applies the In predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlOperatingIncomeYtd), v...))
	})
}

// PnlOperatingIncomeYtdNotIn applies the NotIn predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlOperatingIncomeYtd), v...))
	})
}

// PnlOperatingIncomeYtdGT applies the GT predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlOperatingIncomeYtdGTE applies the GTE predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlOperatingIncomeYtdLT applies the LT predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlOperatingIncomeYtdLTE applies the LTE predicate on the "PnlOperatingIncomeYtd" field.
func PnlOperatingIncomeYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlOperatingIncomeYtd), v))
	})
}

// PnlInterestIncomeYtdEQ applies the EQ predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestIncomeYtdNEQ applies the NEQ predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestIncomeYtdIn applies the In predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlInterestIncomeYtd), v...))
	})
}

// PnlInterestIncomeYtdNotIn applies the NotIn predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlInterestIncomeYtd), v...))
	})
}

// PnlInterestIncomeYtdGT applies the GT predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestIncomeYtdGTE applies the GTE predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestIncomeYtdLT applies the LT predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestIncomeYtdLTE applies the LTE predicate on the "PnlInterestIncomeYtd" field.
func PnlInterestIncomeYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlInterestIncomeYtd), v))
	})
}

// PnlInterestExpensesYtdEQ applies the EQ predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlInterestExpensesYtdNEQ applies the NEQ predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlInterestExpensesYtdIn applies the In predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlInterestExpensesYtd), v...))
	})
}

// PnlInterestExpensesYtdNotIn applies the NotIn predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlInterestExpensesYtd), v...))
	})
}

// PnlInterestExpensesYtdGT applies the GT predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlInterestExpensesYtdGTE applies the GTE predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlInterestExpensesYtdLT applies the LT predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlInterestExpensesYtdLTE applies the LTE predicate on the "PnlInterestExpensesYtd" field.
func PnlInterestExpensesYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlInterestExpensesYtd), v))
	})
}

// PnlIncomeTaxYtdEQ applies the EQ predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlIncomeTaxYtdNEQ applies the NEQ predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlIncomeTaxYtdIn applies the In predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlIncomeTaxYtd), v...))
	})
}

// PnlIncomeTaxYtdNotIn applies the NotIn predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlIncomeTaxYtd), v...))
	})
}

// PnlIncomeTaxYtdGT applies the GT predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlIncomeTaxYtdGTE applies the GTE predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlIncomeTaxYtdLT applies the LT predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlIncomeTaxYtdLTE applies the LTE predicate on the "PnlIncomeTaxYtd" field.
func PnlIncomeTaxYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlIncomeTaxYtd), v))
	})
}

// PnlNetIncomeYtdEQ applies the EQ predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// PnlNetIncomeYtdNEQ applies the NEQ predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// PnlNetIncomeYtdIn applies the In predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPnlNetIncomeYtd), v...))
	})
}

// PnlNetIncomeYtdNotIn applies the NotIn predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPnlNetIncomeYtd), v...))
	})
}

// PnlNetIncomeYtdGT applies the GT predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// PnlNetIncomeYtdGTE applies the GTE predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// PnlNetIncomeYtdLT applies the LT predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// PnlNetIncomeYtdLTE applies the LTE predicate on the "PnlNetIncomeYtd" field.
func PnlNetIncomeYtdLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPnlNetIncomeYtd), v))
	})
}

// CfCashSldEQ applies the EQ predicate on the "CfCashSld" field.
func CfCashSldEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfCashSld), v))
	})
}

// CfCashSldNEQ applies the NEQ predicate on the "CfCashSld" field.
func CfCashSldNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfCashSld), v))
	})
}

// CfCashSldIn applies the In predicate on the "CfCashSld" field.
func CfCashSldIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfCashSld), v...))
	})
}

// CfCashSldNotIn applies the NotIn predicate on the "CfCashSld" field.
func CfCashSldNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfCashSld), v...))
	})
}

// CfCashSldGT applies the GT predicate on the "CfCashSld" field.
func CfCashSldGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfCashSld), v))
	})
}

// CfCashSldGTE applies the GTE predicate on the "CfCashSld" field.
func CfCashSldGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfCashSld), v))
	})
}

// CfCashSldLT applies the LT predicate on the "CfCashSld" field.
func CfCashSldLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfCashSld), v))
	})
}

// CfCashSldLTE applies the LTE predicate on the "CfCashSld" field.
func CfCashSldLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfCashSld), v))
	})
}

// CfNonCurrentLiabilitiesSldEQ applies the EQ predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfNonCurrentLiabilitiesSldNEQ applies the NEQ predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfNonCurrentLiabilitiesSldIn applies the In predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfNonCurrentLiabilitiesSld), v...))
	})
}

// CfNonCurrentLiabilitiesSldNotIn applies the NotIn predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfNonCurrentLiabilitiesSld), v...))
	})
}

// CfNonCurrentLiabilitiesSldGT applies the GT predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfNonCurrentLiabilitiesSldGTE applies the GTE predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfNonCurrentLiabilitiesSldLT applies the LT predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfNonCurrentLiabilitiesSldLTE applies the LTE predicate on the "CfNonCurrentLiabilitiesSld" field.
func CfNonCurrentLiabilitiesSldLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfNonCurrentLiabilitiesSld), v))
	})
}

// CfCurrentLiabilitesSldEQ applies the EQ predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfCurrentLiabilitesSldNEQ applies the NEQ predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfCurrentLiabilitesSldIn applies the In predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfCurrentLiabilitesSld), v...))
	})
}

// CfCurrentLiabilitesSldNotIn applies the NotIn predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfCurrentLiabilitesSld), v...))
	})
}

// CfCurrentLiabilitesSldGT applies the GT predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfCurrentLiabilitesSldGTE applies the GTE predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfCurrentLiabilitesSldLT applies the LT predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfCurrentLiabilitesSldLTE applies the LTE predicate on the "CfCurrentLiabilitesSld" field.
func CfCurrentLiabilitesSldLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfCurrentLiabilitesSld), v))
	})
}

// CfNonControllingSldEQ applies the EQ predicate on the "CfNonControllingSld" field.
func CfNonControllingSldEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfNonControllingSld), v))
	})
}

// CfNonControllingSldNEQ applies the NEQ predicate on the "CfNonControllingSld" field.
func CfNonControllingSldNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfNonControllingSld), v))
	})
}

// CfNonControllingSldIn applies the In predicate on the "CfNonControllingSld" field.
func CfNonControllingSldIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfNonControllingSld), v...))
	})
}

// CfNonControllingSldNotIn applies the NotIn predicate on the "CfNonControllingSld" field.
func CfNonControllingSldNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfNonControllingSld), v...))
	})
}

// CfNonControllingSldGT applies the GT predicate on the "CfNonControllingSld" field.
func CfNonControllingSldGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfNonControllingSld), v))
	})
}

// CfNonControllingSldGTE applies the GTE predicate on the "CfNonControllingSld" field.
func CfNonControllingSldGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfNonControllingSld), v))
	})
}

// CfNonControllingSldLT applies the LT predicate on the "CfNonControllingSld" field.
func CfNonControllingSldLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfNonControllingSld), v))
	})
}

// CfNonControllingSldLTE applies the LTE predicate on the "CfNonControllingSld" field.
func CfNonControllingSldLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfNonControllingSld), v))
	})
}

// CfEquitySldEQ applies the EQ predicate on the "CfEquitySld" field.
func CfEquitySldEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfEquitySld), v))
	})
}

// CfEquitySldNEQ applies the NEQ predicate on the "CfEquitySld" field.
func CfEquitySldNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfEquitySld), v))
	})
}

// CfEquitySldIn applies the In predicate on the "CfEquitySld" field.
func CfEquitySldIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfEquitySld), v...))
	})
}

// CfEquitySldNotIn applies the NotIn predicate on the "CfEquitySld" field.
func CfEquitySldNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfEquitySld), v...))
	})
}

// CfEquitySldGT applies the GT predicate on the "CfEquitySld" field.
func CfEquitySldGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfEquitySld), v))
	})
}

// CfEquitySldGTE applies the GTE predicate on the "CfEquitySld" field.
func CfEquitySldGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfEquitySld), v))
	})
}

// CfEquitySldLT applies the LT predicate on the "CfEquitySld" field.
func CfEquitySldLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfEquitySld), v))
	})
}

// CfEquitySldLTE applies the LTE predicate on the "CfEquitySld" field.
func CfEquitySldLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfEquitySld), v))
	})
}

// CfTotalSldEQ applies the EQ predicate on the "CfTotalSld" field.
func CfTotalSldEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfTotalSld), v))
	})
}

// CfTotalSldNEQ applies the NEQ predicate on the "CfTotalSld" field.
func CfTotalSldNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfTotalSld), v))
	})
}

// CfTotalSldIn applies the In predicate on the "CfTotalSld" field.
func CfTotalSldIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfTotalSld), v...))
	})
}

// CfTotalSldNotIn applies the NotIn predicate on the "CfTotalSld" field.
func CfTotalSldNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfTotalSld), v...))
	})
}

// CfTotalSldGT applies the GT predicate on the "CfTotalSld" field.
func CfTotalSldGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfTotalSld), v))
	})
}

// CfTotalSldGTE applies the GTE predicate on the "CfTotalSld" field.
func CfTotalSldGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfTotalSld), v))
	})
}

// CfTotalSldLT applies the LT predicate on the "CfTotalSld" field.
func CfTotalSldLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfTotalSld), v))
	})
}

// CfTotalSldLTE applies the LTE predicate on the "CfTotalSld" field.
func CfTotalSldLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfTotalSld), v))
	})
}

// URLEQ applies the EQ predicate on the "Url" field.
func URLEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "Url" field.
func URLNEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "Url" field.
func URLIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "Url" field.
func URLNotIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "Url" field.
func URLGT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "Url" field.
func URLGTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "Url" field.
func URLLT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "Url" field.
func URLLTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "Url" field.
func URLContains(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "Url" field.
func URLHasPrefix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "Url" field.
func URLHasSuffix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLIsNil applies the IsNil predicate on the "Url" field.
func URLIsNil() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURL)))
	})
}

// URLNotNil applies the NotNil predicate on the "Url" field.
func URLNotNil() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURL)))
	})
}

// URLEqualFold applies the EqualFold predicate on the "Url" field.
func URLEqualFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "Url" field.
func URLContainsFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// HasEmitent applies the HasEdge predicate on the "Emitent" edge.
func HasEmitent() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmitentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmitentTable, EmitentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmitentWith applies the HasEdge predicate on the "Emitent" edge with a given conditions (other predicates).
func HasEmitentWith(preds ...predicate.Emitent) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmitentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmitentTable, EmitentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		p(s.Not())
	})
}
