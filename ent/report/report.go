// Code generated by entc, DO NOT EDIT.

package report

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the report type in the database.
	Label = "report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReportYear holds the string denoting the reportyear field in the database.
	FieldReportYear = "report_year"
	// FieldReportQuarter holds the string denoting the reportquarter field in the database.
	FieldReportQuarter = "report_quarter"
	// FieldReportDate holds the string denoting the reportdate field in the database.
	FieldReportDate = "report_date"
	// FieldPnlRevenueYtd holds the string denoting the pnlrevenueytd field in the database.
	FieldPnlRevenueYtd = "pnl_revenue_ytd"
	// FieldPnlAmortizationYtd holds the string denoting the pnlamortizationytd field in the database.
	FieldPnlAmortizationYtd = "pnl_amortization_ytd"
	// FieldPnlOperatingIncomeYtd holds the string denoting the pnloperatingincomeytd field in the database.
	FieldPnlOperatingIncomeYtd = "pnl_operating_income_ytd"
	// FieldPnlInterestIncomeYtd holds the string denoting the pnlinterestincomeytd field in the database.
	FieldPnlInterestIncomeYtd = "pnl_interest_income_ytd"
	// FieldPnlInterestExpensesYtd holds the string denoting the pnlinterestexpensesytd field in the database.
	FieldPnlInterestExpensesYtd = "pnl_interest_expenses_ytd"
	// FieldPnlIncomeTaxYtd holds the string denoting the pnlincometaxytd field in the database.
	FieldPnlIncomeTaxYtd = "pnl_income_tax_ytd"
	// FieldPnlNetIncomeYtd holds the string denoting the pnlnetincomeytd field in the database.
	FieldPnlNetIncomeYtd = "pnl_net_income_ytd"
	// FieldCfCashSld holds the string denoting the cfcashsld field in the database.
	FieldCfCashSld = "cf_cash_sld"
	// FieldCfNonCurrentLiabilitiesSld holds the string denoting the cfnoncurrentliabilitiessld field in the database.
	FieldCfNonCurrentLiabilitiesSld = "cf_non_current_liabilities_sld"
	// FieldCfCurrentLiabilitesSld holds the string denoting the cfcurrentliabilitessld field in the database.
	FieldCfCurrentLiabilitesSld = "cf_current_liabilites_sld"
	// FieldCfNonControllingSld holds the string denoting the cfnoncontrollingsld field in the database.
	FieldCfNonControllingSld = "cf_non_controlling_sld"
	// FieldCfEquitySld holds the string denoting the cfequitysld field in the database.
	FieldCfEquitySld = "cf_equity_sld"
	// FieldCfTotalSld holds the string denoting the cftotalsld field in the database.
	FieldCfTotalSld = "cf_total_sld"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeEmitent holds the string denoting the emitent edge name in mutations.
	EdgeEmitent = "Emitent"
	// Table holds the table name of the report in the database.
	Table = "reports"
	// EmitentTable is the table that holds the Emitent relation/edge.
	EmitentTable = "reports"
	// EmitentInverseTable is the table name for the Emitent entity.
	// It exists in this package in order to avoid circular dependency with the "emitent" package.
	EmitentInverseTable = "emitents"
	// EmitentColumn is the table column denoting the Emitent relation/edge.
	EmitentColumn = "emitent_reports"
)

// Columns holds all SQL columns for report fields.
var Columns = []string{
	FieldID,
	FieldReportYear,
	FieldReportQuarter,
	FieldReportDate,
	FieldPnlRevenueYtd,
	FieldPnlAmortizationYtd,
	FieldPnlOperatingIncomeYtd,
	FieldPnlInterestIncomeYtd,
	FieldPnlInterestExpensesYtd,
	FieldPnlIncomeTaxYtd,
	FieldPnlNetIncomeYtd,
	FieldCfCashSld,
	FieldCfNonCurrentLiabilitiesSld,
	FieldCfCurrentLiabilitesSld,
	FieldCfNonControllingSld,
	FieldCfEquitySld,
	FieldCfTotalSld,
	FieldURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"emitent_reports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ReportYearValidator is a validator for the "ReportYear" field. It is called by the builders before save.
	ReportYearValidator func(int) error
	// ReportQuarterValidator is a validator for the "ReportQuarter" field. It is called by the builders before save.
	ReportQuarterValidator func(int) error
	// URLValidator is a validator for the "Url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
