// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/softilium/mb4/ent/divpayout"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/ticker"
)

// DivPayoutUpdate is the builder for updating DivPayout entities.
type DivPayoutUpdate struct {
	config
	hooks    []Hook
	mutation *DivPayoutMutation
}

// Where appends a list predicates to the DivPayoutUpdate builder.
func (dpu *DivPayoutUpdate) Where(ps ...predicate.DivPayout) *DivPayoutUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetForYear sets the "ForYear" field.
func (dpu *DivPayoutUpdate) SetForYear(i int) *DivPayoutUpdate {
	dpu.mutation.ResetForYear()
	dpu.mutation.SetForYear(i)
	return dpu
}

// AddForYear adds i to the "ForYear" field.
func (dpu *DivPayoutUpdate) AddForYear(i int) *DivPayoutUpdate {
	dpu.mutation.AddForYear(i)
	return dpu
}

// SetForQuarter sets the "ForQuarter" field.
func (dpu *DivPayoutUpdate) SetForQuarter(i int) *DivPayoutUpdate {
	dpu.mutation.ResetForQuarter()
	dpu.mutation.SetForQuarter(i)
	return dpu
}

// AddForQuarter adds i to the "ForQuarter" field.
func (dpu *DivPayoutUpdate) AddForQuarter(i int) *DivPayoutUpdate {
	dpu.mutation.AddForQuarter(i)
	return dpu
}

// SetCloseDate sets the "CloseDate" field.
func (dpu *DivPayoutUpdate) SetCloseDate(t time.Time) *DivPayoutUpdate {
	dpu.mutation.SetCloseDate(t)
	return dpu
}

// SetStatus sets the "Status" field.
func (dpu *DivPayoutUpdate) SetStatus(i int) *DivPayoutUpdate {
	dpu.mutation.ResetStatus()
	dpu.mutation.SetStatus(i)
	return dpu
}

// AddStatus adds i to the "Status" field.
func (dpu *DivPayoutUpdate) AddStatus(i int) *DivPayoutUpdate {
	dpu.mutation.AddStatus(i)
	return dpu
}

// SetDPS sets the "DPS" field.
func (dpu *DivPayoutUpdate) SetDPS(f float64) *DivPayoutUpdate {
	dpu.mutation.ResetDPS()
	dpu.mutation.SetDPS(f)
	return dpu
}

// AddDPS adds f to the "DPS" field.
func (dpu *DivPayoutUpdate) AddDPS(f float64) *DivPayoutUpdate {
	dpu.mutation.AddDPS(f)
	return dpu
}

// SetTickersID sets the "Tickers" edge to the Ticker entity by ID.
func (dpu *DivPayoutUpdate) SetTickersID(id string) *DivPayoutUpdate {
	dpu.mutation.SetTickersID(id)
	return dpu
}

// SetTickers sets the "Tickers" edge to the Ticker entity.
func (dpu *DivPayoutUpdate) SetTickers(t *Ticker) *DivPayoutUpdate {
	return dpu.SetTickersID(t.ID)
}

// Mutation returns the DivPayoutMutation object of the builder.
func (dpu *DivPayoutUpdate) Mutation() *DivPayoutMutation {
	return dpu.mutation
}

// ClearTickers clears the "Tickers" edge to the Ticker entity.
func (dpu *DivPayoutUpdate) ClearTickers() *DivPayoutUpdate {
	dpu.mutation.ClearTickers()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DivPayoutUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dpu.hooks) == 0 {
		if err = dpu.check(); err != nil {
			return 0, err
		}
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DivPayoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpu.check(); err != nil {
				return 0, err
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			if dpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DivPayoutUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DivPayoutUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DivPayoutUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DivPayoutUpdate) check() error {
	if v, ok := dpu.mutation.ForYear(); ok {
		if err := divpayout.ForYearValidator(v); err != nil {
			return &ValidationError{Name: "ForYear", err: fmt.Errorf(`ent: validator failed for field "DivPayout.ForYear": %w`, err)}
		}
	}
	if v, ok := dpu.mutation.ForQuarter(); ok {
		if err := divpayout.ForQuarterValidator(v); err != nil {
			return &ValidationError{Name: "ForQuarter", err: fmt.Errorf(`ent: validator failed for field "DivPayout.ForQuarter": %w`, err)}
		}
	}
	if v, ok := dpu.mutation.Status(); ok {
		if err := divpayout.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`ent: validator failed for field "DivPayout.Status": %w`, err)}
		}
	}
	if _, ok := dpu.mutation.TickersID(); dpu.mutation.TickersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DivPayout.Tickers"`)
	}
	return nil
}

func (dpu *DivPayoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   divpayout.Table,
			Columns: divpayout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: divpayout.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.ForYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForYear,
		})
	}
	if value, ok := dpu.mutation.AddedForYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForYear,
		})
	}
	if value, ok := dpu.mutation.ForQuarter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForQuarter,
		})
	}
	if value, ok := dpu.mutation.AddedForQuarter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForQuarter,
		})
	}
	if value, ok := dpu.mutation.CloseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: divpayout.FieldCloseDate,
		})
	}
	if value, ok := dpu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldStatus,
		})
	}
	if value, ok := dpu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldStatus,
		})
	}
	if value, ok := dpu.mutation.DPS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: divpayout.FieldDPS,
		})
	}
	if value, ok := dpu.mutation.AddedDPS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: divpayout.FieldDPS,
		})
	}
	if dpu.mutation.TickersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   divpayout.TickersTable,
			Columns: []string{divpayout.TickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.TickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   divpayout.TickersTable,
			Columns: []string{divpayout.TickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{divpayout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DivPayoutUpdateOne is the builder for updating a single DivPayout entity.
type DivPayoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DivPayoutMutation
}

// SetForYear sets the "ForYear" field.
func (dpuo *DivPayoutUpdateOne) SetForYear(i int) *DivPayoutUpdateOne {
	dpuo.mutation.ResetForYear()
	dpuo.mutation.SetForYear(i)
	return dpuo
}

// AddForYear adds i to the "ForYear" field.
func (dpuo *DivPayoutUpdateOne) AddForYear(i int) *DivPayoutUpdateOne {
	dpuo.mutation.AddForYear(i)
	return dpuo
}

// SetForQuarter sets the "ForQuarter" field.
func (dpuo *DivPayoutUpdateOne) SetForQuarter(i int) *DivPayoutUpdateOne {
	dpuo.mutation.ResetForQuarter()
	dpuo.mutation.SetForQuarter(i)
	return dpuo
}

// AddForQuarter adds i to the "ForQuarter" field.
func (dpuo *DivPayoutUpdateOne) AddForQuarter(i int) *DivPayoutUpdateOne {
	dpuo.mutation.AddForQuarter(i)
	return dpuo
}

// SetCloseDate sets the "CloseDate" field.
func (dpuo *DivPayoutUpdateOne) SetCloseDate(t time.Time) *DivPayoutUpdateOne {
	dpuo.mutation.SetCloseDate(t)
	return dpuo
}

// SetStatus sets the "Status" field.
func (dpuo *DivPayoutUpdateOne) SetStatus(i int) *DivPayoutUpdateOne {
	dpuo.mutation.ResetStatus()
	dpuo.mutation.SetStatus(i)
	return dpuo
}

// AddStatus adds i to the "Status" field.
func (dpuo *DivPayoutUpdateOne) AddStatus(i int) *DivPayoutUpdateOne {
	dpuo.mutation.AddStatus(i)
	return dpuo
}

// SetDPS sets the "DPS" field.
func (dpuo *DivPayoutUpdateOne) SetDPS(f float64) *DivPayoutUpdateOne {
	dpuo.mutation.ResetDPS()
	dpuo.mutation.SetDPS(f)
	return dpuo
}

// AddDPS adds f to the "DPS" field.
func (dpuo *DivPayoutUpdateOne) AddDPS(f float64) *DivPayoutUpdateOne {
	dpuo.mutation.AddDPS(f)
	return dpuo
}

// SetTickersID sets the "Tickers" edge to the Ticker entity by ID.
func (dpuo *DivPayoutUpdateOne) SetTickersID(id string) *DivPayoutUpdateOne {
	dpuo.mutation.SetTickersID(id)
	return dpuo
}

// SetTickers sets the "Tickers" edge to the Ticker entity.
func (dpuo *DivPayoutUpdateOne) SetTickers(t *Ticker) *DivPayoutUpdateOne {
	return dpuo.SetTickersID(t.ID)
}

// Mutation returns the DivPayoutMutation object of the builder.
func (dpuo *DivPayoutUpdateOne) Mutation() *DivPayoutMutation {
	return dpuo.mutation
}

// ClearTickers clears the "Tickers" edge to the Ticker entity.
func (dpuo *DivPayoutUpdateOne) ClearTickers() *DivPayoutUpdateOne {
	dpuo.mutation.ClearTickers()
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DivPayoutUpdateOne) Select(field string, fields ...string) *DivPayoutUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DivPayout entity.
func (dpuo *DivPayoutUpdateOne) Save(ctx context.Context) (*DivPayout, error) {
	var (
		err  error
		node *DivPayout
	)
	if len(dpuo.hooks) == 0 {
		if err = dpuo.check(); err != nil {
			return nil, err
		}
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DivPayoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpuo.check(); err != nil {
				return nil, err
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			if dpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DivPayoutUpdateOne) SaveX(ctx context.Context) *DivPayout {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DivPayoutUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DivPayoutUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DivPayoutUpdateOne) check() error {
	if v, ok := dpuo.mutation.ForYear(); ok {
		if err := divpayout.ForYearValidator(v); err != nil {
			return &ValidationError{Name: "ForYear", err: fmt.Errorf(`ent: validator failed for field "DivPayout.ForYear": %w`, err)}
		}
	}
	if v, ok := dpuo.mutation.ForQuarter(); ok {
		if err := divpayout.ForQuarterValidator(v); err != nil {
			return &ValidationError{Name: "ForQuarter", err: fmt.Errorf(`ent: validator failed for field "DivPayout.ForQuarter": %w`, err)}
		}
	}
	if v, ok := dpuo.mutation.Status(); ok {
		if err := divpayout.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`ent: validator failed for field "DivPayout.Status": %w`, err)}
		}
	}
	if _, ok := dpuo.mutation.TickersID(); dpuo.mutation.TickersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DivPayout.Tickers"`)
	}
	return nil
}

func (dpuo *DivPayoutUpdateOne) sqlSave(ctx context.Context) (_node *DivPayout, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   divpayout.Table,
			Columns: divpayout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: divpayout.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DivPayout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, divpayout.FieldID)
		for _, f := range fields {
			if !divpayout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != divpayout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.ForYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForYear,
		})
	}
	if value, ok := dpuo.mutation.AddedForYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForYear,
		})
	}
	if value, ok := dpuo.mutation.ForQuarter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForQuarter,
		})
	}
	if value, ok := dpuo.mutation.AddedForQuarter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForQuarter,
		})
	}
	if value, ok := dpuo.mutation.CloseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: divpayout.FieldCloseDate,
		})
	}
	if value, ok := dpuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldStatus,
		})
	}
	if value, ok := dpuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldStatus,
		})
	}
	if value, ok := dpuo.mutation.DPS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: divpayout.FieldDPS,
		})
	}
	if value, ok := dpuo.mutation.AddedDPS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: divpayout.FieldDPS,
		})
	}
	if dpuo.mutation.TickersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   divpayout.TickersTable,
			Columns: []string{divpayout.TickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.TickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   divpayout.TickersTable,
			Columns: []string{divpayout.TickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DivPayout{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{divpayout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
