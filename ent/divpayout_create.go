// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/softilium/mb4/ent/divpayout"
	"github.com/softilium/mb4/ent/ticker"
)

// DivPayoutCreate is the builder for creating a DivPayout entity.
type DivPayoutCreate struct {
	config
	mutation *DivPayoutMutation
	hooks    []Hook
}

// SetForYear sets the "ForYear" field.
func (dpc *DivPayoutCreate) SetForYear(i int) *DivPayoutCreate {
	dpc.mutation.SetForYear(i)
	return dpc
}

// SetForQuarter sets the "ForQuarter" field.
func (dpc *DivPayoutCreate) SetForQuarter(i int) *DivPayoutCreate {
	dpc.mutation.SetForQuarter(i)
	return dpc
}

// SetCloseDate sets the "CloseDate" field.
func (dpc *DivPayoutCreate) SetCloseDate(t time.Time) *DivPayoutCreate {
	dpc.mutation.SetCloseDate(t)
	return dpc
}

// SetStatus sets the "Status" field.
func (dpc *DivPayoutCreate) SetStatus(i int) *DivPayoutCreate {
	dpc.mutation.SetStatus(i)
	return dpc
}

// SetDPS sets the "DPS" field.
func (dpc *DivPayoutCreate) SetDPS(f float64) *DivPayoutCreate {
	dpc.mutation.SetDPS(f)
	return dpc
}

// SetTickersID sets the "Tickers" edge to the Ticker entity by ID.
func (dpc *DivPayoutCreate) SetTickersID(id string) *DivPayoutCreate {
	dpc.mutation.SetTickersID(id)
	return dpc
}

// SetNillableTickersID sets the "Tickers" edge to the Ticker entity by ID if the given value is not nil.
func (dpc *DivPayoutCreate) SetNillableTickersID(id *string) *DivPayoutCreate {
	if id != nil {
		dpc = dpc.SetTickersID(*id)
	}
	return dpc
}

// SetTickers sets the "Tickers" edge to the Ticker entity.
func (dpc *DivPayoutCreate) SetTickers(t *Ticker) *DivPayoutCreate {
	return dpc.SetTickersID(t.ID)
}

// Mutation returns the DivPayoutMutation object of the builder.
func (dpc *DivPayoutCreate) Mutation() *DivPayoutMutation {
	return dpc.mutation
}

// Save creates the DivPayout in the database.
func (dpc *DivPayoutCreate) Save(ctx context.Context) (*DivPayout, error) {
	var (
		err  error
		node *DivPayout
	)
	if len(dpc.hooks) == 0 {
		if err = dpc.check(); err != nil {
			return nil, err
		}
		node, err = dpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DivPayoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpc.check(); err != nil {
				return nil, err
			}
			dpc.mutation = mutation
			if node, err = dpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dpc.hooks) - 1; i >= 0; i-- {
			if dpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DivPayoutCreate) SaveX(ctx context.Context) *DivPayout {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DivPayoutCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DivPayoutCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DivPayoutCreate) check() error {
	if _, ok := dpc.mutation.ForYear(); !ok {
		return &ValidationError{Name: "ForYear", err: errors.New(`ent: missing required field "DivPayout.ForYear"`)}
	}
	if v, ok := dpc.mutation.ForYear(); ok {
		if err := divpayout.ForYearValidator(v); err != nil {
			return &ValidationError{Name: "ForYear", err: fmt.Errorf(`ent: validator failed for field "DivPayout.ForYear": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.ForQuarter(); !ok {
		return &ValidationError{Name: "ForQuarter", err: errors.New(`ent: missing required field "DivPayout.ForQuarter"`)}
	}
	if v, ok := dpc.mutation.ForQuarter(); ok {
		if err := divpayout.ForQuarterValidator(v); err != nil {
			return &ValidationError{Name: "ForQuarter", err: fmt.Errorf(`ent: validator failed for field "DivPayout.ForQuarter": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.CloseDate(); !ok {
		return &ValidationError{Name: "CloseDate", err: errors.New(`ent: missing required field "DivPayout.CloseDate"`)}
	}
	if _, ok := dpc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "DivPayout.Status"`)}
	}
	if v, ok := dpc.mutation.Status(); ok {
		if err := divpayout.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`ent: validator failed for field "DivPayout.Status": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.DPS(); !ok {
		return &ValidationError{Name: "DPS", err: errors.New(`ent: missing required field "DivPayout.DPS"`)}
	}
	return nil
}

func (dpc *DivPayoutCreate) sqlSave(ctx context.Context) (*DivPayout, error) {
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dpc *DivPayoutCreate) createSpec() (*DivPayout, *sqlgraph.CreateSpec) {
	var (
		_node = &DivPayout{config: dpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: divpayout.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: divpayout.FieldID,
			},
		}
	)
	if value, ok := dpc.mutation.ForYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForYear,
		})
		_node.ForYear = value
	}
	if value, ok := dpc.mutation.ForQuarter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldForQuarter,
		})
		_node.ForQuarter = value
	}
	if value, ok := dpc.mutation.CloseDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: divpayout.FieldCloseDate,
		})
		_node.CloseDate = value
	}
	if value, ok := dpc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: divpayout.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := dpc.mutation.DPS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: divpayout.FieldDPS,
		})
		_node.DPS = value
	}
	if nodes := dpc.mutation.TickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   divpayout.TickersTable,
			Columns: []string{divpayout.TickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ticker_div_payouts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DivPayoutCreateBulk is the builder for creating many DivPayout entities in bulk.
type DivPayoutCreateBulk struct {
	config
	builders []*DivPayoutCreate
}

// Save creates the DivPayout entities in the database.
func (dpcb *DivPayoutCreateBulk) Save(ctx context.Context) ([]*DivPayout, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DivPayout, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DivPayoutMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DivPayoutCreateBulk) SaveX(ctx context.Context) []*DivPayout {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DivPayoutCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DivPayoutCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
