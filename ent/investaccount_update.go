// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountcashflow"
	"github.com/softilium/mb4/ent/investaccountvaluation"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/user"
)

// InvestAccountUpdate is the builder for updating InvestAccount entities.
type InvestAccountUpdate struct {
	config
	hooks    []Hook
	mutation *InvestAccountMutation
}

// Where appends a list predicates to the InvestAccountUpdate builder.
func (iau *InvestAccountUpdate) Where(ps ...predicate.InvestAccount) *InvestAccountUpdate {
	iau.mutation.Where(ps...)
	return iau
}

// SetDescr sets the "Descr" field.
func (iau *InvestAccountUpdate) SetDescr(s string) *InvestAccountUpdate {
	iau.mutation.SetDescr(s)
	return iau
}

// SetOwnerID sets the "Owner" edge to the User entity by ID.
func (iau *InvestAccountUpdate) SetOwnerID(id xid.ID) *InvestAccountUpdate {
	iau.mutation.SetOwnerID(id)
	return iau
}

// SetNillableOwnerID sets the "Owner" edge to the User entity by ID if the given value is not nil.
func (iau *InvestAccountUpdate) SetNillableOwnerID(id *xid.ID) *InvestAccountUpdate {
	if id != nil {
		iau = iau.SetOwnerID(*id)
	}
	return iau
}

// SetOwner sets the "Owner" edge to the User entity.
func (iau *InvestAccountUpdate) SetOwner(u *User) *InvestAccountUpdate {
	return iau.SetOwnerID(u.ID)
}

// AddCashflowIDs adds the "Cashflows" edge to the InvestAccountCashflow entity by IDs.
func (iau *InvestAccountUpdate) AddCashflowIDs(ids ...xid.ID) *InvestAccountUpdate {
	iau.mutation.AddCashflowIDs(ids...)
	return iau
}

// AddCashflows adds the "Cashflows" edges to the InvestAccountCashflow entity.
func (iau *InvestAccountUpdate) AddCashflows(i ...*InvestAccountCashflow) *InvestAccountUpdate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iau.AddCashflowIDs(ids...)
}

// AddValuationIDs adds the "Valuations" edge to the InvestAccountValuation entity by IDs.
func (iau *InvestAccountUpdate) AddValuationIDs(ids ...xid.ID) *InvestAccountUpdate {
	iau.mutation.AddValuationIDs(ids...)
	return iau
}

// AddValuations adds the "Valuations" edges to the InvestAccountValuation entity.
func (iau *InvestAccountUpdate) AddValuations(i ...*InvestAccountValuation) *InvestAccountUpdate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iau.AddValuationIDs(ids...)
}

// Mutation returns the InvestAccountMutation object of the builder.
func (iau *InvestAccountUpdate) Mutation() *InvestAccountMutation {
	return iau.mutation
}

// ClearOwner clears the "Owner" edge to the User entity.
func (iau *InvestAccountUpdate) ClearOwner() *InvestAccountUpdate {
	iau.mutation.ClearOwner()
	return iau
}

// ClearCashflows clears all "Cashflows" edges to the InvestAccountCashflow entity.
func (iau *InvestAccountUpdate) ClearCashflows() *InvestAccountUpdate {
	iau.mutation.ClearCashflows()
	return iau
}

// RemoveCashflowIDs removes the "Cashflows" edge to InvestAccountCashflow entities by IDs.
func (iau *InvestAccountUpdate) RemoveCashflowIDs(ids ...xid.ID) *InvestAccountUpdate {
	iau.mutation.RemoveCashflowIDs(ids...)
	return iau
}

// RemoveCashflows removes "Cashflows" edges to InvestAccountCashflow entities.
func (iau *InvestAccountUpdate) RemoveCashflows(i ...*InvestAccountCashflow) *InvestAccountUpdate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iau.RemoveCashflowIDs(ids...)
}

// ClearValuations clears all "Valuations" edges to the InvestAccountValuation entity.
func (iau *InvestAccountUpdate) ClearValuations() *InvestAccountUpdate {
	iau.mutation.ClearValuations()
	return iau
}

// RemoveValuationIDs removes the "Valuations" edge to InvestAccountValuation entities by IDs.
func (iau *InvestAccountUpdate) RemoveValuationIDs(ids ...xid.ID) *InvestAccountUpdate {
	iau.mutation.RemoveValuationIDs(ids...)
	return iau
}

// RemoveValuations removes "Valuations" edges to InvestAccountValuation entities.
func (iau *InvestAccountUpdate) RemoveValuations(i ...*InvestAccountValuation) *InvestAccountUpdate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iau.RemoveValuationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iau *InvestAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iau.hooks) == 0 {
		if err = iau.check(); err != nil {
			return 0, err
		}
		affected, err = iau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iau.check(); err != nil {
				return 0, err
			}
			iau.mutation = mutation
			affected, err = iau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iau.hooks) - 1; i >= 0; i-- {
			if iau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iau *InvestAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := iau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iau *InvestAccountUpdate) Exec(ctx context.Context) error {
	_, err := iau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iau *InvestAccountUpdate) ExecX(ctx context.Context) {
	if err := iau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iau *InvestAccountUpdate) check() error {
	if v, ok := iau.mutation.Descr(); ok {
		if err := investaccount.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "InvestAccount.Descr": %w`, err)}
		}
	}
	return nil
}

func (iau *InvestAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccount.Table,
			Columns: investaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccount.FieldID,
			},
		},
	}
	if ps := iau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iau.mutation.Descr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: investaccount.FieldDescr,
		})
	}
	if iau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccount.OwnerTable,
			Columns: []string{investaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccount.OwnerTable,
			Columns: []string{investaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.CashflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedCashflowsIDs(); len(nodes) > 0 && !iau.mutation.CashflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.CashflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.ValuationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedValuationsIDs(); len(nodes) > 0 && !iau.mutation.ValuationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.ValuationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InvestAccountUpdateOne is the builder for updating a single InvestAccount entity.
type InvestAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvestAccountMutation
}

// SetDescr sets the "Descr" field.
func (iauo *InvestAccountUpdateOne) SetDescr(s string) *InvestAccountUpdateOne {
	iauo.mutation.SetDescr(s)
	return iauo
}

// SetOwnerID sets the "Owner" edge to the User entity by ID.
func (iauo *InvestAccountUpdateOne) SetOwnerID(id xid.ID) *InvestAccountUpdateOne {
	iauo.mutation.SetOwnerID(id)
	return iauo
}

// SetNillableOwnerID sets the "Owner" edge to the User entity by ID if the given value is not nil.
func (iauo *InvestAccountUpdateOne) SetNillableOwnerID(id *xid.ID) *InvestAccountUpdateOne {
	if id != nil {
		iauo = iauo.SetOwnerID(*id)
	}
	return iauo
}

// SetOwner sets the "Owner" edge to the User entity.
func (iauo *InvestAccountUpdateOne) SetOwner(u *User) *InvestAccountUpdateOne {
	return iauo.SetOwnerID(u.ID)
}

// AddCashflowIDs adds the "Cashflows" edge to the InvestAccountCashflow entity by IDs.
func (iauo *InvestAccountUpdateOne) AddCashflowIDs(ids ...xid.ID) *InvestAccountUpdateOne {
	iauo.mutation.AddCashflowIDs(ids...)
	return iauo
}

// AddCashflows adds the "Cashflows" edges to the InvestAccountCashflow entity.
func (iauo *InvestAccountUpdateOne) AddCashflows(i ...*InvestAccountCashflow) *InvestAccountUpdateOne {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iauo.AddCashflowIDs(ids...)
}

// AddValuationIDs adds the "Valuations" edge to the InvestAccountValuation entity by IDs.
func (iauo *InvestAccountUpdateOne) AddValuationIDs(ids ...xid.ID) *InvestAccountUpdateOne {
	iauo.mutation.AddValuationIDs(ids...)
	return iauo
}

// AddValuations adds the "Valuations" edges to the InvestAccountValuation entity.
func (iauo *InvestAccountUpdateOne) AddValuations(i ...*InvestAccountValuation) *InvestAccountUpdateOne {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iauo.AddValuationIDs(ids...)
}

// Mutation returns the InvestAccountMutation object of the builder.
func (iauo *InvestAccountUpdateOne) Mutation() *InvestAccountMutation {
	return iauo.mutation
}

// ClearOwner clears the "Owner" edge to the User entity.
func (iauo *InvestAccountUpdateOne) ClearOwner() *InvestAccountUpdateOne {
	iauo.mutation.ClearOwner()
	return iauo
}

// ClearCashflows clears all "Cashflows" edges to the InvestAccountCashflow entity.
func (iauo *InvestAccountUpdateOne) ClearCashflows() *InvestAccountUpdateOne {
	iauo.mutation.ClearCashflows()
	return iauo
}

// RemoveCashflowIDs removes the "Cashflows" edge to InvestAccountCashflow entities by IDs.
func (iauo *InvestAccountUpdateOne) RemoveCashflowIDs(ids ...xid.ID) *InvestAccountUpdateOne {
	iauo.mutation.RemoveCashflowIDs(ids...)
	return iauo
}

// RemoveCashflows removes "Cashflows" edges to InvestAccountCashflow entities.
func (iauo *InvestAccountUpdateOne) RemoveCashflows(i ...*InvestAccountCashflow) *InvestAccountUpdateOne {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iauo.RemoveCashflowIDs(ids...)
}

// ClearValuations clears all "Valuations" edges to the InvestAccountValuation entity.
func (iauo *InvestAccountUpdateOne) ClearValuations() *InvestAccountUpdateOne {
	iauo.mutation.ClearValuations()
	return iauo
}

// RemoveValuationIDs removes the "Valuations" edge to InvestAccountValuation entities by IDs.
func (iauo *InvestAccountUpdateOne) RemoveValuationIDs(ids ...xid.ID) *InvestAccountUpdateOne {
	iauo.mutation.RemoveValuationIDs(ids...)
	return iauo
}

// RemoveValuations removes "Valuations" edges to InvestAccountValuation entities.
func (iauo *InvestAccountUpdateOne) RemoveValuations(i ...*InvestAccountValuation) *InvestAccountUpdateOne {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iauo.RemoveValuationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iauo *InvestAccountUpdateOne) Select(field string, fields ...string) *InvestAccountUpdateOne {
	iauo.fields = append([]string{field}, fields...)
	return iauo
}

// Save executes the query and returns the updated InvestAccount entity.
func (iauo *InvestAccountUpdateOne) Save(ctx context.Context) (*InvestAccount, error) {
	var (
		err  error
		node *InvestAccount
	)
	if len(iauo.hooks) == 0 {
		if err = iauo.check(); err != nil {
			return nil, err
		}
		node, err = iauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iauo.check(); err != nil {
				return nil, err
			}
			iauo.mutation = mutation
			node, err = iauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iauo.hooks) - 1; i >= 0; i-- {
			if iauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iauo *InvestAccountUpdateOne) SaveX(ctx context.Context) *InvestAccount {
	node, err := iauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iauo *InvestAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := iauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iauo *InvestAccountUpdateOne) ExecX(ctx context.Context) {
	if err := iauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iauo *InvestAccountUpdateOne) check() error {
	if v, ok := iauo.mutation.Descr(); ok {
		if err := investaccount.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "InvestAccount.Descr": %w`, err)}
		}
	}
	return nil
}

func (iauo *InvestAccountUpdateOne) sqlSave(ctx context.Context) (_node *InvestAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccount.Table,
			Columns: investaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccount.FieldID,
			},
		},
	}
	id, ok := iauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvestAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, investaccount.FieldID)
		for _, f := range fields {
			if !investaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != investaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iauo.mutation.Descr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: investaccount.FieldDescr,
		})
	}
	if iauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccount.OwnerTable,
			Columns: []string{investaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccount.OwnerTable,
			Columns: []string{investaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.CashflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedCashflowsIDs(); len(nodes) > 0 && !iauo.mutation.CashflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.CashflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.ValuationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedValuationsIDs(); len(nodes) > 0 && !iauo.mutation.ValuationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.ValuationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvestAccount{config: iauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
