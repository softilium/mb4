// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountcashflow"
	"github.com/softilium/mb4/ent/investaccountvaluation"
	"github.com/softilium/mb4/ent/user"
)

// InvestAccountCreate is the builder for creating a InvestAccount entity.
type InvestAccountCreate struct {
	config
	mutation *InvestAccountMutation
	hooks    []Hook
}

// SetDescr sets the "Descr" field.
func (iac *InvestAccountCreate) SetDescr(s string) *InvestAccountCreate {
	iac.mutation.SetDescr(s)
	return iac
}

// SetID sets the "id" field.
func (iac *InvestAccountCreate) SetID(x xid.ID) *InvestAccountCreate {
	iac.mutation.SetID(x)
	return iac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iac *InvestAccountCreate) SetNillableID(x *xid.ID) *InvestAccountCreate {
	if x != nil {
		iac.SetID(*x)
	}
	return iac
}

// SetOwnerID sets the "Owner" edge to the User entity by ID.
func (iac *InvestAccountCreate) SetOwnerID(id xid.ID) *InvestAccountCreate {
	iac.mutation.SetOwnerID(id)
	return iac
}

// SetOwner sets the "Owner" edge to the User entity.
func (iac *InvestAccountCreate) SetOwner(u *User) *InvestAccountCreate {
	return iac.SetOwnerID(u.ID)
}

// AddCashflowIDs adds the "Cashflows" edge to the InvestAccountCashflow entity by IDs.
func (iac *InvestAccountCreate) AddCashflowIDs(ids ...xid.ID) *InvestAccountCreate {
	iac.mutation.AddCashflowIDs(ids...)
	return iac
}

// AddCashflows adds the "Cashflows" edges to the InvestAccountCashflow entity.
func (iac *InvestAccountCreate) AddCashflows(i ...*InvestAccountCashflow) *InvestAccountCreate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iac.AddCashflowIDs(ids...)
}

// AddValuationIDs adds the "Valuations" edge to the InvestAccountValuation entity by IDs.
func (iac *InvestAccountCreate) AddValuationIDs(ids ...xid.ID) *InvestAccountCreate {
	iac.mutation.AddValuationIDs(ids...)
	return iac
}

// AddValuations adds the "Valuations" edges to the InvestAccountValuation entity.
func (iac *InvestAccountCreate) AddValuations(i ...*InvestAccountValuation) *InvestAccountCreate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iac.AddValuationIDs(ids...)
}

// Mutation returns the InvestAccountMutation object of the builder.
func (iac *InvestAccountCreate) Mutation() *InvestAccountMutation {
	return iac.mutation
}

// Save creates the InvestAccount in the database.
func (iac *InvestAccountCreate) Save(ctx context.Context) (*InvestAccount, error) {
	var (
		err  error
		node *InvestAccount
	)
	iac.defaults()
	if len(iac.hooks) == 0 {
		if err = iac.check(); err != nil {
			return nil, err
		}
		node, err = iac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iac.check(); err != nil {
				return nil, err
			}
			iac.mutation = mutation
			if node, err = iac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iac.hooks) - 1; i >= 0; i-- {
			if iac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iac *InvestAccountCreate) SaveX(ctx context.Context) *InvestAccount {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *InvestAccountCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *InvestAccountCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iac *InvestAccountCreate) defaults() {
	if _, ok := iac.mutation.ID(); !ok {
		v := investaccount.DefaultID()
		iac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *InvestAccountCreate) check() error {
	if _, ok := iac.mutation.Descr(); !ok {
		return &ValidationError{Name: "Descr", err: errors.New(`ent: missing required field "InvestAccount.Descr"`)}
	}
	if v, ok := iac.mutation.Descr(); ok {
		if err := investaccount.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "InvestAccount.Descr": %w`, err)}
		}
	}
	if v, ok := iac.mutation.ID(); ok {
		if err := investaccount.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InvestAccount.id": %w`, err)}
		}
	}
	if _, ok := iac.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "Owner", err: errors.New(`ent: missing required edge "InvestAccount.Owner"`)}
	}
	return nil
}

func (iac *InvestAccountCreate) sqlSave(ctx context.Context) (*InvestAccount, error) {
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (iac *InvestAccountCreate) createSpec() (*InvestAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &InvestAccount{config: iac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: investaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccount.FieldID,
			},
		}
	)
	if id, ok := iac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iac.mutation.Descr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: investaccount.FieldDescr,
		})
		_node.Descr = value
	}
	if nodes := iac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccount.OwnerTable,
			Columns: []string{investaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_invest_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.CashflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.CashflowsTable,
			Columns: []string{investaccount.CashflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountcashflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.ValuationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   investaccount.ValuationsTable,
			Columns: []string{investaccount.ValuationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccountvaluation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvestAccountCreateBulk is the builder for creating many InvestAccount entities in bulk.
type InvestAccountCreateBulk struct {
	config
	builders []*InvestAccountCreate
}

// Save creates the InvestAccount entities in the database.
func (iacb *InvestAccountCreateBulk) Save(ctx context.Context) ([]*InvestAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*InvestAccount, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvestAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *InvestAccountCreateBulk) SaveX(ctx context.Context) []*InvestAccount {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *InvestAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *InvestAccountCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}
