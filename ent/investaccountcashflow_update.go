// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountcashflow"
	"github.com/softilium/mb4/ent/predicate"
)

// InvestAccountCashflowUpdate is the builder for updating InvestAccountCashflow entities.
type InvestAccountCashflowUpdate struct {
	config
	hooks    []Hook
	mutation *InvestAccountCashflowMutation
}

// Where appends a list predicates to the InvestAccountCashflowUpdate builder.
func (iacu *InvestAccountCashflowUpdate) Where(ps ...predicate.InvestAccountCashflow) *InvestAccountCashflowUpdate {
	iacu.mutation.Where(ps...)
	return iacu
}

// SetRecDate sets the "RecDate" field.
func (iacu *InvestAccountCashflowUpdate) SetRecDate(t time.Time) *InvestAccountCashflowUpdate {
	iacu.mutation.SetRecDate(t)
	return iacu
}

// SetQty sets the "Qty" field.
func (iacu *InvestAccountCashflowUpdate) SetQty(f float64) *InvestAccountCashflowUpdate {
	iacu.mutation.ResetQty()
	iacu.mutation.SetQty(f)
	return iacu
}

// AddQty adds f to the "Qty" field.
func (iacu *InvestAccountCashflowUpdate) AddQty(f float64) *InvestAccountCashflowUpdate {
	iacu.mutation.AddQty(f)
	return iacu
}

// SetOwnerID sets the "Owner" edge to the InvestAccount entity by ID.
func (iacu *InvestAccountCashflowUpdate) SetOwnerID(id xid.ID) *InvestAccountCashflowUpdate {
	iacu.mutation.SetOwnerID(id)
	return iacu
}

// SetOwner sets the "Owner" edge to the InvestAccount entity.
func (iacu *InvestAccountCashflowUpdate) SetOwner(i *InvestAccount) *InvestAccountCashflowUpdate {
	return iacu.SetOwnerID(i.ID)
}

// Mutation returns the InvestAccountCashflowMutation object of the builder.
func (iacu *InvestAccountCashflowUpdate) Mutation() *InvestAccountCashflowMutation {
	return iacu.mutation
}

// ClearOwner clears the "Owner" edge to the InvestAccount entity.
func (iacu *InvestAccountCashflowUpdate) ClearOwner() *InvestAccountCashflowUpdate {
	iacu.mutation.ClearOwner()
	return iacu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iacu *InvestAccountCashflowUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iacu.hooks) == 0 {
		if err = iacu.check(); err != nil {
			return 0, err
		}
		affected, err = iacu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountCashflowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iacu.check(); err != nil {
				return 0, err
			}
			iacu.mutation = mutation
			affected, err = iacu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iacu.hooks) - 1; i >= 0; i-- {
			if iacu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iacu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iacu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iacu *InvestAccountCashflowUpdate) SaveX(ctx context.Context) int {
	affected, err := iacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iacu *InvestAccountCashflowUpdate) Exec(ctx context.Context) error {
	_, err := iacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacu *InvestAccountCashflowUpdate) ExecX(ctx context.Context) {
	if err := iacu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iacu *InvestAccountCashflowUpdate) check() error {
	if _, ok := iacu.mutation.OwnerID(); iacu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvestAccountCashflow.Owner"`)
	}
	return nil
}

func (iacu *InvestAccountCashflowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccountcashflow.Table,
			Columns: investaccountcashflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccountcashflow.FieldID,
			},
		},
	}
	if ps := iacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iacu.mutation.RecDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: investaccountcashflow.FieldRecDate,
		})
	}
	if value, ok := iacu.mutation.Qty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountcashflow.FieldQty,
		})
	}
	if value, ok := iacu.mutation.AddedQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountcashflow.FieldQty,
		})
	}
	if iacu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountcashflow.OwnerTable,
			Columns: []string{investaccountcashflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iacu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountcashflow.OwnerTable,
			Columns: []string{investaccountcashflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investaccountcashflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InvestAccountCashflowUpdateOne is the builder for updating a single InvestAccountCashflow entity.
type InvestAccountCashflowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvestAccountCashflowMutation
}

// SetRecDate sets the "RecDate" field.
func (iacuo *InvestAccountCashflowUpdateOne) SetRecDate(t time.Time) *InvestAccountCashflowUpdateOne {
	iacuo.mutation.SetRecDate(t)
	return iacuo
}

// SetQty sets the "Qty" field.
func (iacuo *InvestAccountCashflowUpdateOne) SetQty(f float64) *InvestAccountCashflowUpdateOne {
	iacuo.mutation.ResetQty()
	iacuo.mutation.SetQty(f)
	return iacuo
}

// AddQty adds f to the "Qty" field.
func (iacuo *InvestAccountCashflowUpdateOne) AddQty(f float64) *InvestAccountCashflowUpdateOne {
	iacuo.mutation.AddQty(f)
	return iacuo
}

// SetOwnerID sets the "Owner" edge to the InvestAccount entity by ID.
func (iacuo *InvestAccountCashflowUpdateOne) SetOwnerID(id xid.ID) *InvestAccountCashflowUpdateOne {
	iacuo.mutation.SetOwnerID(id)
	return iacuo
}

// SetOwner sets the "Owner" edge to the InvestAccount entity.
func (iacuo *InvestAccountCashflowUpdateOne) SetOwner(i *InvestAccount) *InvestAccountCashflowUpdateOne {
	return iacuo.SetOwnerID(i.ID)
}

// Mutation returns the InvestAccountCashflowMutation object of the builder.
func (iacuo *InvestAccountCashflowUpdateOne) Mutation() *InvestAccountCashflowMutation {
	return iacuo.mutation
}

// ClearOwner clears the "Owner" edge to the InvestAccount entity.
func (iacuo *InvestAccountCashflowUpdateOne) ClearOwner() *InvestAccountCashflowUpdateOne {
	iacuo.mutation.ClearOwner()
	return iacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iacuo *InvestAccountCashflowUpdateOne) Select(field string, fields ...string) *InvestAccountCashflowUpdateOne {
	iacuo.fields = append([]string{field}, fields...)
	return iacuo
}

// Save executes the query and returns the updated InvestAccountCashflow entity.
func (iacuo *InvestAccountCashflowUpdateOne) Save(ctx context.Context) (*InvestAccountCashflow, error) {
	var (
		err  error
		node *InvestAccountCashflow
	)
	if len(iacuo.hooks) == 0 {
		if err = iacuo.check(); err != nil {
			return nil, err
		}
		node, err = iacuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountCashflowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iacuo.check(); err != nil {
				return nil, err
			}
			iacuo.mutation = mutation
			node, err = iacuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iacuo.hooks) - 1; i >= 0; i-- {
			if iacuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iacuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iacuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iacuo *InvestAccountCashflowUpdateOne) SaveX(ctx context.Context) *InvestAccountCashflow {
	node, err := iacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iacuo *InvestAccountCashflowUpdateOne) Exec(ctx context.Context) error {
	_, err := iacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacuo *InvestAccountCashflowUpdateOne) ExecX(ctx context.Context) {
	if err := iacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iacuo *InvestAccountCashflowUpdateOne) check() error {
	if _, ok := iacuo.mutation.OwnerID(); iacuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvestAccountCashflow.Owner"`)
	}
	return nil
}

func (iacuo *InvestAccountCashflowUpdateOne) sqlSave(ctx context.Context) (_node *InvestAccountCashflow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccountcashflow.Table,
			Columns: investaccountcashflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccountcashflow.FieldID,
			},
		},
	}
	id, ok := iacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvestAccountCashflow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, investaccountcashflow.FieldID)
		for _, f := range fields {
			if !investaccountcashflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != investaccountcashflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iacuo.mutation.RecDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: investaccountcashflow.FieldRecDate,
		})
	}
	if value, ok := iacuo.mutation.Qty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountcashflow.FieldQty,
		})
	}
	if value, ok := iacuo.mutation.AddedQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountcashflow.FieldQty,
		})
	}
	if iacuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountcashflow.OwnerTable,
			Columns: []string{investaccountcashflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iacuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountcashflow.OwnerTable,
			Columns: []string{investaccountcashflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvestAccountCashflow{config: iacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investaccountcashflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
