// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountcashflow"
	"github.com/softilium/mb4/ent/investaccountvaluation"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/user"
)

// InvestAccountQuery is the builder for querying InvestAccount entities.
type InvestAccountQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.InvestAccount
	// eager-loading edges.
	withOwner      *UserQuery
	withCashflows  *InvestAccountCashflowQuery
	withValuations *InvestAccountValuationQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InvestAccountQuery builder.
func (iaq *InvestAccountQuery) Where(ps ...predicate.InvestAccount) *InvestAccountQuery {
	iaq.predicates = append(iaq.predicates, ps...)
	return iaq
}

// Limit adds a limit step to the query.
func (iaq *InvestAccountQuery) Limit(limit int) *InvestAccountQuery {
	iaq.limit = &limit
	return iaq
}

// Offset adds an offset step to the query.
func (iaq *InvestAccountQuery) Offset(offset int) *InvestAccountQuery {
	iaq.offset = &offset
	return iaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iaq *InvestAccountQuery) Unique(unique bool) *InvestAccountQuery {
	iaq.unique = &unique
	return iaq
}

// Order adds an order step to the query.
func (iaq *InvestAccountQuery) Order(o ...OrderFunc) *InvestAccountQuery {
	iaq.order = append(iaq.order, o...)
	return iaq
}

// QueryOwner chains the current query on the "Owner" edge.
func (iaq *InvestAccountQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: iaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccount.Table, investaccount.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, investaccount.OwnerTable, investaccount.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(iaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCashflows chains the current query on the "Cashflows" edge.
func (iaq *InvestAccountQuery) QueryCashflows() *InvestAccountCashflowQuery {
	query := &InvestAccountCashflowQuery{config: iaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccount.Table, investaccount.FieldID, selector),
			sqlgraph.To(investaccountcashflow.Table, investaccountcashflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, investaccount.CashflowsTable, investaccount.CashflowsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryValuations chains the current query on the "Valuations" edge.
func (iaq *InvestAccountQuery) QueryValuations() *InvestAccountValuationQuery {
	query := &InvestAccountValuationQuery{config: iaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccount.Table, investaccount.FieldID, selector),
			sqlgraph.To(investaccountvaluation.Table, investaccountvaluation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, investaccount.ValuationsTable, investaccount.ValuationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InvestAccount entity from the query.
// Returns a *NotFoundError when no InvestAccount was found.
func (iaq *InvestAccountQuery) First(ctx context.Context) (*InvestAccount, error) {
	nodes, err := iaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{investaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iaq *InvestAccountQuery) FirstX(ctx context.Context) *InvestAccount {
	node, err := iaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InvestAccount ID from the query.
// Returns a *NotFoundError when no InvestAccount ID was found.
func (iaq *InvestAccountQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = iaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{investaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iaq *InvestAccountQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := iaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InvestAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InvestAccount entity is found.
// Returns a *NotFoundError when no InvestAccount entities are found.
func (iaq *InvestAccountQuery) Only(ctx context.Context) (*InvestAccount, error) {
	nodes, err := iaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{investaccount.Label}
	default:
		return nil, &NotSingularError{investaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iaq *InvestAccountQuery) OnlyX(ctx context.Context) *InvestAccount {
	node, err := iaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InvestAccount ID in the query.
// Returns a *NotSingularError when more than one InvestAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (iaq *InvestAccountQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = iaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = &NotSingularError{investaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iaq *InvestAccountQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := iaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InvestAccounts.
func (iaq *InvestAccountQuery) All(ctx context.Context) ([]*InvestAccount, error) {
	if err := iaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return iaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (iaq *InvestAccountQuery) AllX(ctx context.Context) []*InvestAccount {
	nodes, err := iaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InvestAccount IDs.
func (iaq *InvestAccountQuery) IDs(ctx context.Context) ([]xid.ID, error) {
	var ids []xid.ID
	if err := iaq.Select(investaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iaq *InvestAccountQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := iaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iaq *InvestAccountQuery) Count(ctx context.Context) (int, error) {
	if err := iaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return iaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (iaq *InvestAccountQuery) CountX(ctx context.Context) int {
	count, err := iaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iaq *InvestAccountQuery) Exist(ctx context.Context) (bool, error) {
	if err := iaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return iaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (iaq *InvestAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := iaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InvestAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iaq *InvestAccountQuery) Clone() *InvestAccountQuery {
	if iaq == nil {
		return nil
	}
	return &InvestAccountQuery{
		config:         iaq.config,
		limit:          iaq.limit,
		offset:         iaq.offset,
		order:          append([]OrderFunc{}, iaq.order...),
		predicates:     append([]predicate.InvestAccount{}, iaq.predicates...),
		withOwner:      iaq.withOwner.Clone(),
		withCashflows:  iaq.withCashflows.Clone(),
		withValuations: iaq.withValuations.Clone(),
		// clone intermediate query.
		sql:    iaq.sql.Clone(),
		path:   iaq.path,
		unique: iaq.unique,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "Owner" edge. The optional arguments are used to configure the query builder of the edge.
func (iaq *InvestAccountQuery) WithOwner(opts ...func(*UserQuery)) *InvestAccountQuery {
	query := &UserQuery{config: iaq.config}
	for _, opt := range opts {
		opt(query)
	}
	iaq.withOwner = query
	return iaq
}

// WithCashflows tells the query-builder to eager-load the nodes that are connected to
// the "Cashflows" edge. The optional arguments are used to configure the query builder of the edge.
func (iaq *InvestAccountQuery) WithCashflows(opts ...func(*InvestAccountCashflowQuery)) *InvestAccountQuery {
	query := &InvestAccountCashflowQuery{config: iaq.config}
	for _, opt := range opts {
		opt(query)
	}
	iaq.withCashflows = query
	return iaq
}

// WithValuations tells the query-builder to eager-load the nodes that are connected to
// the "Valuations" edge. The optional arguments are used to configure the query builder of the edge.
func (iaq *InvestAccountQuery) WithValuations(opts ...func(*InvestAccountValuationQuery)) *InvestAccountQuery {
	query := &InvestAccountValuationQuery{config: iaq.config}
	for _, opt := range opts {
		opt(query)
	}
	iaq.withValuations = query
	return iaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Descr string `json:"Descr,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InvestAccount.Query().
//		GroupBy(investaccount.FieldDescr).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (iaq *InvestAccountQuery) GroupBy(field string, fields ...string) *InvestAccountGroupBy {
	group := &InvestAccountGroupBy{config: iaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := iaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return iaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Descr string `json:"Descr,omitempty"`
//	}
//
//	client.InvestAccount.Query().
//		Select(investaccount.FieldDescr).
//		Scan(ctx, &v)
//
func (iaq *InvestAccountQuery) Select(fields ...string) *InvestAccountSelect {
	iaq.fields = append(iaq.fields, fields...)
	return &InvestAccountSelect{InvestAccountQuery: iaq}
}

func (iaq *InvestAccountQuery) prepareQuery(ctx context.Context) error {
	for _, f := range iaq.fields {
		if !investaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iaq.path != nil {
		prev, err := iaq.path(ctx)
		if err != nil {
			return err
		}
		iaq.sql = prev
	}
	return nil
}

func (iaq *InvestAccountQuery) sqlAll(ctx context.Context) ([]*InvestAccount, error) {
	var (
		nodes       = []*InvestAccount{}
		withFKs     = iaq.withFKs
		_spec       = iaq.querySpec()
		loadedTypes = [3]bool{
			iaq.withOwner != nil,
			iaq.withCashflows != nil,
			iaq.withValuations != nil,
		}
	)
	if iaq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, investaccount.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &InvestAccount{config: iaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, iaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := iaq.withOwner; query != nil {
		ids := make([]xid.ID, 0, len(nodes))
		nodeids := make(map[xid.ID][]*InvestAccount)
		for i := range nodes {
			if nodes[i].user_invest_accounts == nil {
				continue
			}
			fk := *nodes[i].user_invest_accounts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_invest_accounts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Owner = n
			}
		}
	}

	if query := iaq.withCashflows; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[xid.ID]*InvestAccount)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Cashflows = []*InvestAccountCashflow{}
		}
		query.withFKs = true
		query.Where(predicate.InvestAccountCashflow(func(s *sql.Selector) {
			s.Where(sql.InValues(investaccount.CashflowsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.invest_account_cashflows
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "invest_account_cashflows" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "invest_account_cashflows" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Cashflows = append(node.Edges.Cashflows, n)
		}
	}

	if query := iaq.withValuations; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[xid.ID]*InvestAccount)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Valuations = []*InvestAccountValuation{}
		}
		query.withFKs = true
		query.Where(predicate.InvestAccountValuation(func(s *sql.Selector) {
			s.Where(sql.InValues(investaccount.ValuationsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.invest_account_valuations
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "invest_account_valuations" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "invest_account_valuations" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Valuations = append(node.Edges.Valuations, n)
		}
	}

	return nodes, nil
}

func (iaq *InvestAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iaq.querySpec()
	_spec.Node.Columns = iaq.fields
	if len(iaq.fields) > 0 {
		_spec.Unique = iaq.unique != nil && *iaq.unique
	}
	return sqlgraph.CountNodes(ctx, iaq.driver, _spec)
}

func (iaq *InvestAccountQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := iaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (iaq *InvestAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccount.Table,
			Columns: investaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccount.FieldID,
			},
		},
		From:   iaq.sql,
		Unique: true,
	}
	if unique := iaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := iaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, investaccount.FieldID)
		for i := range fields {
			if fields[i] != investaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iaq *InvestAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iaq.driver.Dialect())
	t1 := builder.Table(investaccount.Table)
	columns := iaq.fields
	if len(columns) == 0 {
		columns = investaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iaq.sql != nil {
		selector = iaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iaq.unique != nil && *iaq.unique {
		selector.Distinct()
	}
	for _, p := range iaq.predicates {
		p(selector)
	}
	for _, p := range iaq.order {
		p(selector)
	}
	if offset := iaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InvestAccountGroupBy is the group-by builder for InvestAccount entities.
type InvestAccountGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iagb *InvestAccountGroupBy) Aggregate(fns ...AggregateFunc) *InvestAccountGroupBy {
	iagb.fns = append(iagb.fns, fns...)
	return iagb
}

// Scan applies the group-by query and scans the result into the given value.
func (iagb *InvestAccountGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := iagb.path(ctx)
	if err != nil {
		return err
	}
	iagb.sql = query
	return iagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := iagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(iagb.fields) > 1 {
		return nil, errors.New("ent: InvestAccountGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := iagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) StringsX(ctx context.Context) []string {
	v, err := iagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = iagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) StringX(ctx context.Context) string {
	v, err := iagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(iagb.fields) > 1 {
		return nil, errors.New("ent: InvestAccountGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := iagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) IntsX(ctx context.Context) []int {
	v, err := iagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = iagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) IntX(ctx context.Context) int {
	v, err := iagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(iagb.fields) > 1 {
		return nil, errors.New("ent: InvestAccountGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := iagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := iagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = iagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) Float64X(ctx context.Context) float64 {
	v, err := iagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(iagb.fields) > 1 {
		return nil, errors.New("ent: InvestAccountGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := iagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := iagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iagb *InvestAccountGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = iagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (iagb *InvestAccountGroupBy) BoolX(ctx context.Context) bool {
	v, err := iagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (iagb *InvestAccountGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range iagb.fields {
		if !investaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := iagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (iagb *InvestAccountGroupBy) sqlQuery() *sql.Selector {
	selector := iagb.sql.Select()
	aggregation := make([]string, 0, len(iagb.fns))
	for _, fn := range iagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(iagb.fields)+len(iagb.fns))
		for _, f := range iagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(iagb.fields...)...)
}

// InvestAccountSelect is the builder for selecting fields of InvestAccount entities.
type InvestAccountSelect struct {
	*InvestAccountQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ias *InvestAccountSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ias.prepareQuery(ctx); err != nil {
		return err
	}
	ias.sql = ias.InvestAccountQuery.sqlQuery(ctx)
	return ias.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ias *InvestAccountSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ias.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ias.fields) > 1 {
		return nil, errors.New("ent: InvestAccountSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ias *InvestAccountSelect) StringsX(ctx context.Context) []string {
	v, err := ias.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ias.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ias *InvestAccountSelect) StringX(ctx context.Context) string {
	v, err := ias.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ias.fields) > 1 {
		return nil, errors.New("ent: InvestAccountSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ias *InvestAccountSelect) IntsX(ctx context.Context) []int {
	v, err := ias.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ias.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ias *InvestAccountSelect) IntX(ctx context.Context) int {
	v, err := ias.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ias.fields) > 1 {
		return nil, errors.New("ent: InvestAccountSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ias *InvestAccountSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ias.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ias.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ias *InvestAccountSelect) Float64X(ctx context.Context) float64 {
	v, err := ias.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ias.fields) > 1 {
		return nil, errors.New("ent: InvestAccountSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ias *InvestAccountSelect) BoolsX(ctx context.Context) []bool {
	v, err := ias.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ias *InvestAccountSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ias.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{investaccount.Label}
	default:
		err = fmt.Errorf("ent: InvestAccountSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ias *InvestAccountSelect) BoolX(ctx context.Context) bool {
	v, err := ias.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ias *InvestAccountSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ias.sql.Query()
	if err := ias.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
