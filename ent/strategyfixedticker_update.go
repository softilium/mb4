// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfixedticker"
)

// StrategyFixedTickerUpdate is the builder for updating StrategyFixedTicker entities.
type StrategyFixedTickerUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyFixedTickerMutation
}

// Where appends a list predicates to the StrategyFixedTickerUpdate builder.
func (sftu *StrategyFixedTickerUpdate) Where(ps ...predicate.StrategyFixedTicker) *StrategyFixedTickerUpdate {
	sftu.mutation.Where(ps...)
	return sftu
}

// SetLineNum sets the "LineNum" field.
func (sftu *StrategyFixedTickerUpdate) SetLineNum(i int) *StrategyFixedTickerUpdate {
	sftu.mutation.ResetLineNum()
	sftu.mutation.SetLineNum(i)
	return sftu
}

// SetNillableLineNum sets the "LineNum" field if the given value is not nil.
func (sftu *StrategyFixedTickerUpdate) SetNillableLineNum(i *int) *StrategyFixedTickerUpdate {
	if i != nil {
		sftu.SetLineNum(*i)
	}
	return sftu
}

// AddLineNum adds i to the "LineNum" field.
func (sftu *StrategyFixedTickerUpdate) AddLineNum(i int) *StrategyFixedTickerUpdate {
	sftu.mutation.AddLineNum(i)
	return sftu
}

// SetIsUsed sets the "IsUsed" field.
func (sftu *StrategyFixedTickerUpdate) SetIsUsed(b bool) *StrategyFixedTickerUpdate {
	sftu.mutation.SetIsUsed(b)
	return sftu
}

// SetNillableIsUsed sets the "IsUsed" field if the given value is not nil.
func (sftu *StrategyFixedTickerUpdate) SetNillableIsUsed(b *bool) *StrategyFixedTickerUpdate {
	if b != nil {
		sftu.SetIsUsed(*b)
	}
	return sftu
}

// SetTicker sets the "Ticker" field.
func (sftu *StrategyFixedTickerUpdate) SetTicker(s string) *StrategyFixedTickerUpdate {
	sftu.mutation.SetTicker(s)
	return sftu
}

// SetShare sets the "Share" field.
func (sftu *StrategyFixedTickerUpdate) SetShare(i int) *StrategyFixedTickerUpdate {
	sftu.mutation.ResetShare()
	sftu.mutation.SetShare(i)
	return sftu
}

// SetNillableShare sets the "Share" field if the given value is not nil.
func (sftu *StrategyFixedTickerUpdate) SetNillableShare(i *int) *StrategyFixedTickerUpdate {
	if i != nil {
		sftu.SetShare(*i)
	}
	return sftu
}

// AddShare adds i to the "Share" field.
func (sftu *StrategyFixedTickerUpdate) AddShare(i int) *StrategyFixedTickerUpdate {
	sftu.mutation.AddShare(i)
	return sftu
}

// SetStrategyID sets the "Strategy" edge to the Strategy entity by ID.
func (sftu *StrategyFixedTickerUpdate) SetStrategyID(id xid.ID) *StrategyFixedTickerUpdate {
	sftu.mutation.SetStrategyID(id)
	return sftu
}

// SetStrategy sets the "Strategy" edge to the Strategy entity.
func (sftu *StrategyFixedTickerUpdate) SetStrategy(s *Strategy) *StrategyFixedTickerUpdate {
	return sftu.SetStrategyID(s.ID)
}

// Mutation returns the StrategyFixedTickerMutation object of the builder.
func (sftu *StrategyFixedTickerUpdate) Mutation() *StrategyFixedTickerMutation {
	return sftu.mutation
}

// ClearStrategy clears the "Strategy" edge to the Strategy entity.
func (sftu *StrategyFixedTickerUpdate) ClearStrategy() *StrategyFixedTickerUpdate {
	sftu.mutation.ClearStrategy()
	return sftu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sftu *StrategyFixedTickerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sftu.hooks) == 0 {
		if err = sftu.check(); err != nil {
			return 0, err
		}
		affected, err = sftu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyFixedTickerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sftu.check(); err != nil {
				return 0, err
			}
			sftu.mutation = mutation
			affected, err = sftu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sftu.hooks) - 1; i >= 0; i-- {
			if sftu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sftu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sftu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sftu *StrategyFixedTickerUpdate) SaveX(ctx context.Context) int {
	affected, err := sftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sftu *StrategyFixedTickerUpdate) Exec(ctx context.Context) error {
	_, err := sftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sftu *StrategyFixedTickerUpdate) ExecX(ctx context.Context) {
	if err := sftu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sftu *StrategyFixedTickerUpdate) check() error {
	if v, ok := sftu.mutation.LineNum(); ok {
		if err := strategyfixedticker.LineNumValidator(v); err != nil {
			return &ValidationError{Name: "LineNum", err: fmt.Errorf(`ent: validator failed for field "StrategyFixedTicker.LineNum": %w`, err)}
		}
	}
	if v, ok := sftu.mutation.Ticker(); ok {
		if err := strategyfixedticker.TickerValidator(v); err != nil {
			return &ValidationError{Name: "Ticker", err: fmt.Errorf(`ent: validator failed for field "StrategyFixedTicker.Ticker": %w`, err)}
		}
	}
	if v, ok := sftu.mutation.Share(); ok {
		if err := strategyfixedticker.ShareValidator(v); err != nil {
			return &ValidationError{Name: "Share", err: fmt.Errorf(`ent: validator failed for field "StrategyFixedTicker.Share": %w`, err)}
		}
	}
	if _, ok := sftu.mutation.StrategyID(); sftu.mutation.StrategyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StrategyFixedTicker.Strategy"`)
	}
	return nil
}

func (sftu *StrategyFixedTickerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   strategyfixedticker.Table,
			Columns: strategyfixedticker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategyfixedticker.FieldID,
			},
		},
	}
	if ps := sftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sftu.mutation.LineNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldLineNum,
		})
	}
	if value, ok := sftu.mutation.AddedLineNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldLineNum,
		})
	}
	if value, ok := sftu.mutation.IsUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategyfixedticker.FieldIsUsed,
		})
	}
	if value, ok := sftu.mutation.Ticker(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfixedticker.FieldTicker,
		})
	}
	if value, ok := sftu.mutation.Share(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldShare,
		})
	}
	if value, ok := sftu.mutation.AddedShare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldShare,
		})
	}
	if sftu.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfixedticker.StrategyTable,
			Columns: []string{strategyfixedticker.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sftu.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfixedticker.StrategyTable,
			Columns: []string{strategyfixedticker.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyfixedticker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StrategyFixedTickerUpdateOne is the builder for updating a single StrategyFixedTicker entity.
type StrategyFixedTickerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyFixedTickerMutation
}

// SetLineNum sets the "LineNum" field.
func (sftuo *StrategyFixedTickerUpdateOne) SetLineNum(i int) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.ResetLineNum()
	sftuo.mutation.SetLineNum(i)
	return sftuo
}

// SetNillableLineNum sets the "LineNum" field if the given value is not nil.
func (sftuo *StrategyFixedTickerUpdateOne) SetNillableLineNum(i *int) *StrategyFixedTickerUpdateOne {
	if i != nil {
		sftuo.SetLineNum(*i)
	}
	return sftuo
}

// AddLineNum adds i to the "LineNum" field.
func (sftuo *StrategyFixedTickerUpdateOne) AddLineNum(i int) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.AddLineNum(i)
	return sftuo
}

// SetIsUsed sets the "IsUsed" field.
func (sftuo *StrategyFixedTickerUpdateOne) SetIsUsed(b bool) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.SetIsUsed(b)
	return sftuo
}

// SetNillableIsUsed sets the "IsUsed" field if the given value is not nil.
func (sftuo *StrategyFixedTickerUpdateOne) SetNillableIsUsed(b *bool) *StrategyFixedTickerUpdateOne {
	if b != nil {
		sftuo.SetIsUsed(*b)
	}
	return sftuo
}

// SetTicker sets the "Ticker" field.
func (sftuo *StrategyFixedTickerUpdateOne) SetTicker(s string) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.SetTicker(s)
	return sftuo
}

// SetShare sets the "Share" field.
func (sftuo *StrategyFixedTickerUpdateOne) SetShare(i int) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.ResetShare()
	sftuo.mutation.SetShare(i)
	return sftuo
}

// SetNillableShare sets the "Share" field if the given value is not nil.
func (sftuo *StrategyFixedTickerUpdateOne) SetNillableShare(i *int) *StrategyFixedTickerUpdateOne {
	if i != nil {
		sftuo.SetShare(*i)
	}
	return sftuo
}

// AddShare adds i to the "Share" field.
func (sftuo *StrategyFixedTickerUpdateOne) AddShare(i int) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.AddShare(i)
	return sftuo
}

// SetStrategyID sets the "Strategy" edge to the Strategy entity by ID.
func (sftuo *StrategyFixedTickerUpdateOne) SetStrategyID(id xid.ID) *StrategyFixedTickerUpdateOne {
	sftuo.mutation.SetStrategyID(id)
	return sftuo
}

// SetStrategy sets the "Strategy" edge to the Strategy entity.
func (sftuo *StrategyFixedTickerUpdateOne) SetStrategy(s *Strategy) *StrategyFixedTickerUpdateOne {
	return sftuo.SetStrategyID(s.ID)
}

// Mutation returns the StrategyFixedTickerMutation object of the builder.
func (sftuo *StrategyFixedTickerUpdateOne) Mutation() *StrategyFixedTickerMutation {
	return sftuo.mutation
}

// ClearStrategy clears the "Strategy" edge to the Strategy entity.
func (sftuo *StrategyFixedTickerUpdateOne) ClearStrategy() *StrategyFixedTickerUpdateOne {
	sftuo.mutation.ClearStrategy()
	return sftuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sftuo *StrategyFixedTickerUpdateOne) Select(field string, fields ...string) *StrategyFixedTickerUpdateOne {
	sftuo.fields = append([]string{field}, fields...)
	return sftuo
}

// Save executes the query and returns the updated StrategyFixedTicker entity.
func (sftuo *StrategyFixedTickerUpdateOne) Save(ctx context.Context) (*StrategyFixedTicker, error) {
	var (
		err  error
		node *StrategyFixedTicker
	)
	if len(sftuo.hooks) == 0 {
		if err = sftuo.check(); err != nil {
			return nil, err
		}
		node, err = sftuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyFixedTickerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sftuo.check(); err != nil {
				return nil, err
			}
			sftuo.mutation = mutation
			node, err = sftuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sftuo.hooks) - 1; i >= 0; i-- {
			if sftuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sftuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sftuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sftuo *StrategyFixedTickerUpdateOne) SaveX(ctx context.Context) *StrategyFixedTicker {
	node, err := sftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sftuo *StrategyFixedTickerUpdateOne) Exec(ctx context.Context) error {
	_, err := sftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sftuo *StrategyFixedTickerUpdateOne) ExecX(ctx context.Context) {
	if err := sftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sftuo *StrategyFixedTickerUpdateOne) check() error {
	if v, ok := sftuo.mutation.LineNum(); ok {
		if err := strategyfixedticker.LineNumValidator(v); err != nil {
			return &ValidationError{Name: "LineNum", err: fmt.Errorf(`ent: validator failed for field "StrategyFixedTicker.LineNum": %w`, err)}
		}
	}
	if v, ok := sftuo.mutation.Ticker(); ok {
		if err := strategyfixedticker.TickerValidator(v); err != nil {
			return &ValidationError{Name: "Ticker", err: fmt.Errorf(`ent: validator failed for field "StrategyFixedTicker.Ticker": %w`, err)}
		}
	}
	if v, ok := sftuo.mutation.Share(); ok {
		if err := strategyfixedticker.ShareValidator(v); err != nil {
			return &ValidationError{Name: "Share", err: fmt.Errorf(`ent: validator failed for field "StrategyFixedTicker.Share": %w`, err)}
		}
	}
	if _, ok := sftuo.mutation.StrategyID(); sftuo.mutation.StrategyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StrategyFixedTicker.Strategy"`)
	}
	return nil
}

func (sftuo *StrategyFixedTickerUpdateOne) sqlSave(ctx context.Context) (_node *StrategyFixedTicker, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   strategyfixedticker.Table,
			Columns: strategyfixedticker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategyfixedticker.FieldID,
			},
		},
	}
	id, ok := sftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StrategyFixedTicker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategyfixedticker.FieldID)
		for _, f := range fields {
			if !strategyfixedticker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategyfixedticker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sftuo.mutation.LineNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldLineNum,
		})
	}
	if value, ok := sftuo.mutation.AddedLineNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldLineNum,
		})
	}
	if value, ok := sftuo.mutation.IsUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategyfixedticker.FieldIsUsed,
		})
	}
	if value, ok := sftuo.mutation.Ticker(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfixedticker.FieldTicker,
		})
	}
	if value, ok := sftuo.mutation.Share(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldShare,
		})
	}
	if value, ok := sftuo.mutation.AddedShare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfixedticker.FieldShare,
		})
	}
	if sftuo.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfixedticker.StrategyTable,
			Columns: []string{strategyfixedticker.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sftuo.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfixedticker.StrategyTable,
			Columns: []string{strategyfixedticker.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StrategyFixedTicker{config: sftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyfixedticker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
