// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfactor"
	"github.com/softilium/mb4/ent/strategyfilter"
	"github.com/softilium/mb4/ent/strategyfixedticker"
	"github.com/softilium/mb4/ent/user"
)

// StrategyCreate is the builder for creating a Strategy entity.
type StrategyCreate struct {
	config
	mutation *StrategyMutation
	hooks    []Hook
}

// SetDescr sets the "Descr" field.
func (sc *StrategyCreate) SetDescr(s string) *StrategyCreate {
	sc.mutation.SetDescr(s)
	return sc
}

// SetMaxTickers sets the "MaxTickers" field.
func (sc *StrategyCreate) SetMaxTickers(i int) *StrategyCreate {
	sc.mutation.SetMaxTickers(i)
	return sc
}

// SetNillableMaxTickers sets the "MaxTickers" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableMaxTickers(i *int) *StrategyCreate {
	if i != nil {
		sc.SetMaxTickers(*i)
	}
	return sc
}

// SetMaxTickersPerIndustry sets the "MaxTickersPerIndustry" field.
func (sc *StrategyCreate) SetMaxTickersPerIndustry(i int) *StrategyCreate {
	sc.mutation.SetMaxTickersPerIndustry(i)
	return sc
}

// SetNillableMaxTickersPerIndustry sets the "MaxTickersPerIndustry" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableMaxTickersPerIndustry(i *int) *StrategyCreate {
	if i != nil {
		sc.SetMaxTickersPerIndustry(*i)
	}
	return sc
}

// SetBaseIndex sets the "BaseIndex" field.
func (sc *StrategyCreate) SetBaseIndex(s string) *StrategyCreate {
	sc.mutation.SetBaseIndex(s)
	return sc
}

// SetNillableBaseIndex sets the "BaseIndex" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableBaseIndex(s *string) *StrategyCreate {
	if s != nil {
		sc.SetBaseIndex(*s)
	}
	return sc
}

// SetLastYearInventResult sets the "LastYearInventResult" field.
func (sc *StrategyCreate) SetLastYearInventResult(f float64) *StrategyCreate {
	sc.mutation.SetLastYearInventResult(f)
	return sc
}

// SetNillableLastYearInventResult sets the "LastYearInventResult" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableLastYearInventResult(f *float64) *StrategyCreate {
	if f != nil {
		sc.SetLastYearInventResult(*f)
	}
	return sc
}

// SetLastYearYield sets the "LastYearYield" field.
func (sc *StrategyCreate) SetLastYearYield(f float64) *StrategyCreate {
	sc.mutation.SetLastYearYield(f)
	return sc
}

// SetNillableLastYearYield sets the "LastYearYield" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableLastYearYield(f *float64) *StrategyCreate {
	if f != nil {
		sc.SetLastYearYield(*f)
	}
	return sc
}

// SetLast3YearsInvertResult sets the "Last3YearsInvertResult" field.
func (sc *StrategyCreate) SetLast3YearsInvertResult(f float64) *StrategyCreate {
	sc.mutation.SetLast3YearsInvertResult(f)
	return sc
}

// SetNillableLast3YearsInvertResult sets the "Last3YearsInvertResult" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableLast3YearsInvertResult(f *float64) *StrategyCreate {
	if f != nil {
		sc.SetLast3YearsInvertResult(*f)
	}
	return sc
}

// SetLast3YearsYield sets the "Last3YearsYield" field.
func (sc *StrategyCreate) SetLast3YearsYield(f float64) *StrategyCreate {
	sc.mutation.SetLast3YearsYield(f)
	return sc
}

// SetNillableLast3YearsYield sets the "Last3YearsYield" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableLast3YearsYield(f *float64) *StrategyCreate {
	if f != nil {
		sc.SetLast3YearsYield(*f)
	}
	return sc
}

// SetWeekRefillAmount sets the "WeekRefillAmount" field.
func (sc *StrategyCreate) SetWeekRefillAmount(f float64) *StrategyCreate {
	sc.mutation.SetWeekRefillAmount(f)
	return sc
}

// SetStartAmount sets the "StartAmount" field.
func (sc *StrategyCreate) SetStartAmount(f float64) *StrategyCreate {
	sc.mutation.SetStartAmount(f)
	return sc
}

// SetStartSimulation sets the "StartSimulation" field.
func (sc *StrategyCreate) SetStartSimulation(t time.Time) *StrategyCreate {
	sc.mutation.SetStartSimulation(t)
	return sc
}

// SetNillableStartSimulation sets the "StartSimulation" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableStartSimulation(t *time.Time) *StrategyCreate {
	if t != nil {
		sc.SetStartSimulation(*t)
	}
	return sc
}

// SetBuyOnlyLowPrice sets the "BuyOnlyLowPrice" field.
func (sc *StrategyCreate) SetBuyOnlyLowPrice(b bool) *StrategyCreate {
	sc.mutation.SetBuyOnlyLowPrice(b)
	return sc
}

// SetNillableBuyOnlyLowPrice sets the "BuyOnlyLowPrice" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableBuyOnlyLowPrice(b *bool) *StrategyCreate {
	if b != nil {
		sc.SetBuyOnlyLowPrice(*b)
	}
	return sc
}

// SetAllowLossWhenSell sets the "AllowLossWhenSell" field.
func (sc *StrategyCreate) SetAllowLossWhenSell(b bool) *StrategyCreate {
	sc.mutation.SetAllowLossWhenSell(b)
	return sc
}

// SetNillableAllowLossWhenSell sets the "AllowLossWhenSell" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableAllowLossWhenSell(b *bool) *StrategyCreate {
	if b != nil {
		sc.SetAllowLossWhenSell(*b)
	}
	return sc
}

// SetSameEmitent sets the "SameEmitent" field.
func (sc *StrategyCreate) SetSameEmitent(i int) *StrategyCreate {
	sc.mutation.SetSameEmitent(i)
	return sc
}

// SetNillableSameEmitent sets the "SameEmitent" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableSameEmitent(i *int) *StrategyCreate {
	if i != nil {
		sc.SetSameEmitent(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StrategyCreate) SetID(x xid.ID) *StrategyCreate {
	sc.mutation.SetID(x)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StrategyCreate) SetNillableID(x *xid.ID) *StrategyCreate {
	if x != nil {
		sc.SetID(*x)
	}
	return sc
}

// SetUserID sets the "User" edge to the User entity by ID.
func (sc *StrategyCreate) SetUserID(id xid.ID) *StrategyCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetUser sets the "User" edge to the User entity.
func (sc *StrategyCreate) SetUser(u *User) *StrategyCreate {
	return sc.SetUserID(u.ID)
}

// AddFactorIDs adds the "Factors" edge to the StrategyFactor entity by IDs.
func (sc *StrategyCreate) AddFactorIDs(ids ...xid.ID) *StrategyCreate {
	sc.mutation.AddFactorIDs(ids...)
	return sc
}

// AddFactors adds the "Factors" edges to the StrategyFactor entity.
func (sc *StrategyCreate) AddFactors(s ...*StrategyFactor) *StrategyCreate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddFactorIDs(ids...)
}

// AddFilterIDs adds the "Filters" edge to the StrategyFilter entity by IDs.
func (sc *StrategyCreate) AddFilterIDs(ids ...xid.ID) *StrategyCreate {
	sc.mutation.AddFilterIDs(ids...)
	return sc
}

// AddFilters adds the "Filters" edges to the StrategyFilter entity.
func (sc *StrategyCreate) AddFilters(s ...*StrategyFilter) *StrategyCreate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddFilterIDs(ids...)
}

// AddFixedTickerIDs adds the "FixedTickers" edge to the StrategyFixedTicker entity by IDs.
func (sc *StrategyCreate) AddFixedTickerIDs(ids ...xid.ID) *StrategyCreate {
	sc.mutation.AddFixedTickerIDs(ids...)
	return sc
}

// AddFixedTickers adds the "FixedTickers" edges to the StrategyFixedTicker entity.
func (sc *StrategyCreate) AddFixedTickers(s ...*StrategyFixedTicker) *StrategyCreate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddFixedTickerIDs(ids...)
}

// Mutation returns the StrategyMutation object of the builder.
func (sc *StrategyCreate) Mutation() *StrategyMutation {
	return sc.mutation
}

// Save creates the Strategy in the database.
func (sc *StrategyCreate) Save(ctx context.Context) (*Strategy, error) {
	var (
		err  error
		node *Strategy
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StrategyCreate) SaveX(ctx context.Context) *Strategy {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StrategyCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StrategyCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StrategyCreate) defaults() {
	if _, ok := sc.mutation.MaxTickers(); !ok {
		v := strategy.DefaultMaxTickers
		sc.mutation.SetMaxTickers(v)
	}
	if _, ok := sc.mutation.MaxTickersPerIndustry(); !ok {
		v := strategy.DefaultMaxTickersPerIndustry
		sc.mutation.SetMaxTickersPerIndustry(v)
	}
	if _, ok := sc.mutation.LastYearInventResult(); !ok {
		v := strategy.DefaultLastYearInventResult
		sc.mutation.SetLastYearInventResult(v)
	}
	if _, ok := sc.mutation.LastYearYield(); !ok {
		v := strategy.DefaultLastYearYield
		sc.mutation.SetLastYearYield(v)
	}
	if _, ok := sc.mutation.Last3YearsInvertResult(); !ok {
		v := strategy.DefaultLast3YearsInvertResult
		sc.mutation.SetLast3YearsInvertResult(v)
	}
	if _, ok := sc.mutation.Last3YearsYield(); !ok {
		v := strategy.DefaultLast3YearsYield
		sc.mutation.SetLast3YearsYield(v)
	}
	if _, ok := sc.mutation.StartSimulation(); !ok {
		v := strategy.DefaultStartSimulation
		sc.mutation.SetStartSimulation(v)
	}
	if _, ok := sc.mutation.BuyOnlyLowPrice(); !ok {
		v := strategy.DefaultBuyOnlyLowPrice
		sc.mutation.SetBuyOnlyLowPrice(v)
	}
	if _, ok := sc.mutation.AllowLossWhenSell(); !ok {
		v := strategy.DefaultAllowLossWhenSell
		sc.mutation.SetAllowLossWhenSell(v)
	}
	if _, ok := sc.mutation.SameEmitent(); !ok {
		v := strategy.DefaultSameEmitent
		sc.mutation.SetSameEmitent(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := strategy.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StrategyCreate) check() error {
	if _, ok := sc.mutation.Descr(); !ok {
		return &ValidationError{Name: "Descr", err: errors.New(`ent: missing required field "Strategy.Descr"`)}
	}
	if v, ok := sc.mutation.Descr(); ok {
		if err := strategy.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "Strategy.Descr": %w`, err)}
		}
	}
	if _, ok := sc.mutation.MaxTickers(); !ok {
		return &ValidationError{Name: "MaxTickers", err: errors.New(`ent: missing required field "Strategy.MaxTickers"`)}
	}
	if v, ok := sc.mutation.MaxTickers(); ok {
		if err := strategy.MaxTickersValidator(v); err != nil {
			return &ValidationError{Name: "MaxTickers", err: fmt.Errorf(`ent: validator failed for field "Strategy.MaxTickers": %w`, err)}
		}
	}
	if _, ok := sc.mutation.MaxTickersPerIndustry(); !ok {
		return &ValidationError{Name: "MaxTickersPerIndustry", err: errors.New(`ent: missing required field "Strategy.MaxTickersPerIndustry"`)}
	}
	if v, ok := sc.mutation.MaxTickersPerIndustry(); ok {
		if err := strategy.MaxTickersPerIndustryValidator(v); err != nil {
			return &ValidationError{Name: "MaxTickersPerIndustry", err: fmt.Errorf(`ent: validator failed for field "Strategy.MaxTickersPerIndustry": %w`, err)}
		}
	}
	if v, ok := sc.mutation.BaseIndex(); ok {
		if err := strategy.BaseIndexValidator(v); err != nil {
			return &ValidationError{Name: "BaseIndex", err: fmt.Errorf(`ent: validator failed for field "Strategy.BaseIndex": %w`, err)}
		}
	}
	if _, ok := sc.mutation.LastYearInventResult(); !ok {
		return &ValidationError{Name: "LastYearInventResult", err: errors.New(`ent: missing required field "Strategy.LastYearInventResult"`)}
	}
	if _, ok := sc.mutation.LastYearYield(); !ok {
		return &ValidationError{Name: "LastYearYield", err: errors.New(`ent: missing required field "Strategy.LastYearYield"`)}
	}
	if _, ok := sc.mutation.Last3YearsInvertResult(); !ok {
		return &ValidationError{Name: "Last3YearsInvertResult", err: errors.New(`ent: missing required field "Strategy.Last3YearsInvertResult"`)}
	}
	if _, ok := sc.mutation.Last3YearsYield(); !ok {
		return &ValidationError{Name: "Last3YearsYield", err: errors.New(`ent: missing required field "Strategy.Last3YearsYield"`)}
	}
	if _, ok := sc.mutation.WeekRefillAmount(); !ok {
		return &ValidationError{Name: "WeekRefillAmount", err: errors.New(`ent: missing required field "Strategy.WeekRefillAmount"`)}
	}
	if v, ok := sc.mutation.WeekRefillAmount(); ok {
		if err := strategy.WeekRefillAmountValidator(v); err != nil {
			return &ValidationError{Name: "WeekRefillAmount", err: fmt.Errorf(`ent: validator failed for field "Strategy.WeekRefillAmount": %w`, err)}
		}
	}
	if _, ok := sc.mutation.StartAmount(); !ok {
		return &ValidationError{Name: "StartAmount", err: errors.New(`ent: missing required field "Strategy.StartAmount"`)}
	}
	if v, ok := sc.mutation.StartAmount(); ok {
		if err := strategy.StartAmountValidator(v); err != nil {
			return &ValidationError{Name: "StartAmount", err: fmt.Errorf(`ent: validator failed for field "Strategy.StartAmount": %w`, err)}
		}
	}
	if _, ok := sc.mutation.StartSimulation(); !ok {
		return &ValidationError{Name: "StartSimulation", err: errors.New(`ent: missing required field "Strategy.StartSimulation"`)}
	}
	if _, ok := sc.mutation.BuyOnlyLowPrice(); !ok {
		return &ValidationError{Name: "BuyOnlyLowPrice", err: errors.New(`ent: missing required field "Strategy.BuyOnlyLowPrice"`)}
	}
	if _, ok := sc.mutation.AllowLossWhenSell(); !ok {
		return &ValidationError{Name: "AllowLossWhenSell", err: errors.New(`ent: missing required field "Strategy.AllowLossWhenSell"`)}
	}
	if _, ok := sc.mutation.SameEmitent(); !ok {
		return &ValidationError{Name: "SameEmitent", err: errors.New(`ent: missing required field "Strategy.SameEmitent"`)}
	}
	if v, ok := sc.mutation.SameEmitent(); ok {
		if err := strategy.SameEmitentValidator(v); err != nil {
			return &ValidationError{Name: "SameEmitent", err: fmt.Errorf(`ent: validator failed for field "Strategy.SameEmitent": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := strategy.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Strategy.id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "User", err: errors.New(`ent: missing required edge "Strategy.User"`)}
	}
	return nil
}

func (sc *StrategyCreate) sqlSave(ctx context.Context) (*Strategy, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *StrategyCreate) createSpec() (*Strategy, *sqlgraph.CreateSpec) {
	var (
		_node = &Strategy{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: strategy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategy.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Descr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategy.FieldDescr,
		})
		_node.Descr = value
	}
	if value, ok := sc.mutation.MaxTickers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickers,
		})
		_node.MaxTickers = value
	}
	if value, ok := sc.mutation.MaxTickersPerIndustry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldMaxTickersPerIndustry,
		})
		_node.MaxTickersPerIndustry = value
	}
	if value, ok := sc.mutation.BaseIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategy.FieldBaseIndex,
		})
		_node.BaseIndex = value
	}
	if value, ok := sc.mutation.LastYearInventResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearInventResult,
		})
		_node.LastYearInventResult = value
	}
	if value, ok := sc.mutation.LastYearYield(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLastYearYield,
		})
		_node.LastYearYield = value
	}
	if value, ok := sc.mutation.Last3YearsInvertResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsInvertResult,
		})
		_node.Last3YearsInvertResult = value
	}
	if value, ok := sc.mutation.Last3YearsYield(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldLast3YearsYield,
		})
		_node.Last3YearsYield = value
	}
	if value, ok := sc.mutation.WeekRefillAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldWeekRefillAmount,
		})
		_node.WeekRefillAmount = value
	}
	if value, ok := sc.mutation.StartAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: strategy.FieldStartAmount,
		})
		_node.StartAmount = value
	}
	if value, ok := sc.mutation.StartSimulation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: strategy.FieldStartSimulation,
		})
		_node.StartSimulation = value
	}
	if value, ok := sc.mutation.BuyOnlyLowPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldBuyOnlyLowPrice,
		})
		_node.BuyOnlyLowPrice = value
	}
	if value, ok := sc.mutation.AllowLossWhenSell(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategy.FieldAllowLossWhenSell,
		})
		_node.AllowLossWhenSell = value
	}
	if value, ok := sc.mutation.SameEmitent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategy.FieldSameEmitent,
		})
		_node.SameEmitent = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_strategies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FactorsTable,
			Columns: []string{strategy.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfactor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FiltersTable,
			Columns: []string{strategy.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FixedTickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.FixedTickersTable,
			Columns: []string{strategy.FixedTickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategyfixedticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StrategyCreateBulk is the builder for creating many Strategy entities in bulk.
type StrategyCreateBulk struct {
	config
	builders []*StrategyCreate
}

// Save creates the Strategy entities in the database.
func (scb *StrategyCreateBulk) Save(ctx context.Context) ([]*Strategy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Strategy, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StrategyCreateBulk) SaveX(ctx context.Context) []*Strategy {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StrategyCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
