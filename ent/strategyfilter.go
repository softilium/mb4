// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/domains"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfilter"
)

// StrategyFilter is the model entity for the StrategyFilter schema.
type StrategyFilter struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// LineNum holds the value of the "LineNum" field.
	LineNum int `json:"LineNum,omitempty"`
	// IsUsed holds the value of the "IsUsed" field.
	IsUsed bool `json:"IsUsed,omitempty"`
	// LeftValueKind holds the value of the "LeftValueKind" field.
	LeftValueKind domains.FilterValueKind `json:"LeftValueKind,omitempty"`
	// LeftReportValue holds the value of the "LeftReportValue" field.
	LeftReportValue domains.ReportValue `json:"LeftReportValue,omitempty"`
	// LeftReportValueType holds the value of the "LeftReportValueType" field.
	LeftReportValueType domains.ReportValueType `json:"LeftReportValueType,omitempty"`
	// Operation holds the value of the "Operation" field.
	Operation domains.FilterOp `json:"Operation,omitempty"`
	// RightValueStr holds the value of the "RightValueStr" field.
	RightValueStr string `json:"RightValueStr,omitempty"`
	// RightValueFloat holds the value of the "RightValueFloat" field.
	RightValueFloat float64 `json:"RightValueFloat,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyFilterQuery when eager-loading is set.
	Edges            StrategyFilterEdges `json:"edges"`
	strategy_filters *xid.ID
}

// StrategyFilterEdges holds the relations/edges for other nodes in the graph.
type StrategyFilterEdges struct {
	// Strategy holds the value of the Strategy edge.
	Strategy *Strategy `json:"Strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyFilterEdges) StrategyOrErr() (*Strategy, error) {
	if e.loadedTypes[0] {
		if e.Strategy == nil {
			// The edge Strategy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: strategy.Label}
		}
		return e.Strategy, nil
	}
	return nil, &NotLoadedError{edge: "Strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyFilter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategyfilter.FieldIsUsed:
			values[i] = new(sql.NullBool)
		case strategyfilter.FieldRightValueFloat:
			values[i] = new(sql.NullFloat64)
		case strategyfilter.FieldLineNum, strategyfilter.FieldLeftValueKind, strategyfilter.FieldLeftReportValue, strategyfilter.FieldLeftReportValueType, strategyfilter.FieldOperation:
			values[i] = new(sql.NullInt64)
		case strategyfilter.FieldRightValueStr:
			values[i] = new(sql.NullString)
		case strategyfilter.FieldID:
			values[i] = new(xid.ID)
		case strategyfilter.ForeignKeys[0]: // strategy_filters
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StrategyFilter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyFilter fields.
func (sf *StrategyFilter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategyfilter.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sf.ID = *value
			}
		case strategyfilter.FieldLineNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LineNum", values[i])
			} else if value.Valid {
				sf.LineNum = int(value.Int64)
			}
		case strategyfilter.FieldIsUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsUsed", values[i])
			} else if value.Valid {
				sf.IsUsed = value.Bool
			}
		case strategyfilter.FieldLeftValueKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LeftValueKind", values[i])
			} else if value.Valid {
				sf.LeftValueKind = domains.FilterValueKind(value.Int64)
			}
		case strategyfilter.FieldLeftReportValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LeftReportValue", values[i])
			} else if value.Valid {
				sf.LeftReportValue = domains.ReportValue(value.Int64)
			}
		case strategyfilter.FieldLeftReportValueType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LeftReportValueType", values[i])
			} else if value.Valid {
				sf.LeftReportValueType = domains.ReportValueType(value.Int64)
			}
		case strategyfilter.FieldOperation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Operation", values[i])
			} else if value.Valid {
				sf.Operation = domains.FilterOp(value.Int64)
			}
		case strategyfilter.FieldRightValueStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RightValueStr", values[i])
			} else if value.Valid {
				sf.RightValueStr = value.String
			}
		case strategyfilter.FieldRightValueFloat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field RightValueFloat", values[i])
			} else if value.Valid {
				sf.RightValueFloat = value.Float64
			}
		case strategyfilter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_filters", values[i])
			} else if value.Valid {
				sf.strategy_filters = new(xid.ID)
				*sf.strategy_filters = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryStrategy queries the "Strategy" edge of the StrategyFilter entity.
func (sf *StrategyFilter) QueryStrategy() *StrategyQuery {
	return (&StrategyFilterClient{config: sf.config}).QueryStrategy(sf)
}

// Update returns a builder for updating this StrategyFilter.
// Note that you need to call StrategyFilter.Unwrap() before calling this method if this StrategyFilter
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *StrategyFilter) Update() *StrategyFilterUpdateOne {
	return (&StrategyFilterClient{config: sf.config}).UpdateOne(sf)
}

// Unwrap unwraps the StrategyFilter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *StrategyFilter) Unwrap() *StrategyFilter {
	tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyFilter is not a transactional entity")
	}
	sf.config.driver = tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *StrategyFilter) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyFilter(")
	builder.WriteString(fmt.Sprintf("id=%v", sf.ID))
	builder.WriteString(", LineNum=")
	builder.WriteString(fmt.Sprintf("%v", sf.LineNum))
	builder.WriteString(", IsUsed=")
	builder.WriteString(fmt.Sprintf("%v", sf.IsUsed))
	builder.WriteString(", LeftValueKind=")
	builder.WriteString(fmt.Sprintf("%v", sf.LeftValueKind))
	builder.WriteString(", LeftReportValue=")
	builder.WriteString(fmt.Sprintf("%v", sf.LeftReportValue))
	builder.WriteString(", LeftReportValueType=")
	builder.WriteString(fmt.Sprintf("%v", sf.LeftReportValueType))
	builder.WriteString(", Operation=")
	builder.WriteString(fmt.Sprintf("%v", sf.Operation))
	builder.WriteString(", RightValueStr=")
	builder.WriteString(sf.RightValueStr)
	builder.WriteString(", RightValueFloat=")
	builder.WriteString(fmt.Sprintf("%v", sf.RightValueFloat))
	builder.WriteByte(')')
	return builder.String()
}

// StrategyFilters is a parsable slice of StrategyFilter.
type StrategyFilters []*StrategyFilter

func (sf StrategyFilters) config(cfg config) {
	for _i := range sf {
		sf[_i].config = cfg
	}
}
