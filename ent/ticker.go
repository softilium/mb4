// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/ticker"
)

// Ticker is the model entity for the Ticker schema.
type Ticker struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Descr holds the value of the "Descr" field.
	Descr string `json:"Descr,omitempty"`
	// Kind holds the value of the "Kind" field.
	Kind int32 `json:"Kind,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TickerQuery when eager-loading is set.
	Edges           TickerEdges `json:"edges"`
	emitent_tickers *xid.ID
}

// TickerEdges holds the relations/edges for other nodes in the graph.
type TickerEdges struct {
	// Emitent holds the value of the Emitent edge.
	Emitent *Emitent `json:"Emitent,omitempty"`
	// Quotes holds the value of the Quotes edge.
	Quotes []*Quote `json:"Quotes,omitempty"`
	// DivPayouts holds the value of the DivPayouts edge.
	DivPayouts []*DivPayout `json:"DivPayouts,omitempty"`
	// Emissions holds the value of the Emissions edge.
	Emissions []*Emission `json:"Emissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EmitentOrErr returns the Emitent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TickerEdges) EmitentOrErr() (*Emitent, error) {
	if e.loadedTypes[0] {
		if e.Emitent == nil {
			// The edge Emitent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: emitent.Label}
		}
		return e.Emitent, nil
	}
	return nil, &NotLoadedError{edge: "Emitent"}
}

// QuotesOrErr returns the Quotes value or an error if the edge
// was not loaded in eager-loading.
func (e TickerEdges) QuotesOrErr() ([]*Quote, error) {
	if e.loadedTypes[1] {
		return e.Quotes, nil
	}
	return nil, &NotLoadedError{edge: "Quotes"}
}

// DivPayoutsOrErr returns the DivPayouts value or an error if the edge
// was not loaded in eager-loading.
func (e TickerEdges) DivPayoutsOrErr() ([]*DivPayout, error) {
	if e.loadedTypes[2] {
		return e.DivPayouts, nil
	}
	return nil, &NotLoadedError{edge: "DivPayouts"}
}

// EmissionsOrErr returns the Emissions value or an error if the edge
// was not loaded in eager-loading.
func (e TickerEdges) EmissionsOrErr() ([]*Emission, error) {
	if e.loadedTypes[3] {
		return e.Emissions, nil
	}
	return nil, &NotLoadedError{edge: "Emissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticker) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticker.FieldKind:
			values[i] = new(sql.NullInt64)
		case ticker.FieldID, ticker.FieldDescr:
			values[i] = new(sql.NullString)
		case ticker.ForeignKeys[0]: // emitent_tickers
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ticker", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticker fields.
func (t *Ticker) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticker.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case ticker.FieldDescr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Descr", values[i])
			} else if value.Valid {
				t.Descr = value.String
			}
		case ticker.FieldKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Kind", values[i])
			} else if value.Valid {
				t.Kind = int32(value.Int64)
			}
		case ticker.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field emitent_tickers", values[i])
			} else if value.Valid {
				t.emitent_tickers = new(xid.ID)
				*t.emitent_tickers = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryEmitent queries the "Emitent" edge of the Ticker entity.
func (t *Ticker) QueryEmitent() *EmitentQuery {
	return (&TickerClient{config: t.config}).QueryEmitent(t)
}

// QueryQuotes queries the "Quotes" edge of the Ticker entity.
func (t *Ticker) QueryQuotes() *QuoteQuery {
	return (&TickerClient{config: t.config}).QueryQuotes(t)
}

// QueryDivPayouts queries the "DivPayouts" edge of the Ticker entity.
func (t *Ticker) QueryDivPayouts() *DivPayoutQuery {
	return (&TickerClient{config: t.config}).QueryDivPayouts(t)
}

// QueryEmissions queries the "Emissions" edge of the Ticker entity.
func (t *Ticker) QueryEmissions() *EmissionQuery {
	return (&TickerClient{config: t.config}).QueryEmissions(t)
}

// Update returns a builder for updating this Ticker.
// Note that you need to call Ticker.Unwrap() before calling this method if this Ticker
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticker) Update() *TickerUpdateOne {
	return (&TickerClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Ticker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticker) Unwrap() *Ticker {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticker is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticker) String() string {
	var builder strings.Builder
	builder.WriteString("Ticker(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Descr=")
	builder.WriteString(t.Descr)
	builder.WriteString(", Kind=")
	builder.WriteString(fmt.Sprintf("%v", t.Kind))
	builder.WriteByte(')')
	return builder.String()
}

// Tickers is a parsable slice of Ticker.
type Tickers []*Ticker

func (t Tickers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
