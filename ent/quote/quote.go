// Code generated by entc, DO NOT EDIT.

package quote

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the quote type in the database.
	Label = "quote"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldD holds the string denoting the d field in the database.
	FieldD = "d"
	// FieldO holds the string denoting the o field in the database.
	FieldO = "o"
	// FieldC holds the string denoting the c field in the database.
	FieldC = "c"
	// FieldH holds the string denoting the h field in the database.
	FieldH = "h"
	// FieldL holds the string denoting the l field in the database.
	FieldL = "l"
	// FieldV holds the string denoting the v field in the database.
	FieldV = "v"
	// EdgeTicker holds the string denoting the ticker edge name in mutations.
	EdgeTicker = "Ticker"
	// Table holds the table name of the quote in the database.
	Table = "quotes"
	// TickerTable is the table that holds the Ticker relation/edge.
	TickerTable = "quotes"
	// TickerInverseTable is the table name for the Ticker entity.
	// It exists in this package in order to avoid circular dependency with the "ticker" package.
	TickerInverseTable = "tickers"
	// TickerColumn is the table column denoting the Ticker relation/edge.
	TickerColumn = "ticker_quotes"
)

// Columns holds all SQL columns for quote fields.
var Columns = []string{
	FieldID,
	FieldD,
	FieldO,
	FieldC,
	FieldH,
	FieldL,
	FieldV,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "quotes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ticker_quotes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
