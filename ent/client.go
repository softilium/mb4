// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/migrate"

	"github.com/softilium/mb4/ent/divpayout"
	"github.com/softilium/mb4/ent/emission"
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/industry"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountcashflow"
	"github.com/softilium/mb4/ent/investaccountvaluation"
	"github.com/softilium/mb4/ent/quote"
	"github.com/softilium/mb4/ent/report"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfactor"
	"github.com/softilium/mb4/ent/strategyfilter"
	"github.com/softilium/mb4/ent/strategyfixedticker"
	"github.com/softilium/mb4/ent/ticker"
	"github.com/softilium/mb4/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DivPayout is the client for interacting with the DivPayout builders.
	DivPayout *DivPayoutClient
	// Emission is the client for interacting with the Emission builders.
	Emission *EmissionClient
	// Emitent is the client for interacting with the Emitent builders.
	Emitent *EmitentClient
	// Industry is the client for interacting with the Industry builders.
	Industry *IndustryClient
	// InvestAccount is the client for interacting with the InvestAccount builders.
	InvestAccount *InvestAccountClient
	// InvestAccountCashflow is the client for interacting with the InvestAccountCashflow builders.
	InvestAccountCashflow *InvestAccountCashflowClient
	// InvestAccountValuation is the client for interacting with the InvestAccountValuation builders.
	InvestAccountValuation *InvestAccountValuationClient
	// Quote is the client for interacting with the Quote builders.
	Quote *QuoteClient
	// Report is the client for interacting with the Report builders.
	Report *ReportClient
	// Strategy is the client for interacting with the Strategy builders.
	Strategy *StrategyClient
	// StrategyFactor is the client for interacting with the StrategyFactor builders.
	StrategyFactor *StrategyFactorClient
	// StrategyFilter is the client for interacting with the StrategyFilter builders.
	StrategyFilter *StrategyFilterClient
	// StrategyFixedTicker is the client for interacting with the StrategyFixedTicker builders.
	StrategyFixedTicker *StrategyFixedTickerClient
	// Ticker is the client for interacting with the Ticker builders.
	Ticker *TickerClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DivPayout = NewDivPayoutClient(c.config)
	c.Emission = NewEmissionClient(c.config)
	c.Emitent = NewEmitentClient(c.config)
	c.Industry = NewIndustryClient(c.config)
	c.InvestAccount = NewInvestAccountClient(c.config)
	c.InvestAccountCashflow = NewInvestAccountCashflowClient(c.config)
	c.InvestAccountValuation = NewInvestAccountValuationClient(c.config)
	c.Quote = NewQuoteClient(c.config)
	c.Report = NewReportClient(c.config)
	c.Strategy = NewStrategyClient(c.config)
	c.StrategyFactor = NewStrategyFactorClient(c.config)
	c.StrategyFilter = NewStrategyFilterClient(c.config)
	c.StrategyFixedTicker = NewStrategyFixedTickerClient(c.config)
	c.Ticker = NewTickerClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		DivPayout:              NewDivPayoutClient(cfg),
		Emission:               NewEmissionClient(cfg),
		Emitent:                NewEmitentClient(cfg),
		Industry:               NewIndustryClient(cfg),
		InvestAccount:          NewInvestAccountClient(cfg),
		InvestAccountCashflow:  NewInvestAccountCashflowClient(cfg),
		InvestAccountValuation: NewInvestAccountValuationClient(cfg),
		Quote:                  NewQuoteClient(cfg),
		Report:                 NewReportClient(cfg),
		Strategy:               NewStrategyClient(cfg),
		StrategyFactor:         NewStrategyFactorClient(cfg),
		StrategyFilter:         NewStrategyFilterClient(cfg),
		StrategyFixedTicker:    NewStrategyFixedTickerClient(cfg),
		Ticker:                 NewTickerClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		DivPayout:              NewDivPayoutClient(cfg),
		Emission:               NewEmissionClient(cfg),
		Emitent:                NewEmitentClient(cfg),
		Industry:               NewIndustryClient(cfg),
		InvestAccount:          NewInvestAccountClient(cfg),
		InvestAccountCashflow:  NewInvestAccountCashflowClient(cfg),
		InvestAccountValuation: NewInvestAccountValuationClient(cfg),
		Quote:                  NewQuoteClient(cfg),
		Report:                 NewReportClient(cfg),
		Strategy:               NewStrategyClient(cfg),
		StrategyFactor:         NewStrategyFactorClient(cfg),
		StrategyFilter:         NewStrategyFilterClient(cfg),
		StrategyFixedTicker:    NewStrategyFixedTickerClient(cfg),
		Ticker:                 NewTickerClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DivPayout.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DivPayout.Use(hooks...)
	c.Emission.Use(hooks...)
	c.Emitent.Use(hooks...)
	c.Industry.Use(hooks...)
	c.InvestAccount.Use(hooks...)
	c.InvestAccountCashflow.Use(hooks...)
	c.InvestAccountValuation.Use(hooks...)
	c.Quote.Use(hooks...)
	c.Report.Use(hooks...)
	c.Strategy.Use(hooks...)
	c.StrategyFactor.Use(hooks...)
	c.StrategyFilter.Use(hooks...)
	c.StrategyFixedTicker.Use(hooks...)
	c.Ticker.Use(hooks...)
	c.User.Use(hooks...)
}

// DivPayoutClient is a client for the DivPayout schema.
type DivPayoutClient struct {
	config
}

// NewDivPayoutClient returns a client for the DivPayout from the given config.
func NewDivPayoutClient(c config) *DivPayoutClient {
	return &DivPayoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `divpayout.Hooks(f(g(h())))`.
func (c *DivPayoutClient) Use(hooks ...Hook) {
	c.hooks.DivPayout = append(c.hooks.DivPayout, hooks...)
}

// Create returns a create builder for DivPayout.
func (c *DivPayoutClient) Create() *DivPayoutCreate {
	mutation := newDivPayoutMutation(c.config, OpCreate)
	return &DivPayoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DivPayout entities.
func (c *DivPayoutClient) CreateBulk(builders ...*DivPayoutCreate) *DivPayoutCreateBulk {
	return &DivPayoutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DivPayout.
func (c *DivPayoutClient) Update() *DivPayoutUpdate {
	mutation := newDivPayoutMutation(c.config, OpUpdate)
	return &DivPayoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivPayoutClient) UpdateOne(dp *DivPayout) *DivPayoutUpdateOne {
	mutation := newDivPayoutMutation(c.config, OpUpdateOne, withDivPayout(dp))
	return &DivPayoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivPayoutClient) UpdateOneID(id int) *DivPayoutUpdateOne {
	mutation := newDivPayoutMutation(c.config, OpUpdateOne, withDivPayoutID(id))
	return &DivPayoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DivPayout.
func (c *DivPayoutClient) Delete() *DivPayoutDelete {
	mutation := newDivPayoutMutation(c.config, OpDelete)
	return &DivPayoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DivPayoutClient) DeleteOne(dp *DivPayout) *DivPayoutDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DivPayoutClient) DeleteOneID(id int) *DivPayoutDeleteOne {
	builder := c.Delete().Where(divpayout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivPayoutDeleteOne{builder}
}

// Query returns a query builder for DivPayout.
func (c *DivPayoutClient) Query() *DivPayoutQuery {
	return &DivPayoutQuery{
		config: c.config,
	}
}

// Get returns a DivPayout entity by its id.
func (c *DivPayoutClient) Get(ctx context.Context, id int) (*DivPayout, error) {
	return c.Query().Where(divpayout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivPayoutClient) GetX(ctx context.Context, id int) *DivPayout {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTickers queries the Tickers edge of a DivPayout.
func (c *DivPayoutClient) QueryTickers(dp *DivPayout) *TickerQuery {
	query := &TickerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(divpayout.Table, divpayout.FieldID, id),
			sqlgraph.To(ticker.Table, ticker.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, divpayout.TickersTable, divpayout.TickersColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivPayoutClient) Hooks() []Hook {
	return c.hooks.DivPayout
}

// EmissionClient is a client for the Emission schema.
type EmissionClient struct {
	config
}

// NewEmissionClient returns a client for the Emission from the given config.
func NewEmissionClient(c config) *EmissionClient {
	return &EmissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emission.Hooks(f(g(h())))`.
func (c *EmissionClient) Use(hooks ...Hook) {
	c.hooks.Emission = append(c.hooks.Emission, hooks...)
}

// Create returns a create builder for Emission.
func (c *EmissionClient) Create() *EmissionCreate {
	mutation := newEmissionMutation(c.config, OpCreate)
	return &EmissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Emission entities.
func (c *EmissionClient) CreateBulk(builders ...*EmissionCreate) *EmissionCreateBulk {
	return &EmissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Emission.
func (c *EmissionClient) Update() *EmissionUpdate {
	mutation := newEmissionMutation(c.config, OpUpdate)
	return &EmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmissionClient) UpdateOne(e *Emission) *EmissionUpdateOne {
	mutation := newEmissionMutation(c.config, OpUpdateOne, withEmission(e))
	return &EmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmissionClient) UpdateOneID(id xid.ID) *EmissionUpdateOne {
	mutation := newEmissionMutation(c.config, OpUpdateOne, withEmissionID(id))
	return &EmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Emission.
func (c *EmissionClient) Delete() *EmissionDelete {
	mutation := newEmissionMutation(c.config, OpDelete)
	return &EmissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmissionClient) DeleteOne(e *Emission) *EmissionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmissionClient) DeleteOneID(id xid.ID) *EmissionDeleteOne {
	builder := c.Delete().Where(emission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmissionDeleteOne{builder}
}

// Query returns a query builder for Emission.
func (c *EmissionClient) Query() *EmissionQuery {
	return &EmissionQuery{
		config: c.config,
	}
}

// Get returns a Emission entity by its id.
func (c *EmissionClient) Get(ctx context.Context, id xid.ID) (*Emission, error) {
	return c.Query().Where(emission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmissionClient) GetX(ctx context.Context, id xid.ID) *Emission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicker queries the Ticker edge of a Emission.
func (c *EmissionClient) QueryTicker(e *Emission) *TickerQuery {
	query := &TickerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emission.Table, emission.FieldID, id),
			sqlgraph.To(ticker.Table, ticker.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emission.TickerTable, emission.TickerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmissionClient) Hooks() []Hook {
	return c.hooks.Emission
}

// EmitentClient is a client for the Emitent schema.
type EmitentClient struct {
	config
}

// NewEmitentClient returns a client for the Emitent from the given config.
func NewEmitentClient(c config) *EmitentClient {
	return &EmitentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emitent.Hooks(f(g(h())))`.
func (c *EmitentClient) Use(hooks ...Hook) {
	c.hooks.Emitent = append(c.hooks.Emitent, hooks...)
}

// Create returns a create builder for Emitent.
func (c *EmitentClient) Create() *EmitentCreate {
	mutation := newEmitentMutation(c.config, OpCreate)
	return &EmitentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Emitent entities.
func (c *EmitentClient) CreateBulk(builders ...*EmitentCreate) *EmitentCreateBulk {
	return &EmitentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Emitent.
func (c *EmitentClient) Update() *EmitentUpdate {
	mutation := newEmitentMutation(c.config, OpUpdate)
	return &EmitentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmitentClient) UpdateOne(e *Emitent) *EmitentUpdateOne {
	mutation := newEmitentMutation(c.config, OpUpdateOne, withEmitent(e))
	return &EmitentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmitentClient) UpdateOneID(id xid.ID) *EmitentUpdateOne {
	mutation := newEmitentMutation(c.config, OpUpdateOne, withEmitentID(id))
	return &EmitentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Emitent.
func (c *EmitentClient) Delete() *EmitentDelete {
	mutation := newEmitentMutation(c.config, OpDelete)
	return &EmitentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmitentClient) DeleteOne(e *Emitent) *EmitentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmitentClient) DeleteOneID(id xid.ID) *EmitentDeleteOne {
	builder := c.Delete().Where(emitent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmitentDeleteOne{builder}
}

// Query returns a query builder for Emitent.
func (c *EmitentClient) Query() *EmitentQuery {
	return &EmitentQuery{
		config: c.config,
	}
}

// Get returns a Emitent entity by its id.
func (c *EmitentClient) Get(ctx context.Context, id xid.ID) (*Emitent, error) {
	return c.Query().Where(emitent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmitentClient) GetX(ctx context.Context, id xid.ID) *Emitent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIndustry queries the Industry edge of a Emitent.
func (c *EmitentClient) QueryIndustry(e *Emitent) *IndustryQuery {
	query := &IndustryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emitent.Table, emitent.FieldID, id),
			sqlgraph.To(industry.Table, industry.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emitent.IndustryTable, emitent.IndustryColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTickers queries the Tickers edge of a Emitent.
func (c *EmitentClient) QueryTickers(e *Emitent) *TickerQuery {
	query := &TickerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emitent.Table, emitent.FieldID, id),
			sqlgraph.To(ticker.Table, ticker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, emitent.TickersTable, emitent.TickersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReports queries the Reports edge of a Emitent.
func (c *EmitentClient) QueryReports(e *Emitent) *ReportQuery {
	query := &ReportQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emitent.Table, emitent.FieldID, id),
			sqlgraph.To(report.Table, report.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, emitent.ReportsTable, emitent.ReportsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmitentClient) Hooks() []Hook {
	return c.hooks.Emitent
}

// IndustryClient is a client for the Industry schema.
type IndustryClient struct {
	config
}

// NewIndustryClient returns a client for the Industry from the given config.
func NewIndustryClient(c config) *IndustryClient {
	return &IndustryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `industry.Hooks(f(g(h())))`.
func (c *IndustryClient) Use(hooks ...Hook) {
	c.hooks.Industry = append(c.hooks.Industry, hooks...)
}

// Create returns a create builder for Industry.
func (c *IndustryClient) Create() *IndustryCreate {
	mutation := newIndustryMutation(c.config, OpCreate)
	return &IndustryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Industry entities.
func (c *IndustryClient) CreateBulk(builders ...*IndustryCreate) *IndustryCreateBulk {
	return &IndustryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Industry.
func (c *IndustryClient) Update() *IndustryUpdate {
	mutation := newIndustryMutation(c.config, OpUpdate)
	return &IndustryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IndustryClient) UpdateOne(i *Industry) *IndustryUpdateOne {
	mutation := newIndustryMutation(c.config, OpUpdateOne, withIndustry(i))
	return &IndustryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IndustryClient) UpdateOneID(id string) *IndustryUpdateOne {
	mutation := newIndustryMutation(c.config, OpUpdateOne, withIndustryID(id))
	return &IndustryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Industry.
func (c *IndustryClient) Delete() *IndustryDelete {
	mutation := newIndustryMutation(c.config, OpDelete)
	return &IndustryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IndustryClient) DeleteOne(i *Industry) *IndustryDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IndustryClient) DeleteOneID(id string) *IndustryDeleteOne {
	builder := c.Delete().Where(industry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IndustryDeleteOne{builder}
}

// Query returns a query builder for Industry.
func (c *IndustryClient) Query() *IndustryQuery {
	return &IndustryQuery{
		config: c.config,
	}
}

// Get returns a Industry entity by its id.
func (c *IndustryClient) Get(ctx context.Context, id string) (*Industry, error) {
	return c.Query().Where(industry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IndustryClient) GetX(ctx context.Context, id string) *Industry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmitents queries the Emitents edge of a Industry.
func (c *IndustryClient) QueryEmitents(i *Industry) *EmitentQuery {
	query := &EmitentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(industry.Table, industry.FieldID, id),
			sqlgraph.To(emitent.Table, emitent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, industry.EmitentsTable, industry.EmitentsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IndustryClient) Hooks() []Hook {
	return c.hooks.Industry
}

// InvestAccountClient is a client for the InvestAccount schema.
type InvestAccountClient struct {
	config
}

// NewInvestAccountClient returns a client for the InvestAccount from the given config.
func NewInvestAccountClient(c config) *InvestAccountClient {
	return &InvestAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `investaccount.Hooks(f(g(h())))`.
func (c *InvestAccountClient) Use(hooks ...Hook) {
	c.hooks.InvestAccount = append(c.hooks.InvestAccount, hooks...)
}

// Create returns a create builder for InvestAccount.
func (c *InvestAccountClient) Create() *InvestAccountCreate {
	mutation := newInvestAccountMutation(c.config, OpCreate)
	return &InvestAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvestAccount entities.
func (c *InvestAccountClient) CreateBulk(builders ...*InvestAccountCreate) *InvestAccountCreateBulk {
	return &InvestAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvestAccount.
func (c *InvestAccountClient) Update() *InvestAccountUpdate {
	mutation := newInvestAccountMutation(c.config, OpUpdate)
	return &InvestAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvestAccountClient) UpdateOne(ia *InvestAccount) *InvestAccountUpdateOne {
	mutation := newInvestAccountMutation(c.config, OpUpdateOne, withInvestAccount(ia))
	return &InvestAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvestAccountClient) UpdateOneID(id xid.ID) *InvestAccountUpdateOne {
	mutation := newInvestAccountMutation(c.config, OpUpdateOne, withInvestAccountID(id))
	return &InvestAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvestAccount.
func (c *InvestAccountClient) Delete() *InvestAccountDelete {
	mutation := newInvestAccountMutation(c.config, OpDelete)
	return &InvestAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InvestAccountClient) DeleteOne(ia *InvestAccount) *InvestAccountDeleteOne {
	return c.DeleteOneID(ia.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InvestAccountClient) DeleteOneID(id xid.ID) *InvestAccountDeleteOne {
	builder := c.Delete().Where(investaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvestAccountDeleteOne{builder}
}

// Query returns a query builder for InvestAccount.
func (c *InvestAccountClient) Query() *InvestAccountQuery {
	return &InvestAccountQuery{
		config: c.config,
	}
}

// Get returns a InvestAccount entity by its id.
func (c *InvestAccountClient) Get(ctx context.Context, id xid.ID) (*InvestAccount, error) {
	return c.Query().Where(investaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvestAccountClient) GetX(ctx context.Context, id xid.ID) *InvestAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the Owner edge of a InvestAccount.
func (c *InvestAccountClient) QueryOwner(ia *InvestAccount) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccount.Table, investaccount.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, investaccount.OwnerTable, investaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCashflows queries the Cashflows edge of a InvestAccount.
func (c *InvestAccountClient) QueryCashflows(ia *InvestAccount) *InvestAccountCashflowQuery {
	query := &InvestAccountCashflowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccount.Table, investaccount.FieldID, id),
			sqlgraph.To(investaccountcashflow.Table, investaccountcashflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, investaccount.CashflowsTable, investaccount.CashflowsColumn),
		)
		fromV = sqlgraph.Neighbors(ia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValuations queries the Valuations edge of a InvestAccount.
func (c *InvestAccountClient) QueryValuations(ia *InvestAccount) *InvestAccountValuationQuery {
	query := &InvestAccountValuationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccount.Table, investaccount.FieldID, id),
			sqlgraph.To(investaccountvaluation.Table, investaccountvaluation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, investaccount.ValuationsTable, investaccount.ValuationsColumn),
		)
		fromV = sqlgraph.Neighbors(ia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvestAccountClient) Hooks() []Hook {
	return c.hooks.InvestAccount
}

// InvestAccountCashflowClient is a client for the InvestAccountCashflow schema.
type InvestAccountCashflowClient struct {
	config
}

// NewInvestAccountCashflowClient returns a client for the InvestAccountCashflow from the given config.
func NewInvestAccountCashflowClient(c config) *InvestAccountCashflowClient {
	return &InvestAccountCashflowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `investaccountcashflow.Hooks(f(g(h())))`.
func (c *InvestAccountCashflowClient) Use(hooks ...Hook) {
	c.hooks.InvestAccountCashflow = append(c.hooks.InvestAccountCashflow, hooks...)
}

// Create returns a create builder for InvestAccountCashflow.
func (c *InvestAccountCashflowClient) Create() *InvestAccountCashflowCreate {
	mutation := newInvestAccountCashflowMutation(c.config, OpCreate)
	return &InvestAccountCashflowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvestAccountCashflow entities.
func (c *InvestAccountCashflowClient) CreateBulk(builders ...*InvestAccountCashflowCreate) *InvestAccountCashflowCreateBulk {
	return &InvestAccountCashflowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvestAccountCashflow.
func (c *InvestAccountCashflowClient) Update() *InvestAccountCashflowUpdate {
	mutation := newInvestAccountCashflowMutation(c.config, OpUpdate)
	return &InvestAccountCashflowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvestAccountCashflowClient) UpdateOne(iac *InvestAccountCashflow) *InvestAccountCashflowUpdateOne {
	mutation := newInvestAccountCashflowMutation(c.config, OpUpdateOne, withInvestAccountCashflow(iac))
	return &InvestAccountCashflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvestAccountCashflowClient) UpdateOneID(id xid.ID) *InvestAccountCashflowUpdateOne {
	mutation := newInvestAccountCashflowMutation(c.config, OpUpdateOne, withInvestAccountCashflowID(id))
	return &InvestAccountCashflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvestAccountCashflow.
func (c *InvestAccountCashflowClient) Delete() *InvestAccountCashflowDelete {
	mutation := newInvestAccountCashflowMutation(c.config, OpDelete)
	return &InvestAccountCashflowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InvestAccountCashflowClient) DeleteOne(iac *InvestAccountCashflow) *InvestAccountCashflowDeleteOne {
	return c.DeleteOneID(iac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InvestAccountCashflowClient) DeleteOneID(id xid.ID) *InvestAccountCashflowDeleteOne {
	builder := c.Delete().Where(investaccountcashflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvestAccountCashflowDeleteOne{builder}
}

// Query returns a query builder for InvestAccountCashflow.
func (c *InvestAccountCashflowClient) Query() *InvestAccountCashflowQuery {
	return &InvestAccountCashflowQuery{
		config: c.config,
	}
}

// Get returns a InvestAccountCashflow entity by its id.
func (c *InvestAccountCashflowClient) Get(ctx context.Context, id xid.ID) (*InvestAccountCashflow, error) {
	return c.Query().Where(investaccountcashflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvestAccountCashflowClient) GetX(ctx context.Context, id xid.ID) *InvestAccountCashflow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the Owner edge of a InvestAccountCashflow.
func (c *InvestAccountCashflowClient) QueryOwner(iac *InvestAccountCashflow) *InvestAccountQuery {
	query := &InvestAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccountcashflow.Table, investaccountcashflow.FieldID, id),
			sqlgraph.To(investaccount.Table, investaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, investaccountcashflow.OwnerTable, investaccountcashflow.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(iac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvestAccountCashflowClient) Hooks() []Hook {
	return c.hooks.InvestAccountCashflow
}

// InvestAccountValuationClient is a client for the InvestAccountValuation schema.
type InvestAccountValuationClient struct {
	config
}

// NewInvestAccountValuationClient returns a client for the InvestAccountValuation from the given config.
func NewInvestAccountValuationClient(c config) *InvestAccountValuationClient {
	return &InvestAccountValuationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `investaccountvaluation.Hooks(f(g(h())))`.
func (c *InvestAccountValuationClient) Use(hooks ...Hook) {
	c.hooks.InvestAccountValuation = append(c.hooks.InvestAccountValuation, hooks...)
}

// Create returns a create builder for InvestAccountValuation.
func (c *InvestAccountValuationClient) Create() *InvestAccountValuationCreate {
	mutation := newInvestAccountValuationMutation(c.config, OpCreate)
	return &InvestAccountValuationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvestAccountValuation entities.
func (c *InvestAccountValuationClient) CreateBulk(builders ...*InvestAccountValuationCreate) *InvestAccountValuationCreateBulk {
	return &InvestAccountValuationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvestAccountValuation.
func (c *InvestAccountValuationClient) Update() *InvestAccountValuationUpdate {
	mutation := newInvestAccountValuationMutation(c.config, OpUpdate)
	return &InvestAccountValuationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvestAccountValuationClient) UpdateOne(iav *InvestAccountValuation) *InvestAccountValuationUpdateOne {
	mutation := newInvestAccountValuationMutation(c.config, OpUpdateOne, withInvestAccountValuation(iav))
	return &InvestAccountValuationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvestAccountValuationClient) UpdateOneID(id xid.ID) *InvestAccountValuationUpdateOne {
	mutation := newInvestAccountValuationMutation(c.config, OpUpdateOne, withInvestAccountValuationID(id))
	return &InvestAccountValuationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvestAccountValuation.
func (c *InvestAccountValuationClient) Delete() *InvestAccountValuationDelete {
	mutation := newInvestAccountValuationMutation(c.config, OpDelete)
	return &InvestAccountValuationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InvestAccountValuationClient) DeleteOne(iav *InvestAccountValuation) *InvestAccountValuationDeleteOne {
	return c.DeleteOneID(iav.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InvestAccountValuationClient) DeleteOneID(id xid.ID) *InvestAccountValuationDeleteOne {
	builder := c.Delete().Where(investaccountvaluation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvestAccountValuationDeleteOne{builder}
}

// Query returns a query builder for InvestAccountValuation.
func (c *InvestAccountValuationClient) Query() *InvestAccountValuationQuery {
	return &InvestAccountValuationQuery{
		config: c.config,
	}
}

// Get returns a InvestAccountValuation entity by its id.
func (c *InvestAccountValuationClient) Get(ctx context.Context, id xid.ID) (*InvestAccountValuation, error) {
	return c.Query().Where(investaccountvaluation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvestAccountValuationClient) GetX(ctx context.Context, id xid.ID) *InvestAccountValuation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the Owner edge of a InvestAccountValuation.
func (c *InvestAccountValuationClient) QueryOwner(iav *InvestAccountValuation) *InvestAccountQuery {
	query := &InvestAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iav.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investaccountvaluation.Table, investaccountvaluation.FieldID, id),
			sqlgraph.To(investaccount.Table, investaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, investaccountvaluation.OwnerTable, investaccountvaluation.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(iav.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvestAccountValuationClient) Hooks() []Hook {
	return c.hooks.InvestAccountValuation
}

// QuoteClient is a client for the Quote schema.
type QuoteClient struct {
	config
}

// NewQuoteClient returns a client for the Quote from the given config.
func NewQuoteClient(c config) *QuoteClient {
	return &QuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quote.Hooks(f(g(h())))`.
func (c *QuoteClient) Use(hooks ...Hook) {
	c.hooks.Quote = append(c.hooks.Quote, hooks...)
}

// Create returns a create builder for Quote.
func (c *QuoteClient) Create() *QuoteCreate {
	mutation := newQuoteMutation(c.config, OpCreate)
	return &QuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Quote entities.
func (c *QuoteClient) CreateBulk(builders ...*QuoteCreate) *QuoteCreateBulk {
	return &QuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Quote.
func (c *QuoteClient) Update() *QuoteUpdate {
	mutation := newQuoteMutation(c.config, OpUpdate)
	return &QuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuoteClient) UpdateOne(q *Quote) *QuoteUpdateOne {
	mutation := newQuoteMutation(c.config, OpUpdateOne, withQuote(q))
	return &QuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuoteClient) UpdateOneID(id xid.ID) *QuoteUpdateOne {
	mutation := newQuoteMutation(c.config, OpUpdateOne, withQuoteID(id))
	return &QuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quote.
func (c *QuoteClient) Delete() *QuoteDelete {
	mutation := newQuoteMutation(c.config, OpDelete)
	return &QuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *QuoteClient) DeleteOne(q *Quote) *QuoteDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *QuoteClient) DeleteOneID(id xid.ID) *QuoteDeleteOne {
	builder := c.Delete().Where(quote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuoteDeleteOne{builder}
}

// Query returns a query builder for Quote.
func (c *QuoteClient) Query() *QuoteQuery {
	return &QuoteQuery{
		config: c.config,
	}
}

// Get returns a Quote entity by its id.
func (c *QuoteClient) Get(ctx context.Context, id xid.ID) (*Quote, error) {
	return c.Query().Where(quote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuoteClient) GetX(ctx context.Context, id xid.ID) *Quote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicker queries the Ticker edge of a Quote.
func (c *QuoteClient) QueryTicker(q *Quote) *TickerQuery {
	query := &TickerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quote.Table, quote.FieldID, id),
			sqlgraph.To(ticker.Table, ticker.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, quote.TickerTable, quote.TickerColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuoteClient) Hooks() []Hook {
	return c.hooks.Quote
}

// ReportClient is a client for the Report schema.
type ReportClient struct {
	config
}

// NewReportClient returns a client for the Report from the given config.
func NewReportClient(c config) *ReportClient {
	return &ReportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `report.Hooks(f(g(h())))`.
func (c *ReportClient) Use(hooks ...Hook) {
	c.hooks.Report = append(c.hooks.Report, hooks...)
}

// Create returns a create builder for Report.
func (c *ReportClient) Create() *ReportCreate {
	mutation := newReportMutation(c.config, OpCreate)
	return &ReportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Report entities.
func (c *ReportClient) CreateBulk(builders ...*ReportCreate) *ReportCreateBulk {
	return &ReportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Report.
func (c *ReportClient) Update() *ReportUpdate {
	mutation := newReportMutation(c.config, OpUpdate)
	return &ReportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReportClient) UpdateOne(r *Report) *ReportUpdateOne {
	mutation := newReportMutation(c.config, OpUpdateOne, withReport(r))
	return &ReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReportClient) UpdateOneID(id xid.ID) *ReportUpdateOne {
	mutation := newReportMutation(c.config, OpUpdateOne, withReportID(id))
	return &ReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Report.
func (c *ReportClient) Delete() *ReportDelete {
	mutation := newReportMutation(c.config, OpDelete)
	return &ReportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReportClient) DeleteOne(r *Report) *ReportDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReportClient) DeleteOneID(id xid.ID) *ReportDeleteOne {
	builder := c.Delete().Where(report.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReportDeleteOne{builder}
}

// Query returns a query builder for Report.
func (c *ReportClient) Query() *ReportQuery {
	return &ReportQuery{
		config: c.config,
	}
}

// Get returns a Report entity by its id.
func (c *ReportClient) Get(ctx context.Context, id xid.ID) (*Report, error) {
	return c.Query().Where(report.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReportClient) GetX(ctx context.Context, id xid.ID) *Report {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmitent queries the Emitent edge of a Report.
func (c *ReportClient) QueryEmitent(r *Report) *EmitentQuery {
	query := &EmitentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(report.Table, report.FieldID, id),
			sqlgraph.To(emitent.Table, emitent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, report.EmitentTable, report.EmitentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReportClient) Hooks() []Hook {
	return c.hooks.Report
}

// StrategyClient is a client for the Strategy schema.
type StrategyClient struct {
	config
}

// NewStrategyClient returns a client for the Strategy from the given config.
func NewStrategyClient(c config) *StrategyClient {
	return &StrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategy.Hooks(f(g(h())))`.
func (c *StrategyClient) Use(hooks ...Hook) {
	c.hooks.Strategy = append(c.hooks.Strategy, hooks...)
}

// Create returns a create builder for Strategy.
func (c *StrategyClient) Create() *StrategyCreate {
	mutation := newStrategyMutation(c.config, OpCreate)
	return &StrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Strategy entities.
func (c *StrategyClient) CreateBulk(builders ...*StrategyCreate) *StrategyCreateBulk {
	return &StrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Strategy.
func (c *StrategyClient) Update() *StrategyUpdate {
	mutation := newStrategyMutation(c.config, OpUpdate)
	return &StrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyClient) UpdateOne(s *Strategy) *StrategyUpdateOne {
	mutation := newStrategyMutation(c.config, OpUpdateOne, withStrategy(s))
	return &StrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyClient) UpdateOneID(id xid.ID) *StrategyUpdateOne {
	mutation := newStrategyMutation(c.config, OpUpdateOne, withStrategyID(id))
	return &StrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Strategy.
func (c *StrategyClient) Delete() *StrategyDelete {
	mutation := newStrategyMutation(c.config, OpDelete)
	return &StrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StrategyClient) DeleteOne(s *Strategy) *StrategyDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StrategyClient) DeleteOneID(id xid.ID) *StrategyDeleteOne {
	builder := c.Delete().Where(strategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyDeleteOne{builder}
}

// Query returns a query builder for Strategy.
func (c *StrategyClient) Query() *StrategyQuery {
	return &StrategyQuery{
		config: c.config,
	}
}

// Get returns a Strategy entity by its id.
func (c *StrategyClient) Get(ctx context.Context, id xid.ID) (*Strategy, error) {
	return c.Query().Where(strategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyClient) GetX(ctx context.Context, id xid.ID) *Strategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the User edge of a Strategy.
func (c *StrategyClient) QueryUser(s *Strategy) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategy.UserTable, strategy.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFactors queries the Factors edge of a Strategy.
func (c *StrategyClient) QueryFactors(s *Strategy) *StrategyFactorQuery {
	query := &StrategyFactorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategyfactor.Table, strategyfactor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, strategy.FactorsTable, strategy.FactorsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFilters queries the Filters edge of a Strategy.
func (c *StrategyClient) QueryFilters(s *Strategy) *StrategyFilterQuery {
	query := &StrategyFilterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategyfilter.Table, strategyfilter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, strategy.FiltersTable, strategy.FiltersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedTickers queries the FixedTickers edge of a Strategy.
func (c *StrategyClient) QueryFixedTickers(s *Strategy) *StrategyFixedTickerQuery {
	query := &StrategyFixedTickerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategyfixedticker.Table, strategyfixedticker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, strategy.FixedTickersTable, strategy.FixedTickersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyClient) Hooks() []Hook {
	return c.hooks.Strategy
}

// StrategyFactorClient is a client for the StrategyFactor schema.
type StrategyFactorClient struct {
	config
}

// NewStrategyFactorClient returns a client for the StrategyFactor from the given config.
func NewStrategyFactorClient(c config) *StrategyFactorClient {
	return &StrategyFactorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategyfactor.Hooks(f(g(h())))`.
func (c *StrategyFactorClient) Use(hooks ...Hook) {
	c.hooks.StrategyFactor = append(c.hooks.StrategyFactor, hooks...)
}

// Create returns a create builder for StrategyFactor.
func (c *StrategyFactorClient) Create() *StrategyFactorCreate {
	mutation := newStrategyFactorMutation(c.config, OpCreate)
	return &StrategyFactorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyFactor entities.
func (c *StrategyFactorClient) CreateBulk(builders ...*StrategyFactorCreate) *StrategyFactorCreateBulk {
	return &StrategyFactorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyFactor.
func (c *StrategyFactorClient) Update() *StrategyFactorUpdate {
	mutation := newStrategyFactorMutation(c.config, OpUpdate)
	return &StrategyFactorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyFactorClient) UpdateOne(sf *StrategyFactor) *StrategyFactorUpdateOne {
	mutation := newStrategyFactorMutation(c.config, OpUpdateOne, withStrategyFactor(sf))
	return &StrategyFactorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyFactorClient) UpdateOneID(id xid.ID) *StrategyFactorUpdateOne {
	mutation := newStrategyFactorMutation(c.config, OpUpdateOne, withStrategyFactorID(id))
	return &StrategyFactorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyFactor.
func (c *StrategyFactorClient) Delete() *StrategyFactorDelete {
	mutation := newStrategyFactorMutation(c.config, OpDelete)
	return &StrategyFactorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StrategyFactorClient) DeleteOne(sf *StrategyFactor) *StrategyFactorDeleteOne {
	return c.DeleteOneID(sf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StrategyFactorClient) DeleteOneID(id xid.ID) *StrategyFactorDeleteOne {
	builder := c.Delete().Where(strategyfactor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyFactorDeleteOne{builder}
}

// Query returns a query builder for StrategyFactor.
func (c *StrategyFactorClient) Query() *StrategyFactorQuery {
	return &StrategyFactorQuery{
		config: c.config,
	}
}

// Get returns a StrategyFactor entity by its id.
func (c *StrategyFactorClient) Get(ctx context.Context, id xid.ID) (*StrategyFactor, error) {
	return c.Query().Where(strategyfactor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyFactorClient) GetX(ctx context.Context, id xid.ID) *StrategyFactor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategy queries the Strategy edge of a StrategyFactor.
func (c *StrategyFactorClient) QueryStrategy(sf *StrategyFactor) *StrategyQuery {
	query := &StrategyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategyfactor.Table, strategyfactor.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategyfactor.StrategyTable, strategyfactor.StrategyColumn),
		)
		fromV = sqlgraph.Neighbors(sf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyFactorClient) Hooks() []Hook {
	return c.hooks.StrategyFactor
}

// StrategyFilterClient is a client for the StrategyFilter schema.
type StrategyFilterClient struct {
	config
}

// NewStrategyFilterClient returns a client for the StrategyFilter from the given config.
func NewStrategyFilterClient(c config) *StrategyFilterClient {
	return &StrategyFilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategyfilter.Hooks(f(g(h())))`.
func (c *StrategyFilterClient) Use(hooks ...Hook) {
	c.hooks.StrategyFilter = append(c.hooks.StrategyFilter, hooks...)
}

// Create returns a create builder for StrategyFilter.
func (c *StrategyFilterClient) Create() *StrategyFilterCreate {
	mutation := newStrategyFilterMutation(c.config, OpCreate)
	return &StrategyFilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyFilter entities.
func (c *StrategyFilterClient) CreateBulk(builders ...*StrategyFilterCreate) *StrategyFilterCreateBulk {
	return &StrategyFilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyFilter.
func (c *StrategyFilterClient) Update() *StrategyFilterUpdate {
	mutation := newStrategyFilterMutation(c.config, OpUpdate)
	return &StrategyFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyFilterClient) UpdateOne(sf *StrategyFilter) *StrategyFilterUpdateOne {
	mutation := newStrategyFilterMutation(c.config, OpUpdateOne, withStrategyFilter(sf))
	return &StrategyFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyFilterClient) UpdateOneID(id xid.ID) *StrategyFilterUpdateOne {
	mutation := newStrategyFilterMutation(c.config, OpUpdateOne, withStrategyFilterID(id))
	return &StrategyFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyFilter.
func (c *StrategyFilterClient) Delete() *StrategyFilterDelete {
	mutation := newStrategyFilterMutation(c.config, OpDelete)
	return &StrategyFilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StrategyFilterClient) DeleteOne(sf *StrategyFilter) *StrategyFilterDeleteOne {
	return c.DeleteOneID(sf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StrategyFilterClient) DeleteOneID(id xid.ID) *StrategyFilterDeleteOne {
	builder := c.Delete().Where(strategyfilter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyFilterDeleteOne{builder}
}

// Query returns a query builder for StrategyFilter.
func (c *StrategyFilterClient) Query() *StrategyFilterQuery {
	return &StrategyFilterQuery{
		config: c.config,
	}
}

// Get returns a StrategyFilter entity by its id.
func (c *StrategyFilterClient) Get(ctx context.Context, id xid.ID) (*StrategyFilter, error) {
	return c.Query().Where(strategyfilter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyFilterClient) GetX(ctx context.Context, id xid.ID) *StrategyFilter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategy queries the Strategy edge of a StrategyFilter.
func (c *StrategyFilterClient) QueryStrategy(sf *StrategyFilter) *StrategyQuery {
	query := &StrategyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategyfilter.Table, strategyfilter.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategyfilter.StrategyTable, strategyfilter.StrategyColumn),
		)
		fromV = sqlgraph.Neighbors(sf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyFilterClient) Hooks() []Hook {
	return c.hooks.StrategyFilter
}

// StrategyFixedTickerClient is a client for the StrategyFixedTicker schema.
type StrategyFixedTickerClient struct {
	config
}

// NewStrategyFixedTickerClient returns a client for the StrategyFixedTicker from the given config.
func NewStrategyFixedTickerClient(c config) *StrategyFixedTickerClient {
	return &StrategyFixedTickerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategyfixedticker.Hooks(f(g(h())))`.
func (c *StrategyFixedTickerClient) Use(hooks ...Hook) {
	c.hooks.StrategyFixedTicker = append(c.hooks.StrategyFixedTicker, hooks...)
}

// Create returns a create builder for StrategyFixedTicker.
func (c *StrategyFixedTickerClient) Create() *StrategyFixedTickerCreate {
	mutation := newStrategyFixedTickerMutation(c.config, OpCreate)
	return &StrategyFixedTickerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyFixedTicker entities.
func (c *StrategyFixedTickerClient) CreateBulk(builders ...*StrategyFixedTickerCreate) *StrategyFixedTickerCreateBulk {
	return &StrategyFixedTickerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyFixedTicker.
func (c *StrategyFixedTickerClient) Update() *StrategyFixedTickerUpdate {
	mutation := newStrategyFixedTickerMutation(c.config, OpUpdate)
	return &StrategyFixedTickerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyFixedTickerClient) UpdateOne(sft *StrategyFixedTicker) *StrategyFixedTickerUpdateOne {
	mutation := newStrategyFixedTickerMutation(c.config, OpUpdateOne, withStrategyFixedTicker(sft))
	return &StrategyFixedTickerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyFixedTickerClient) UpdateOneID(id xid.ID) *StrategyFixedTickerUpdateOne {
	mutation := newStrategyFixedTickerMutation(c.config, OpUpdateOne, withStrategyFixedTickerID(id))
	return &StrategyFixedTickerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyFixedTicker.
func (c *StrategyFixedTickerClient) Delete() *StrategyFixedTickerDelete {
	mutation := newStrategyFixedTickerMutation(c.config, OpDelete)
	return &StrategyFixedTickerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StrategyFixedTickerClient) DeleteOne(sft *StrategyFixedTicker) *StrategyFixedTickerDeleteOne {
	return c.DeleteOneID(sft.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StrategyFixedTickerClient) DeleteOneID(id xid.ID) *StrategyFixedTickerDeleteOne {
	builder := c.Delete().Where(strategyfixedticker.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyFixedTickerDeleteOne{builder}
}

// Query returns a query builder for StrategyFixedTicker.
func (c *StrategyFixedTickerClient) Query() *StrategyFixedTickerQuery {
	return &StrategyFixedTickerQuery{
		config: c.config,
	}
}

// Get returns a StrategyFixedTicker entity by its id.
func (c *StrategyFixedTickerClient) Get(ctx context.Context, id xid.ID) (*StrategyFixedTicker, error) {
	return c.Query().Where(strategyfixedticker.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyFixedTickerClient) GetX(ctx context.Context, id xid.ID) *StrategyFixedTicker {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategy queries the Strategy edge of a StrategyFixedTicker.
func (c *StrategyFixedTickerClient) QueryStrategy(sft *StrategyFixedTicker) *StrategyQuery {
	query := &StrategyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategyfixedticker.Table, strategyfixedticker.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategyfixedticker.StrategyTable, strategyfixedticker.StrategyColumn),
		)
		fromV = sqlgraph.Neighbors(sft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyFixedTickerClient) Hooks() []Hook {
	return c.hooks.StrategyFixedTicker
}

// TickerClient is a client for the Ticker schema.
type TickerClient struct {
	config
}

// NewTickerClient returns a client for the Ticker from the given config.
func NewTickerClient(c config) *TickerClient {
	return &TickerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ticker.Hooks(f(g(h())))`.
func (c *TickerClient) Use(hooks ...Hook) {
	c.hooks.Ticker = append(c.hooks.Ticker, hooks...)
}

// Create returns a create builder for Ticker.
func (c *TickerClient) Create() *TickerCreate {
	mutation := newTickerMutation(c.config, OpCreate)
	return &TickerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ticker entities.
func (c *TickerClient) CreateBulk(builders ...*TickerCreate) *TickerCreateBulk {
	return &TickerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ticker.
func (c *TickerClient) Update() *TickerUpdate {
	mutation := newTickerMutation(c.config, OpUpdate)
	return &TickerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TickerClient) UpdateOne(t *Ticker) *TickerUpdateOne {
	mutation := newTickerMutation(c.config, OpUpdateOne, withTicker(t))
	return &TickerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TickerClient) UpdateOneID(id string) *TickerUpdateOne {
	mutation := newTickerMutation(c.config, OpUpdateOne, withTickerID(id))
	return &TickerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ticker.
func (c *TickerClient) Delete() *TickerDelete {
	mutation := newTickerMutation(c.config, OpDelete)
	return &TickerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TickerClient) DeleteOne(t *Ticker) *TickerDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TickerClient) DeleteOneID(id string) *TickerDeleteOne {
	builder := c.Delete().Where(ticker.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TickerDeleteOne{builder}
}

// Query returns a query builder for Ticker.
func (c *TickerClient) Query() *TickerQuery {
	return &TickerQuery{
		config: c.config,
	}
}

// Get returns a Ticker entity by its id.
func (c *TickerClient) Get(ctx context.Context, id string) (*Ticker, error) {
	return c.Query().Where(ticker.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TickerClient) GetX(ctx context.Context, id string) *Ticker {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmitent queries the Emitent edge of a Ticker.
func (c *TickerClient) QueryEmitent(t *Ticker) *EmitentQuery {
	query := &EmitentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticker.Table, ticker.FieldID, id),
			sqlgraph.To(emitent.Table, emitent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticker.EmitentTable, ticker.EmitentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuotes queries the Quotes edge of a Ticker.
func (c *TickerClient) QueryQuotes(t *Ticker) *QuoteQuery {
	query := &QuoteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticker.Table, ticker.FieldID, id),
			sqlgraph.To(quote.Table, quote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticker.QuotesTable, ticker.QuotesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDivPayouts queries the DivPayouts edge of a Ticker.
func (c *TickerClient) QueryDivPayouts(t *Ticker) *DivPayoutQuery {
	query := &DivPayoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticker.Table, ticker.FieldID, id),
			sqlgraph.To(divpayout.Table, divpayout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticker.DivPayoutsTable, ticker.DivPayoutsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmissions queries the Emissions edge of a Ticker.
func (c *TickerClient) QueryEmissions(t *Ticker) *EmissionQuery {
	query := &EmissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticker.Table, ticker.FieldID, id),
			sqlgraph.To(emission.Table, emission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticker.EmissionsTable, ticker.EmissionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TickerClient) Hooks() []Hook {
	return c.hooks.Ticker
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id xid.ID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id xid.ID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id xid.ID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id xid.ID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvestAccounts queries the InvestAccounts edge of a User.
func (c *UserClient) QueryInvestAccounts(u *User) *InvestAccountQuery {
	query := &InvestAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(investaccount.Table, investaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InvestAccountsTable, user.InvestAccountsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStrategies queries the Strategies edge of a User.
func (c *UserClient) QueryStrategies(u *User) *StrategyQuery {
	query := &StrategyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StrategiesTable, user.StrategiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
