// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/domains"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfactor"
)

// StrategyFactor is the model entity for the StrategyFactor schema.
type StrategyFactor struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// LineNum holds the value of the "LineNum" field.
	LineNum int `json:"LineNum,omitempty"`
	// IsUsed holds the value of the "IsUsed" field.
	IsUsed bool `json:"IsUsed,omitempty"`
	// RK holds the value of the "RK" field.
	RK domains.ReportValue `json:"RK,omitempty"`
	// RVT holds the value of the "RVT" field.
	RVT domains.ReportValueType `json:"RVT,omitempty"`
	// MinAcceptabe holds the value of the "MinAcceptabe" field.
	MinAcceptabe float64 `json:"MinAcceptabe,omitempty"`
	// MaxAcceptable holds the value of the "MaxAcceptable" field.
	MaxAcceptable float64 `json:"MaxAcceptable,omitempty"`
	// Inverse holds the value of the "Inverse" field.
	Inverse bool `json:"Inverse,omitempty"`
	// K holds the value of the "K" field.
	K float64 `json:"K,omitempty"`
	// Gist holds the value of the "Gist" field.
	Gist float64 `json:"Gist,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyFactorQuery when eager-loading is set.
	Edges            StrategyFactorEdges `json:"edges"`
	strategy_factors *xid.ID
}

// StrategyFactorEdges holds the relations/edges for other nodes in the graph.
type StrategyFactorEdges struct {
	// Strategy holds the value of the Strategy edge.
	Strategy *Strategy `json:"Strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyFactorEdges) StrategyOrErr() (*Strategy, error) {
	if e.loadedTypes[0] {
		if e.Strategy == nil {
			// The edge Strategy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: strategy.Label}
		}
		return e.Strategy, nil
	}
	return nil, &NotLoadedError{edge: "Strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyFactor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategyfactor.FieldIsUsed, strategyfactor.FieldInverse:
			values[i] = new(sql.NullBool)
		case strategyfactor.FieldMinAcceptabe, strategyfactor.FieldMaxAcceptable, strategyfactor.FieldK, strategyfactor.FieldGist:
			values[i] = new(sql.NullFloat64)
		case strategyfactor.FieldLineNum, strategyfactor.FieldRK, strategyfactor.FieldRVT:
			values[i] = new(sql.NullInt64)
		case strategyfactor.FieldID:
			values[i] = new(xid.ID)
		case strategyfactor.ForeignKeys[0]: // strategy_factors
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StrategyFactor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyFactor fields.
func (sf *StrategyFactor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategyfactor.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sf.ID = *value
			}
		case strategyfactor.FieldLineNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LineNum", values[i])
			} else if value.Valid {
				sf.LineNum = int(value.Int64)
			}
		case strategyfactor.FieldIsUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsUsed", values[i])
			} else if value.Valid {
				sf.IsUsed = value.Bool
			}
		case strategyfactor.FieldRK:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RK", values[i])
			} else if value.Valid {
				sf.RK = domains.ReportValue(value.Int64)
			}
		case strategyfactor.FieldRVT:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RVT", values[i])
			} else if value.Valid {
				sf.RVT = domains.ReportValueType(value.Int64)
			}
		case strategyfactor.FieldMinAcceptabe:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field MinAcceptabe", values[i])
			} else if value.Valid {
				sf.MinAcceptabe = value.Float64
			}
		case strategyfactor.FieldMaxAcceptable:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field MaxAcceptable", values[i])
			} else if value.Valid {
				sf.MaxAcceptable = value.Float64
			}
		case strategyfactor.FieldInverse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Inverse", values[i])
			} else if value.Valid {
				sf.Inverse = value.Bool
			}
		case strategyfactor.FieldK:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field K", values[i])
			} else if value.Valid {
				sf.K = value.Float64
			}
		case strategyfactor.FieldGist:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Gist", values[i])
			} else if value.Valid {
				sf.Gist = value.Float64
			}
		case strategyfactor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_factors", values[i])
			} else if value.Valid {
				sf.strategy_factors = new(xid.ID)
				*sf.strategy_factors = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryStrategy queries the "Strategy" edge of the StrategyFactor entity.
func (sf *StrategyFactor) QueryStrategy() *StrategyQuery {
	return (&StrategyFactorClient{config: sf.config}).QueryStrategy(sf)
}

// Update returns a builder for updating this StrategyFactor.
// Note that you need to call StrategyFactor.Unwrap() before calling this method if this StrategyFactor
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *StrategyFactor) Update() *StrategyFactorUpdateOne {
	return (&StrategyFactorClient{config: sf.config}).UpdateOne(sf)
}

// Unwrap unwraps the StrategyFactor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *StrategyFactor) Unwrap() *StrategyFactor {
	tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyFactor is not a transactional entity")
	}
	sf.config.driver = tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *StrategyFactor) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyFactor(")
	builder.WriteString(fmt.Sprintf("id=%v", sf.ID))
	builder.WriteString(", LineNum=")
	builder.WriteString(fmt.Sprintf("%v", sf.LineNum))
	builder.WriteString(", IsUsed=")
	builder.WriteString(fmt.Sprintf("%v", sf.IsUsed))
	builder.WriteString(", RK=")
	builder.WriteString(fmt.Sprintf("%v", sf.RK))
	builder.WriteString(", RVT=")
	builder.WriteString(fmt.Sprintf("%v", sf.RVT))
	builder.WriteString(", MinAcceptabe=")
	builder.WriteString(fmt.Sprintf("%v", sf.MinAcceptabe))
	builder.WriteString(", MaxAcceptable=")
	builder.WriteString(fmt.Sprintf("%v", sf.MaxAcceptable))
	builder.WriteString(", Inverse=")
	builder.WriteString(fmt.Sprintf("%v", sf.Inverse))
	builder.WriteString(", K=")
	builder.WriteString(fmt.Sprintf("%v", sf.K))
	builder.WriteString(", Gist=")
	builder.WriteString(fmt.Sprintf("%v", sf.Gist))
	builder.WriteByte(')')
	return builder.String()
}

// StrategyFactors is a parsable slice of StrategyFactor.
type StrategyFactors []*StrategyFactor

func (sf StrategyFactors) config(cfg config) {
	for _i := range sf {
		sf[_i].config = cfg
	}
}
