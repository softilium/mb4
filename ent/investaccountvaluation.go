// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountvaluation"
)

// InvestAccountValuation is the model entity for the InvestAccountValuation schema.
type InvestAccountValuation struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// RecDate holds the value of the "RecDate" field.
	RecDate time.Time `json:"RecDate,omitempty"`
	// Value holds the value of the "Value" field.
	Value float64 `json:"Value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvestAccountValuationQuery when eager-loading is set.
	Edges                     InvestAccountValuationEdges `json:"edges"`
	invest_account_valuations *xid.ID
}

// InvestAccountValuationEdges holds the relations/edges for other nodes in the graph.
type InvestAccountValuationEdges struct {
	// Owner holds the value of the Owner edge.
	Owner *InvestAccount `json:"Owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvestAccountValuationEdges) OwnerOrErr() (*InvestAccount, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge Owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: investaccount.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "Owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvestAccountValuation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case investaccountvaluation.FieldValue:
			values[i] = new(sql.NullFloat64)
		case investaccountvaluation.FieldRecDate:
			values[i] = new(sql.NullTime)
		case investaccountvaluation.FieldID:
			values[i] = new(xid.ID)
		case investaccountvaluation.ForeignKeys[0]: // invest_account_valuations
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type InvestAccountValuation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvestAccountValuation fields.
func (iav *InvestAccountValuation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case investaccountvaluation.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				iav.ID = *value
			}
		case investaccountvaluation.FieldRecDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field RecDate", values[i])
			} else if value.Valid {
				iav.RecDate = value.Time
			}
		case investaccountvaluation.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Value", values[i])
			} else if value.Valid {
				iav.Value = value.Float64
			}
		case investaccountvaluation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invest_account_valuations", values[i])
			} else if value.Valid {
				iav.invest_account_valuations = new(xid.ID)
				*iav.invest_account_valuations = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryOwner queries the "Owner" edge of the InvestAccountValuation entity.
func (iav *InvestAccountValuation) QueryOwner() *InvestAccountQuery {
	return (&InvestAccountValuationClient{config: iav.config}).QueryOwner(iav)
}

// Update returns a builder for updating this InvestAccountValuation.
// Note that you need to call InvestAccountValuation.Unwrap() before calling this method if this InvestAccountValuation
// was returned from a transaction, and the transaction was committed or rolled back.
func (iav *InvestAccountValuation) Update() *InvestAccountValuationUpdateOne {
	return (&InvestAccountValuationClient{config: iav.config}).UpdateOne(iav)
}

// Unwrap unwraps the InvestAccountValuation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iav *InvestAccountValuation) Unwrap() *InvestAccountValuation {
	tx, ok := iav.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvestAccountValuation is not a transactional entity")
	}
	iav.config.driver = tx.drv
	return iav
}

// String implements the fmt.Stringer.
func (iav *InvestAccountValuation) String() string {
	var builder strings.Builder
	builder.WriteString("InvestAccountValuation(")
	builder.WriteString(fmt.Sprintf("id=%v", iav.ID))
	builder.WriteString(", RecDate=")
	builder.WriteString(iav.RecDate.Format(time.ANSIC))
	builder.WriteString(", Value=")
	builder.WriteString(fmt.Sprintf("%v", iav.Value))
	builder.WriteByte(')')
	return builder.String()
}

// InvestAccountValuations is a parsable slice of InvestAccountValuation.
type InvestAccountValuations []*InvestAccountValuation

func (iav InvestAccountValuations) config(cfg config) {
	for _i := range iav {
		iav[_i].config = cfg
	}
}
