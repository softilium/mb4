// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/quote"
	"github.com/softilium/mb4/ent/ticker"
)

// QuoteUpdate is the builder for updating Quote entities.
type QuoteUpdate struct {
	config
	hooks    []Hook
	mutation *QuoteMutation
}

// Where appends a list predicates to the QuoteUpdate builder.
func (qu *QuoteUpdate) Where(ps ...predicate.Quote) *QuoteUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetLotSize sets the "LotSize" field.
func (qu *QuoteUpdate) SetLotSize(i int) *QuoteUpdate {
	qu.mutation.ResetLotSize()
	qu.mutation.SetLotSize(i)
	return qu
}

// AddLotSize adds i to the "LotSize" field.
func (qu *QuoteUpdate) AddLotSize(i int) *QuoteUpdate {
	qu.mutation.AddLotSize(i)
	return qu
}

// SetListLevel sets the "ListLevel" field.
func (qu *QuoteUpdate) SetListLevel(i int) *QuoteUpdate {
	qu.mutation.ResetListLevel()
	qu.mutation.SetListLevel(i)
	return qu
}

// AddListLevel adds i to the "ListLevel" field.
func (qu *QuoteUpdate) AddListLevel(i int) *QuoteUpdate {
	qu.mutation.AddListLevel(i)
	return qu
}

// SetTickerID sets the "Ticker" edge to the Ticker entity by ID.
func (qu *QuoteUpdate) SetTickerID(id string) *QuoteUpdate {
	qu.mutation.SetTickerID(id)
	return qu
}

// SetNillableTickerID sets the "Ticker" edge to the Ticker entity by ID if the given value is not nil.
func (qu *QuoteUpdate) SetNillableTickerID(id *string) *QuoteUpdate {
	if id != nil {
		qu = qu.SetTickerID(*id)
	}
	return qu
}

// SetTicker sets the "Ticker" edge to the Ticker entity.
func (qu *QuoteUpdate) SetTicker(t *Ticker) *QuoteUpdate {
	return qu.SetTickerID(t.ID)
}

// Mutation returns the QuoteMutation object of the builder.
func (qu *QuoteUpdate) Mutation() *QuoteMutation {
	return qu.mutation
}

// ClearTicker clears the "Ticker" edge to the Ticker entity.
func (qu *QuoteUpdate) ClearTicker() *QuoteUpdate {
	qu.mutation.ClearTicker()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qu.hooks) == 0 {
		if err = qu.check(); err != nil {
			return 0, err
		}
		affected, err = qu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qu.check(); err != nil {
				return 0, err
			}
			qu.mutation = mutation
			affected, err = qu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qu.hooks) - 1; i >= 0; i-- {
			if qu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuoteUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuoteUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuoteUpdate) check() error {
	if v, ok := qu.mutation.LotSize(); ok {
		if err := quote.LotSizeValidator(v); err != nil {
			return &ValidationError{Name: "LotSize", err: fmt.Errorf(`ent: validator failed for field "Quote.LotSize": %w`, err)}
		}
	}
	if v, ok := qu.mutation.ListLevel(); ok {
		if err := quote.ListLevelValidator(v); err != nil {
			return &ValidationError{Name: "ListLevel", err: fmt.Errorf(`ent: validator failed for field "Quote.ListLevel": %w`, err)}
		}
	}
	return nil
}

func (qu *QuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quote.Table,
			Columns: quote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quote.FieldID,
			},
		},
	}
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.LotSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldLotSize,
		})
	}
	if value, ok := qu.mutation.AddedLotSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldLotSize,
		})
	}
	if value, ok := qu.mutation.ListLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldListLevel,
		})
	}
	if value, ok := qu.mutation.AddedListLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldListLevel,
		})
	}
	if qu.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.TickerTable,
			Columns: []string{quote.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.TickerTable,
			Columns: []string{quote.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// QuoteUpdateOne is the builder for updating a single Quote entity.
type QuoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuoteMutation
}

// SetLotSize sets the "LotSize" field.
func (quo *QuoteUpdateOne) SetLotSize(i int) *QuoteUpdateOne {
	quo.mutation.ResetLotSize()
	quo.mutation.SetLotSize(i)
	return quo
}

// AddLotSize adds i to the "LotSize" field.
func (quo *QuoteUpdateOne) AddLotSize(i int) *QuoteUpdateOne {
	quo.mutation.AddLotSize(i)
	return quo
}

// SetListLevel sets the "ListLevel" field.
func (quo *QuoteUpdateOne) SetListLevel(i int) *QuoteUpdateOne {
	quo.mutation.ResetListLevel()
	quo.mutation.SetListLevel(i)
	return quo
}

// AddListLevel adds i to the "ListLevel" field.
func (quo *QuoteUpdateOne) AddListLevel(i int) *QuoteUpdateOne {
	quo.mutation.AddListLevel(i)
	return quo
}

// SetTickerID sets the "Ticker" edge to the Ticker entity by ID.
func (quo *QuoteUpdateOne) SetTickerID(id string) *QuoteUpdateOne {
	quo.mutation.SetTickerID(id)
	return quo
}

// SetNillableTickerID sets the "Ticker" edge to the Ticker entity by ID if the given value is not nil.
func (quo *QuoteUpdateOne) SetNillableTickerID(id *string) *QuoteUpdateOne {
	if id != nil {
		quo = quo.SetTickerID(*id)
	}
	return quo
}

// SetTicker sets the "Ticker" edge to the Ticker entity.
func (quo *QuoteUpdateOne) SetTicker(t *Ticker) *QuoteUpdateOne {
	return quo.SetTickerID(t.ID)
}

// Mutation returns the QuoteMutation object of the builder.
func (quo *QuoteUpdateOne) Mutation() *QuoteMutation {
	return quo.mutation
}

// ClearTicker clears the "Ticker" edge to the Ticker entity.
func (quo *QuoteUpdateOne) ClearTicker() *QuoteUpdateOne {
	quo.mutation.ClearTicker()
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuoteUpdateOne) Select(field string, fields ...string) *QuoteUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quote entity.
func (quo *QuoteUpdateOne) Save(ctx context.Context) (*Quote, error) {
	var (
		err  error
		node *Quote
	)
	if len(quo.hooks) == 0 {
		if err = quo.check(); err != nil {
			return nil, err
		}
		node, err = quo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = quo.check(); err != nil {
				return nil, err
			}
			quo.mutation = mutation
			node, err = quo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(quo.hooks) - 1; i >= 0; i-- {
			if quo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = quo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, quo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuoteUpdateOne) SaveX(ctx context.Context) *Quote {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuoteUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuoteUpdateOne) check() error {
	if v, ok := quo.mutation.LotSize(); ok {
		if err := quote.LotSizeValidator(v); err != nil {
			return &ValidationError{Name: "LotSize", err: fmt.Errorf(`ent: validator failed for field "Quote.LotSize": %w`, err)}
		}
	}
	if v, ok := quo.mutation.ListLevel(); ok {
		if err := quote.ListLevelValidator(v); err != nil {
			return &ValidationError{Name: "ListLevel", err: fmt.Errorf(`ent: validator failed for field "Quote.ListLevel": %w`, err)}
		}
	}
	return nil
}

func (quo *QuoteUpdateOne) sqlSave(ctx context.Context) (_node *Quote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quote.Table,
			Columns: quote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quote.FieldID,
			},
		},
	}
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Quote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quote.FieldID)
		for _, f := range fields {
			if !quote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.LotSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldLotSize,
		})
	}
	if value, ok := quo.mutation.AddedLotSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldLotSize,
		})
	}
	if value, ok := quo.mutation.ListLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldListLevel,
		})
	}
	if value, ok := quo.mutation.AddedListLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldListLevel,
		})
	}
	if quo.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.TickerTable,
			Columns: []string{quote.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.TickerTable,
			Columns: []string{quote.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Quote{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
