// Code generated by entc, DO NOT EDIT.

package strategyfixedticker

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the strategyfixedticker type in the database.
	Label = "strategy_fixed_ticker"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLineNum holds the string denoting the linenum field in the database.
	FieldLineNum = "line_num"
	// FieldIsUsed holds the string denoting the isused field in the database.
	FieldIsUsed = "is_used"
	// FieldTicker holds the string denoting the ticker field in the database.
	FieldTicker = "ticker"
	// FieldShare holds the string denoting the share field in the database.
	FieldShare = "share"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "Strategy"
	// Table holds the table name of the strategyfixedticker in the database.
	Table = "strategy_fixed_tickers"
	// StrategyTable is the table that holds the Strategy relation/edge.
	StrategyTable = "strategy_fixed_tickers"
	// StrategyInverseTable is the table name for the Strategy entity.
	// It exists in this package in order to avoid circular dependency with the "strategy" package.
	StrategyInverseTable = "strategies"
	// StrategyColumn is the table column denoting the Strategy relation/edge.
	StrategyColumn = "strategy_fixed_tickers"
)

// Columns holds all SQL columns for strategyfixedticker fields.
var Columns = []string{
	FieldID,
	FieldLineNum,
	FieldIsUsed,
	FieldTicker,
	FieldShare,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "strategy_fixed_tickers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"strategy_fixed_tickers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLineNum holds the default value on creation for the "LineNum" field.
	DefaultLineNum int
	// LineNumValidator is a validator for the "LineNum" field. It is called by the builders before save.
	LineNumValidator func(int) error
	// DefaultIsUsed holds the default value on creation for the "IsUsed" field.
	DefaultIsUsed bool
	// TickerValidator is a validator for the "Ticker" field. It is called by the builders before save.
	TickerValidator func(string) error
	// DefaultShare holds the default value on creation for the "Share" field.
	DefaultShare int
	// ShareValidator is a validator for the "Share" field. It is called by the builders before save.
	ShareValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
