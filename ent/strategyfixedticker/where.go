// Code generated by entc, DO NOT EDIT.

package strategyfixedticker

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LineNum applies equality check predicate on the "LineNum" field. It's identical to LineNumEQ.
func LineNum(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineNum), v))
	})
}

// IsUsed applies equality check predicate on the "IsUsed" field. It's identical to IsUsedEQ.
func IsUsed(v bool) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUsed), v))
	})
}

// Ticker applies equality check predicate on the "Ticker" field. It's identical to TickerEQ.
func Ticker(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicker), v))
	})
}

// Share applies equality check predicate on the "Share" field. It's identical to ShareEQ.
func Share(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShare), v))
	})
}

// LineNumEQ applies the EQ predicate on the "LineNum" field.
func LineNumEQ(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineNum), v))
	})
}

// LineNumNEQ applies the NEQ predicate on the "LineNum" field.
func LineNumNEQ(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLineNum), v))
	})
}

// LineNumIn applies the In predicate on the "LineNum" field.
func LineNumIn(vs ...int) predicate.StrategyFixedTicker {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLineNum), v...))
	})
}

// LineNumNotIn applies the NotIn predicate on the "LineNum" field.
func LineNumNotIn(vs ...int) predicate.StrategyFixedTicker {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLineNum), v...))
	})
}

// LineNumGT applies the GT predicate on the "LineNum" field.
func LineNumGT(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLineNum), v))
	})
}

// LineNumGTE applies the GTE predicate on the "LineNum" field.
func LineNumGTE(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLineNum), v))
	})
}

// LineNumLT applies the LT predicate on the "LineNum" field.
func LineNumLT(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLineNum), v))
	})
}

// LineNumLTE applies the LTE predicate on the "LineNum" field.
func LineNumLTE(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLineNum), v))
	})
}

// IsUsedEQ applies the EQ predicate on the "IsUsed" field.
func IsUsedEQ(v bool) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUsed), v))
	})
}

// IsUsedNEQ applies the NEQ predicate on the "IsUsed" field.
func IsUsedNEQ(v bool) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsUsed), v))
	})
}

// TickerEQ applies the EQ predicate on the "Ticker" field.
func TickerEQ(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicker), v))
	})
}

// TickerNEQ applies the NEQ predicate on the "Ticker" field.
func TickerNEQ(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTicker), v))
	})
}

// TickerIn applies the In predicate on the "Ticker" field.
func TickerIn(vs ...string) predicate.StrategyFixedTicker {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTicker), v...))
	})
}

// TickerNotIn applies the NotIn predicate on the "Ticker" field.
func TickerNotIn(vs ...string) predicate.StrategyFixedTicker {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTicker), v...))
	})
}

// TickerGT applies the GT predicate on the "Ticker" field.
func TickerGT(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTicker), v))
	})
}

// TickerGTE applies the GTE predicate on the "Ticker" field.
func TickerGTE(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTicker), v))
	})
}

// TickerLT applies the LT predicate on the "Ticker" field.
func TickerLT(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTicker), v))
	})
}

// TickerLTE applies the LTE predicate on the "Ticker" field.
func TickerLTE(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTicker), v))
	})
}

// TickerContains applies the Contains predicate on the "Ticker" field.
func TickerContains(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTicker), v))
	})
}

// TickerHasPrefix applies the HasPrefix predicate on the "Ticker" field.
func TickerHasPrefix(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTicker), v))
	})
}

// TickerHasSuffix applies the HasSuffix predicate on the "Ticker" field.
func TickerHasSuffix(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTicker), v))
	})
}

// TickerEqualFold applies the EqualFold predicate on the "Ticker" field.
func TickerEqualFold(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTicker), v))
	})
}

// TickerContainsFold applies the ContainsFold predicate on the "Ticker" field.
func TickerContainsFold(v string) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTicker), v))
	})
}

// ShareEQ applies the EQ predicate on the "Share" field.
func ShareEQ(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShare), v))
	})
}

// ShareNEQ applies the NEQ predicate on the "Share" field.
func ShareNEQ(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShare), v))
	})
}

// ShareIn applies the In predicate on the "Share" field.
func ShareIn(vs ...int) predicate.StrategyFixedTicker {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShare), v...))
	})
}

// ShareNotIn applies the NotIn predicate on the "Share" field.
func ShareNotIn(vs ...int) predicate.StrategyFixedTicker {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShare), v...))
	})
}

// ShareGT applies the GT predicate on the "Share" field.
func ShareGT(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShare), v))
	})
}

// ShareGTE applies the GTE predicate on the "Share" field.
func ShareGTE(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShare), v))
	})
}

// ShareLT applies the LT predicate on the "Share" field.
func ShareLT(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShare), v))
	})
}

// ShareLTE applies the LTE predicate on the "Share" field.
func ShareLTE(v int) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShare), v))
	})
}

// HasStrategy applies the HasEdge predicate on the "Strategy" edge.
func HasStrategy() predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StrategyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "Strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.Strategy) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StrategyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StrategyFixedTicker) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StrategyFixedTicker) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StrategyFixedTicker) predicate.StrategyFixedTicker {
	return predicate.StrategyFixedTicker(func(s *sql.Selector) {
		p(s.Not())
	})
}
