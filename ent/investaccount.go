// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/user"
)

// InvestAccount is the model entity for the InvestAccount schema.
type InvestAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Descr holds the value of the "Descr" field.
	Descr string `json:"Descr,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvestAccountQuery when eager-loading is set.
	Edges                InvestAccountEdges `json:"edges"`
	user_invest_accounts *xid.ID
}

// InvestAccountEdges holds the relations/edges for other nodes in the graph.
type InvestAccountEdges struct {
	// Owner holds the value of the Owner edge.
	Owner *User `json:"Owner,omitempty"`
	// Cashflows holds the value of the Cashflows edge.
	Cashflows []*InvestAccountCashflow `json:"Cashflows,omitempty"`
	// Valuations holds the value of the Valuations edge.
	Valuations []*InvestAccountValuation `json:"Valuations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvestAccountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge Owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "Owner"}
}

// CashflowsOrErr returns the Cashflows value or an error if the edge
// was not loaded in eager-loading.
func (e InvestAccountEdges) CashflowsOrErr() ([]*InvestAccountCashflow, error) {
	if e.loadedTypes[1] {
		return e.Cashflows, nil
	}
	return nil, &NotLoadedError{edge: "Cashflows"}
}

// ValuationsOrErr returns the Valuations value or an error if the edge
// was not loaded in eager-loading.
func (e InvestAccountEdges) ValuationsOrErr() ([]*InvestAccountValuation, error) {
	if e.loadedTypes[2] {
		return e.Valuations, nil
	}
	return nil, &NotLoadedError{edge: "Valuations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvestAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case investaccount.FieldDescr:
			values[i] = new(sql.NullString)
		case investaccount.FieldID:
			values[i] = new(xid.ID)
		case investaccount.ForeignKeys[0]: // user_invest_accounts
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type InvestAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvestAccount fields.
func (ia *InvestAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case investaccount.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ia.ID = *value
			}
		case investaccount.FieldDescr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Descr", values[i])
			} else if value.Valid {
				ia.Descr = value.String
			}
		case investaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_invest_accounts", values[i])
			} else if value.Valid {
				ia.user_invest_accounts = new(xid.ID)
				*ia.user_invest_accounts = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryOwner queries the "Owner" edge of the InvestAccount entity.
func (ia *InvestAccount) QueryOwner() *UserQuery {
	return (&InvestAccountClient{config: ia.config}).QueryOwner(ia)
}

// QueryCashflows queries the "Cashflows" edge of the InvestAccount entity.
func (ia *InvestAccount) QueryCashflows() *InvestAccountCashflowQuery {
	return (&InvestAccountClient{config: ia.config}).QueryCashflows(ia)
}

// QueryValuations queries the "Valuations" edge of the InvestAccount entity.
func (ia *InvestAccount) QueryValuations() *InvestAccountValuationQuery {
	return (&InvestAccountClient{config: ia.config}).QueryValuations(ia)
}

// Update returns a builder for updating this InvestAccount.
// Note that you need to call InvestAccount.Unwrap() before calling this method if this InvestAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ia *InvestAccount) Update() *InvestAccountUpdateOne {
	return (&InvestAccountClient{config: ia.config}).UpdateOne(ia)
}

// Unwrap unwraps the InvestAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ia *InvestAccount) Unwrap() *InvestAccount {
	tx, ok := ia.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvestAccount is not a transactional entity")
	}
	ia.config.driver = tx.drv
	return ia
}

// String implements the fmt.Stringer.
func (ia *InvestAccount) String() string {
	var builder strings.Builder
	builder.WriteString("InvestAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", ia.ID))
	builder.WriteString(", Descr=")
	builder.WriteString(ia.Descr)
	builder.WriteByte(')')
	return builder.String()
}

// InvestAccounts is a parsable slice of InvestAccount.
type InvestAccounts []*InvestAccount

func (ia InvestAccounts) config(cfg config) {
	for _i := range ia {
		ia[_i].config = cfg
	}
}
