// Code generated by entc, DO NOT EDIT.

package strategyfactor

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the strategyfactor type in the database.
	Label = "strategy_factor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLineNum holds the string denoting the linenum field in the database.
	FieldLineNum = "line_num"
	// FieldIsUsed holds the string denoting the isused field in the database.
	FieldIsUsed = "is_used"
	// FieldRK holds the string denoting the rk field in the database.
	FieldRK = "rk"
	// FieldRVT holds the string denoting the rvt field in the database.
	FieldRVT = "rvt"
	// FieldMinAcceptable holds the string denoting the minacceptable field in the database.
	FieldMinAcceptable = "min_acceptable"
	// FieldMaxAcceptable holds the string denoting the maxacceptable field in the database.
	FieldMaxAcceptable = "max_acceptable"
	// FieldInverse holds the string denoting the inverse field in the database.
	FieldInverse = "inverse"
	// FieldK holds the string denoting the k field in the database.
	FieldK = "k"
	// FieldGist holds the string denoting the gist field in the database.
	FieldGist = "gist"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "Strategy"
	// Table holds the table name of the strategyfactor in the database.
	Table = "strategy_factors"
	// StrategyTable is the table that holds the Strategy relation/edge.
	StrategyTable = "strategy_factors"
	// StrategyInverseTable is the table name for the Strategy entity.
	// It exists in this package in order to avoid circular dependency with the "strategy" package.
	StrategyInverseTable = "strategies"
	// StrategyColumn is the table column denoting the Strategy relation/edge.
	StrategyColumn = "strategy_factors"
)

// Columns holds all SQL columns for strategyfactor fields.
var Columns = []string{
	FieldID,
	FieldLineNum,
	FieldIsUsed,
	FieldRK,
	FieldRVT,
	FieldMinAcceptable,
	FieldMaxAcceptable,
	FieldInverse,
	FieldK,
	FieldGist,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "strategy_factors"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"strategy_factors",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLineNum holds the default value on creation for the "LineNum" field.
	DefaultLineNum int
	// LineNumValidator is a validator for the "LineNum" field. It is called by the builders before save.
	LineNumValidator func(int) error
	// DefaultIsUsed holds the default value on creation for the "IsUsed" field.
	DefaultIsUsed bool
	// DefaultInverse holds the default value on creation for the "Inverse" field.
	DefaultInverse bool
	// DefaultK holds the default value on creation for the "K" field.
	DefaultK float64
	// DefaultGist holds the default value on creation for the "Gist" field.
	DefaultGist float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
