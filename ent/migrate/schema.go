// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DivPayoutsColumns holds the columns for the "div_payouts" table.
	DivPayoutsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "for_year", Type: field.TypeInt},
		{Name: "for_quarter", Type: field.TypeInt},
		{Name: "close_date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeInt},
		{Name: "dps", Type: field.TypeFloat64},
		{Name: "ticker_div_payouts", Type: field.TypeString, Size: 20},
	}
	// DivPayoutsTable holds the schema information for the "div_payouts" table.
	DivPayoutsTable = &schema.Table{
		Name:       "div_payouts",
		Columns:    DivPayoutsColumns,
		PrimaryKey: []*schema.Column{DivPayoutsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "div_payouts_tickers_DivPayouts",
				Columns:    []*schema.Column{DivPayoutsColumns[6]},
				RefColumns: []*schema.Column{TickersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EmissionsColumns holds the columns for the "emissions" table.
	EmissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "rec_date", Type: field.TypeTime},
		{Name: "size", Type: field.TypeInt64},
		{Name: "free_float", Type: field.TypeInt, Nullable: true},
		{Name: "lot_size", Type: field.TypeInt, Nullable: true},
		{Name: "listing_level", Type: field.TypeInt},
		{Name: "ticker_emissions", Type: field.TypeString, Size: 20},
	}
	// EmissionsTable holds the schema information for the "emissions" table.
	EmissionsTable = &schema.Table{
		Name:       "emissions",
		Columns:    EmissionsColumns,
		PrimaryKey: []*schema.Column{EmissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "emissions_tickers_Emissions",
				Columns:    []*schema.Column{EmissionsColumns[6]},
				RefColumns: []*schema.Column{TickersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EmitentsColumns holds the columns for the "emitents" table.
	EmitentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "descr", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "industry_emitents", Type: field.TypeString, Size: 20},
	}
	// EmitentsTable holds the schema information for the "emitents" table.
	EmitentsTable = &schema.Table{
		Name:       "emitents",
		Columns:    EmitentsColumns,
		PrimaryKey: []*schema.Column{EmitentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "emitents_industries_Emitents",
				Columns:    []*schema.Column{EmitentsColumns[2]},
				RefColumns: []*schema.Column{IndustriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IndustriesColumns holds the columns for the "industries" table.
	IndustriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "descr", Type: field.TypeString, Unique: true, Size: 100},
	}
	// IndustriesTable holds the schema information for the "industries" table.
	IndustriesTable = &schema.Table{
		Name:       "industries",
		Columns:    IndustriesColumns,
		PrimaryKey: []*schema.Column{IndustriesColumns[0]},
	}
	// InvestAccountsColumns holds the columns for the "invest_accounts" table.
	InvestAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "descr", Type: field.TypeString, Size: 100},
		{Name: "user_invest_accounts", Type: field.TypeString, Size: 20},
	}
	// InvestAccountsTable holds the schema information for the "invest_accounts" table.
	InvestAccountsTable = &schema.Table{
		Name:       "invest_accounts",
		Columns:    InvestAccountsColumns,
		PrimaryKey: []*schema.Column{InvestAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invest_accounts_users_InvestAccounts",
				Columns:    []*schema.Column{InvestAccountsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InvestAccountCashflowsColumns holds the columns for the "invest_account_cashflows" table.
	InvestAccountCashflowsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "rec_date", Type: field.TypeTime},
		{Name: "qty", Type: field.TypeFloat64},
		{Name: "invest_account_cashflows", Type: field.TypeString, Size: 20},
	}
	// InvestAccountCashflowsTable holds the schema information for the "invest_account_cashflows" table.
	InvestAccountCashflowsTable = &schema.Table{
		Name:       "invest_account_cashflows",
		Columns:    InvestAccountCashflowsColumns,
		PrimaryKey: []*schema.Column{InvestAccountCashflowsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invest_account_cashflows_invest_accounts_Cashflows",
				Columns:    []*schema.Column{InvestAccountCashflowsColumns[3]},
				RefColumns: []*schema.Column{InvestAccountsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InvestAccountValuationsColumns holds the columns for the "invest_account_valuations" table.
	InvestAccountValuationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "rec_date", Type: field.TypeTime},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "invest_account_valuations", Type: field.TypeString, Size: 20},
	}
	// InvestAccountValuationsTable holds the schema information for the "invest_account_valuations" table.
	InvestAccountValuationsTable = &schema.Table{
		Name:       "invest_account_valuations",
		Columns:    InvestAccountValuationsColumns,
		PrimaryKey: []*schema.Column{InvestAccountValuationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invest_account_valuations_invest_accounts_Valuations",
				Columns:    []*schema.Column{InvestAccountValuationsColumns[3]},
				RefColumns: []*schema.Column{InvestAccountsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuotesColumns holds the columns for the "quotes" table.
	QuotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "d", Type: field.TypeTime},
		{Name: "o", Type: field.TypeFloat64},
		{Name: "c", Type: field.TypeFloat64},
		{Name: "h", Type: field.TypeFloat64},
		{Name: "l", Type: field.TypeFloat64},
		{Name: "v", Type: field.TypeFloat64},
		{Name: "ticker_quotes", Type: field.TypeString, Size: 20},
	}
	// QuotesTable holds the schema information for the "quotes" table.
	QuotesTable = &schema.Table{
		Name:       "quotes",
		Columns:    QuotesColumns,
		PrimaryKey: []*schema.Column{QuotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "quotes_tickers_Quotes",
				Columns:    []*schema.Column{QuotesColumns[7]},
				RefColumns: []*schema.Column{TickersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "quote_d_ticker_quotes",
				Unique:  true,
				Columns: []*schema.Column{QuotesColumns[1], QuotesColumns[7]},
			},
		},
	}
	// ReportsColumns holds the columns for the "reports" table.
	ReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "report_year", Type: field.TypeInt},
		{Name: "report_quarter", Type: field.TypeInt},
		{Name: "report_date", Type: field.TypeTime},
		{Name: "pnl_revenue_ytd", Type: field.TypeFloat64},
		{Name: "pnl_amortization_ytd", Type: field.TypeFloat64},
		{Name: "pnl_operating_income_ytd", Type: field.TypeFloat64},
		{Name: "pnl_interest_income_ytd", Type: field.TypeFloat64},
		{Name: "pnl_interest_expenses_ytd", Type: field.TypeFloat64},
		{Name: "pnl_income_tax_ytd", Type: field.TypeFloat64},
		{Name: "pnl_net_income_ytd", Type: field.TypeFloat64},
		{Name: "cf_cash_sld", Type: field.TypeFloat64},
		{Name: "cf_non_current_liabilities_sld", Type: field.TypeFloat64},
		{Name: "cf_current_liabilites_sld", Type: field.TypeFloat64},
		{Name: "cf_non_controlling_sld", Type: field.TypeFloat64},
		{Name: "cf_equity_sld", Type: field.TypeFloat64},
		{Name: "cf_total_sld", Type: field.TypeFloat64},
		{Name: "url", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "emitent_reports", Type: field.TypeString, Size: 20},
	}
	// ReportsTable holds the schema information for the "reports" table.
	ReportsTable = &schema.Table{
		Name:       "reports",
		Columns:    ReportsColumns,
		PrimaryKey: []*schema.Column{ReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reports_emitents_Reports",
				Columns:    []*schema.Column{ReportsColumns[18]},
				RefColumns: []*schema.Column{EmitentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StrategiesColumns holds the columns for the "strategies" table.
	StrategiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "descr", Type: field.TypeString, Size: 100},
		{Name: "max_tickers", Type: field.TypeInt, Default: 10},
		{Name: "max_tickers_per_industry", Type: field.TypeInt, Default: 5},
		{Name: "base_index", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "last_year_invent_result", Type: field.TypeFloat64, Default: 0},
		{Name: "last_year_yield", Type: field.TypeFloat64, Default: 0},
		{Name: "last3years_invert_result", Type: field.TypeFloat64, Default: 0},
		{Name: "last3years_yield", Type: field.TypeFloat64, Default: 0},
		{Name: "week_refill_amount", Type: field.TypeFloat64},
		{Name: "start_amount", Type: field.TypeFloat64},
		{Name: "start_simulation", Type: field.TypeTime},
		{Name: "buy_only_low_price", Type: field.TypeBool, Default: false},
		{Name: "allow_loss_when_sell", Type: field.TypeBool, Default: true},
		{Name: "allow_sell_to_fit", Type: field.TypeBool, Default: true},
		{Name: "same_emitent", Type: field.TypeInt},
		{Name: "user_strategies", Type: field.TypeString, Size: 20},
	}
	// StrategiesTable holds the schema information for the "strategies" table.
	StrategiesTable = &schema.Table{
		Name:       "strategies",
		Columns:    StrategiesColumns,
		PrimaryKey: []*schema.Column{StrategiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategies_users_Strategies",
				Columns:    []*schema.Column{StrategiesColumns[16]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StrategyFactorsColumns holds the columns for the "strategy_factors" table.
	StrategyFactorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "line_num", Type: field.TypeInt, Default: 1},
		{Name: "is_used", Type: field.TypeBool, Default: true},
		{Name: "rk", Type: field.TypeInt},
		{Name: "rvt", Type: field.TypeInt},
		{Name: "min_acceptable", Type: field.TypeFloat64},
		{Name: "max_acceptable", Type: field.TypeFloat64},
		{Name: "inverse", Type: field.TypeBool, Default: false},
		{Name: "k", Type: field.TypeFloat64, Default: 1},
		{Name: "gist", Type: field.TypeFloat64, Default: 1},
		{Name: "strategy_factors", Type: field.TypeString, Size: 20},
	}
	// StrategyFactorsTable holds the schema information for the "strategy_factors" table.
	StrategyFactorsTable = &schema.Table{
		Name:       "strategy_factors",
		Columns:    StrategyFactorsColumns,
		PrimaryKey: []*schema.Column{StrategyFactorsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategy_factors_strategies_Factors",
				Columns:    []*schema.Column{StrategyFactorsColumns[10]},
				RefColumns: []*schema.Column{StrategiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StrategyFiltersColumns holds the columns for the "strategy_filters" table.
	StrategyFiltersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "line_num", Type: field.TypeInt, Default: 1},
		{Name: "is_used", Type: field.TypeBool, Default: true},
		{Name: "left_value_kind", Type: field.TypeInt},
		{Name: "left_report_value", Type: field.TypeInt, Default: 100},
		{Name: "left_report_value_type", Type: field.TypeInt, Default: 500},
		{Name: "operation", Type: field.TypeInt},
		{Name: "right_value_str", Type: field.TypeString, Size: 100, Default: ""},
		{Name: "right_value_float", Type: field.TypeFloat64, Default: 0},
		{Name: "strategy_filters", Type: field.TypeString, Size: 20},
	}
	// StrategyFiltersTable holds the schema information for the "strategy_filters" table.
	StrategyFiltersTable = &schema.Table{
		Name:       "strategy_filters",
		Columns:    StrategyFiltersColumns,
		PrimaryKey: []*schema.Column{StrategyFiltersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategy_filters_strategies_Filters",
				Columns:    []*schema.Column{StrategyFiltersColumns[9]},
				RefColumns: []*schema.Column{StrategiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StrategyFixedTickersColumns holds the columns for the "strategy_fixed_tickers" table.
	StrategyFixedTickersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "line_num", Type: field.TypeInt, Default: 1},
		{Name: "is_used", Type: field.TypeBool, Default: true},
		{Name: "ticker", Type: field.TypeString, Size: 20},
		{Name: "share", Type: field.TypeInt, Default: 1},
		{Name: "strategy_fixed_tickers", Type: field.TypeString, Size: 20},
	}
	// StrategyFixedTickersTable holds the schema information for the "strategy_fixed_tickers" table.
	StrategyFixedTickersTable = &schema.Table{
		Name:       "strategy_fixed_tickers",
		Columns:    StrategyFixedTickersColumns,
		PrimaryKey: []*schema.Column{StrategyFixedTickersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategy_fixed_tickers_strategies_FixedTickers",
				Columns:    []*schema.Column{StrategyFixedTickersColumns[5]},
				RefColumns: []*schema.Column{StrategiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TickersColumns holds the columns for the "tickers" table.
	TickersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "descr", Type: field.TypeString, Unique: true, Size: 50},
		{Name: "kind", Type: field.TypeInt32, Default: 100},
		{Name: "emitent_tickers", Type: field.TypeString, Size: 20},
	}
	// TickersTable holds the schema information for the "tickers" table.
	TickersTable = &schema.Table{
		Name:       "tickers",
		Columns:    TickersColumns,
		PrimaryKey: []*schema.Column{TickersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickers_emitents_Tickers",
				Columns:    []*schema.Column{TickersColumns[3]},
				RefColumns: []*schema.Column{EmitentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 20},
		{Name: "user_name", Type: field.TypeString, Unique: true, Size: 50},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "admin", Type: field.TypeBool, Default: false},
		{Name: "start_invest_accounts_flow", Type: field.TypeTime, Nullable: true},
		{Name: "how_many_tickers_on_homepage", Type: field.TypeInt, Default: 20},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DivPayoutsTable,
		EmissionsTable,
		EmitentsTable,
		IndustriesTable,
		InvestAccountsTable,
		InvestAccountCashflowsTable,
		InvestAccountValuationsTable,
		QuotesTable,
		ReportsTable,
		StrategiesTable,
		StrategyFactorsTable,
		StrategyFiltersTable,
		StrategyFixedTickersTable,
		TickersTable,
		UsersTable,
	}
)

func init() {
	DivPayoutsTable.ForeignKeys[0].RefTable = TickersTable
	EmissionsTable.ForeignKeys[0].RefTable = TickersTable
	EmitentsTable.ForeignKeys[0].RefTable = IndustriesTable
	InvestAccountsTable.ForeignKeys[0].RefTable = UsersTable
	InvestAccountCashflowsTable.ForeignKeys[0].RefTable = InvestAccountsTable
	InvestAccountValuationsTable.ForeignKeys[0].RefTable = InvestAccountsTable
	QuotesTable.ForeignKeys[0].RefTable = TickersTable
	ReportsTable.ForeignKeys[0].RefTable = EmitentsTable
	StrategiesTable.ForeignKeys[0].RefTable = UsersTable
	StrategyFactorsTable.ForeignKeys[0].RefTable = StrategiesTable
	StrategyFiltersTable.ForeignKeys[0].RefTable = StrategiesTable
	StrategyFixedTickersTable.ForeignKeys[0].RefTable = StrategiesTable
	TickersTable.ForeignKeys[0].RefTable = EmitentsTable
}
