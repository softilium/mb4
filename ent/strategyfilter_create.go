// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfilter"
)

// StrategyFilterCreate is the builder for creating a StrategyFilter entity.
type StrategyFilterCreate struct {
	config
	mutation *StrategyFilterMutation
	hooks    []Hook
}

// SetLineNum sets the "LineNum" field.
func (sfc *StrategyFilterCreate) SetLineNum(i int) *StrategyFilterCreate {
	sfc.mutation.SetLineNum(i)
	return sfc
}

// SetNillableLineNum sets the "LineNum" field if the given value is not nil.
func (sfc *StrategyFilterCreate) SetNillableLineNum(i *int) *StrategyFilterCreate {
	if i != nil {
		sfc.SetLineNum(*i)
	}
	return sfc
}

// SetIsUsed sets the "IsUsed" field.
func (sfc *StrategyFilterCreate) SetIsUsed(b bool) *StrategyFilterCreate {
	sfc.mutation.SetIsUsed(b)
	return sfc
}

// SetNillableIsUsed sets the "IsUsed" field if the given value is not nil.
func (sfc *StrategyFilterCreate) SetNillableIsUsed(b *bool) *StrategyFilterCreate {
	if b != nil {
		sfc.SetIsUsed(*b)
	}
	return sfc
}

// SetLeftValueKind sets the "LeftValueKind" field.
func (sfc *StrategyFilterCreate) SetLeftValueKind(i int) *StrategyFilterCreate {
	sfc.mutation.SetLeftValueKind(i)
	return sfc
}

// SetNillableLeftValueKind sets the "LeftValueKind" field if the given value is not nil.
func (sfc *StrategyFilterCreate) SetNillableLeftValueKind(i *int) *StrategyFilterCreate {
	if i != nil {
		sfc.SetLeftValueKind(*i)
	}
	return sfc
}

// SetLeftValue sets the "LeftValue" field.
func (sfc *StrategyFilterCreate) SetLeftValue(s string) *StrategyFilterCreate {
	sfc.mutation.SetLeftValue(s)
	return sfc
}

// SetRVT sets the "RVT" field.
func (sfc *StrategyFilterCreate) SetRVT(i int) *StrategyFilterCreate {
	sfc.mutation.SetRVT(i)
	return sfc
}

// SetOperation sets the "Operation" field.
func (sfc *StrategyFilterCreate) SetOperation(i int) *StrategyFilterCreate {
	sfc.mutation.SetOperation(i)
	return sfc
}

// SetNillableOperation sets the "Operation" field if the given value is not nil.
func (sfc *StrategyFilterCreate) SetNillableOperation(i *int) *StrategyFilterCreate {
	if i != nil {
		sfc.SetOperation(*i)
	}
	return sfc
}

// SetRightValue sets the "RightValue" field.
func (sfc *StrategyFilterCreate) SetRightValue(s string) *StrategyFilterCreate {
	sfc.mutation.SetRightValue(s)
	return sfc
}

// SetID sets the "id" field.
func (sfc *StrategyFilterCreate) SetID(x xid.ID) *StrategyFilterCreate {
	sfc.mutation.SetID(x)
	return sfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sfc *StrategyFilterCreate) SetNillableID(x *xid.ID) *StrategyFilterCreate {
	if x != nil {
		sfc.SetID(*x)
	}
	return sfc
}

// SetStrategyID sets the "Strategy" edge to the Strategy entity by ID.
func (sfc *StrategyFilterCreate) SetStrategyID(id xid.ID) *StrategyFilterCreate {
	sfc.mutation.SetStrategyID(id)
	return sfc
}

// SetStrategy sets the "Strategy" edge to the Strategy entity.
func (sfc *StrategyFilterCreate) SetStrategy(s *Strategy) *StrategyFilterCreate {
	return sfc.SetStrategyID(s.ID)
}

// Mutation returns the StrategyFilterMutation object of the builder.
func (sfc *StrategyFilterCreate) Mutation() *StrategyFilterMutation {
	return sfc.mutation
}

// Save creates the StrategyFilter in the database.
func (sfc *StrategyFilterCreate) Save(ctx context.Context) (*StrategyFilter, error) {
	var (
		err  error
		node *StrategyFilter
	)
	sfc.defaults()
	if len(sfc.hooks) == 0 {
		if err = sfc.check(); err != nil {
			return nil, err
		}
		node, err = sfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StrategyFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sfc.check(); err != nil {
				return nil, err
			}
			sfc.mutation = mutation
			if node, err = sfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sfc.hooks) - 1; i >= 0; i-- {
			if sfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *StrategyFilterCreate) SaveX(ctx context.Context) *StrategyFilter {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *StrategyFilterCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *StrategyFilterCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfc *StrategyFilterCreate) defaults() {
	if _, ok := sfc.mutation.LineNum(); !ok {
		v := strategyfilter.DefaultLineNum
		sfc.mutation.SetLineNum(v)
	}
	if _, ok := sfc.mutation.IsUsed(); !ok {
		v := strategyfilter.DefaultIsUsed
		sfc.mutation.SetIsUsed(v)
	}
	if _, ok := sfc.mutation.LeftValueKind(); !ok {
		v := strategyfilter.DefaultLeftValueKind
		sfc.mutation.SetLeftValueKind(v)
	}
	if _, ok := sfc.mutation.Operation(); !ok {
		v := strategyfilter.DefaultOperation
		sfc.mutation.SetOperation(v)
	}
	if _, ok := sfc.mutation.ID(); !ok {
		v := strategyfilter.DefaultID()
		sfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *StrategyFilterCreate) check() error {
	if _, ok := sfc.mutation.LineNum(); !ok {
		return &ValidationError{Name: "LineNum", err: errors.New(`ent: missing required field "StrategyFilter.LineNum"`)}
	}
	if v, ok := sfc.mutation.LineNum(); ok {
		if err := strategyfilter.LineNumValidator(v); err != nil {
			return &ValidationError{Name: "LineNum", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LineNum": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.IsUsed(); !ok {
		return &ValidationError{Name: "IsUsed", err: errors.New(`ent: missing required field "StrategyFilter.IsUsed"`)}
	}
	if _, ok := sfc.mutation.LeftValueKind(); !ok {
		return &ValidationError{Name: "LeftValueKind", err: errors.New(`ent: missing required field "StrategyFilter.LeftValueKind"`)}
	}
	if v, ok := sfc.mutation.LeftValueKind(); ok {
		if err := strategyfilter.LeftValueKindValidator(v); err != nil {
			return &ValidationError{Name: "LeftValueKind", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LeftValueKind": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.LeftValue(); !ok {
		return &ValidationError{Name: "LeftValue", err: errors.New(`ent: missing required field "StrategyFilter.LeftValue"`)}
	}
	if v, ok := sfc.mutation.LeftValue(); ok {
		if err := strategyfilter.LeftValueValidator(v); err != nil {
			return &ValidationError{Name: "LeftValue", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.LeftValue": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.RVT(); !ok {
		return &ValidationError{Name: "RVT", err: errors.New(`ent: missing required field "StrategyFilter.RVT"`)}
	}
	if _, ok := sfc.mutation.Operation(); !ok {
		return &ValidationError{Name: "Operation", err: errors.New(`ent: missing required field "StrategyFilter.Operation"`)}
	}
	if v, ok := sfc.mutation.Operation(); ok {
		if err := strategyfilter.OperationValidator(v); err != nil {
			return &ValidationError{Name: "Operation", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.Operation": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.RightValue(); !ok {
		return &ValidationError{Name: "RightValue", err: errors.New(`ent: missing required field "StrategyFilter.RightValue"`)}
	}
	if v, ok := sfc.mutation.RightValue(); ok {
		if err := strategyfilter.RightValueValidator(v); err != nil {
			return &ValidationError{Name: "RightValue", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.RightValue": %w`, err)}
		}
	}
	if v, ok := sfc.mutation.ID(); ok {
		if err := strategyfilter.IDValidator(v.String()); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "StrategyFilter.id": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.StrategyID(); !ok {
		return &ValidationError{Name: "Strategy", err: errors.New(`ent: missing required edge "StrategyFilter.Strategy"`)}
	}
	return nil
}

func (sfc *StrategyFilterCreate) sqlSave(ctx context.Context) (*StrategyFilter, error) {
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sfc *StrategyFilterCreate) createSpec() (*StrategyFilter, *sqlgraph.CreateSpec) {
	var (
		_node = &StrategyFilter{config: sfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: strategyfilter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: strategyfilter.FieldID,
			},
		}
	)
	if id, ok := sfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sfc.mutation.LineNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLineNum,
		})
		_node.LineNum = value
	}
	if value, ok := sfc.mutation.IsUsed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: strategyfilter.FieldIsUsed,
		})
		_node.IsUsed = value
	}
	if value, ok := sfc.mutation.LeftValueKind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldLeftValueKind,
		})
		_node.LeftValueKind = value
	}
	if value, ok := sfc.mutation.LeftValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfilter.FieldLeftValue,
		})
		_node.LeftValue = value
	}
	if value, ok := sfc.mutation.RVT(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldRVT,
		})
		_node.RVT = value
	}
	if value, ok := sfc.mutation.Operation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: strategyfilter.FieldOperation,
		})
		_node.Operation = value
	}
	if value, ok := sfc.mutation.RightValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: strategyfilter.FieldRightValue,
		})
		_node.RightValue = value
	}
	if nodes := sfc.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyfilter.StrategyTable,
			Columns: []string{strategyfilter.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: strategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.strategy_filters = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StrategyFilterCreateBulk is the builder for creating many StrategyFilter entities in bulk.
type StrategyFilterCreateBulk struct {
	config
	builders []*StrategyFilterCreate
}

// Save creates the StrategyFilter entities in the database.
func (sfcb *StrategyFilterCreateBulk) Save(ctx context.Context) ([]*StrategyFilter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*StrategyFilter, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyFilterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *StrategyFilterCreateBulk) SaveX(ctx context.Context) []*StrategyFilter {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *StrategyFilterCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *StrategyFilterCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
