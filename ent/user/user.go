// Code generated by entc, DO NOT EDIT.

package user

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldAuthType holds the string denoting the authtype field in the database.
	FieldAuthType = "auth_type"
	// FieldPasswordHash holds the string denoting the passwordhash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserName,
	FieldAuthType,
	FieldPasswordHash,
	FieldAdmin,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserNameValidator is a validator for the "UserName" field. It is called by the builders before save.
	UserNameValidator func(string) error
	// DefaultAuthType holds the default value on creation for the "AuthType" field.
	DefaultAuthType int32
	// AuthTypeValidator is a validator for the "AuthType" field. It is called by the builders before save.
	AuthTypeValidator func(int32) error
	// DefaultAdmin holds the default value on creation for the "Admin" field.
	DefaultAdmin bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)
