// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/predicate"
	"github.com/softilium/mb4/ent/report"
)

// ReportUpdate is the builder for updating Report entities.
type ReportUpdate struct {
	config
	hooks    []Hook
	mutation *ReportMutation
}

// Where appends a list predicates to the ReportUpdate builder.
func (ru *ReportUpdate) Where(ps ...predicate.Report) *ReportUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetYear sets the "Year" field.
func (ru *ReportUpdate) SetYear(i int) *ReportUpdate {
	ru.mutation.ResetYear()
	ru.mutation.SetYear(i)
	return ru
}

// AddYear adds i to the "Year" field.
func (ru *ReportUpdate) AddYear(i int) *ReportUpdate {
	ru.mutation.AddYear(i)
	return ru
}

// SetQuarter sets the "Quarter" field.
func (ru *ReportUpdate) SetQuarter(i int) *ReportUpdate {
	ru.mutation.ResetQuarter()
	ru.mutation.SetQuarter(i)
	return ru
}

// AddQuarter adds i to the "Quarter" field.
func (ru *ReportUpdate) AddQuarter(i int) *ReportUpdate {
	ru.mutation.AddQuarter(i)
	return ru
}

// SetReportDate sets the "ReportDate" field.
func (ru *ReportUpdate) SetReportDate(t time.Time) *ReportUpdate {
	ru.mutation.SetReportDate(t)
	return ru
}

// SetPnlRevenueYtd sets the "PnlRevenueYtd" field.
func (ru *ReportUpdate) SetPnlRevenueYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlRevenueYtd()
	ru.mutation.SetPnlRevenueYtd(f)
	return ru
}

// AddPnlRevenueYtd adds f to the "PnlRevenueYtd" field.
func (ru *ReportUpdate) AddPnlRevenueYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlRevenueYtd(f)
	return ru
}

// SetPnlAmortizationYtd sets the "PnlAmortizationYtd" field.
func (ru *ReportUpdate) SetPnlAmortizationYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlAmortizationYtd()
	ru.mutation.SetPnlAmortizationYtd(f)
	return ru
}

// AddPnlAmortizationYtd adds f to the "PnlAmortizationYtd" field.
func (ru *ReportUpdate) AddPnlAmortizationYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlAmortizationYtd(f)
	return ru
}

// SetPnlOperationIncomeYtd sets the "PnlOperationIncomeYtd" field.
func (ru *ReportUpdate) SetPnlOperationIncomeYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlOperationIncomeYtd()
	ru.mutation.SetPnlOperationIncomeYtd(f)
	return ru
}

// AddPnlOperationIncomeYtd adds f to the "PnlOperationIncomeYtd" field.
func (ru *ReportUpdate) AddPnlOperationIncomeYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlOperationIncomeYtd(f)
	return ru
}

// SetPnlInterestIncomeYtd sets the "PnlInterestIncomeYtd" field.
func (ru *ReportUpdate) SetPnlInterestIncomeYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlInterestIncomeYtd()
	ru.mutation.SetPnlInterestIncomeYtd(f)
	return ru
}

// AddPnlInterestIncomeYtd adds f to the "PnlInterestIncomeYtd" field.
func (ru *ReportUpdate) AddPnlInterestIncomeYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlInterestIncomeYtd(f)
	return ru
}

// SetPnlInterestExpensesYtd sets the "PnlInterestExpensesYtd" field.
func (ru *ReportUpdate) SetPnlInterestExpensesYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlInterestExpensesYtd()
	ru.mutation.SetPnlInterestExpensesYtd(f)
	return ru
}

// AddPnlInterestExpensesYtd adds f to the "PnlInterestExpensesYtd" field.
func (ru *ReportUpdate) AddPnlInterestExpensesYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlInterestExpensesYtd(f)
	return ru
}

// SetPnlIncomeTaxYtd sets the "PnlIncomeTaxYtd" field.
func (ru *ReportUpdate) SetPnlIncomeTaxYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlIncomeTaxYtd()
	ru.mutation.SetPnlIncomeTaxYtd(f)
	return ru
}

// AddPnlIncomeTaxYtd adds f to the "PnlIncomeTaxYtd" field.
func (ru *ReportUpdate) AddPnlIncomeTaxYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlIncomeTaxYtd(f)
	return ru
}

// SetPnlNetIncomeYtd sets the "PnlNetIncomeYtd" field.
func (ru *ReportUpdate) SetPnlNetIncomeYtd(f float64) *ReportUpdate {
	ru.mutation.ResetPnlNetIncomeYtd()
	ru.mutation.SetPnlNetIncomeYtd(f)
	return ru
}

// AddPnlNetIncomeYtd adds f to the "PnlNetIncomeYtd" field.
func (ru *ReportUpdate) AddPnlNetIncomeYtd(f float64) *ReportUpdate {
	ru.mutation.AddPnlNetIncomeYtd(f)
	return ru
}

// SetCfCashSld sets the "CfCashSld" field.
func (ru *ReportUpdate) SetCfCashSld(f float64) *ReportUpdate {
	ru.mutation.ResetCfCashSld()
	ru.mutation.SetCfCashSld(f)
	return ru
}

// AddCfCashSld adds f to the "CfCashSld" field.
func (ru *ReportUpdate) AddCfCashSld(f float64) *ReportUpdate {
	ru.mutation.AddCfCashSld(f)
	return ru
}

// SetCfNonCurrentLiabilitiesSld sets the "CfNonCurrentLiabilitiesSld" field.
func (ru *ReportUpdate) SetCfNonCurrentLiabilitiesSld(f float64) *ReportUpdate {
	ru.mutation.ResetCfNonCurrentLiabilitiesSld()
	ru.mutation.SetCfNonCurrentLiabilitiesSld(f)
	return ru
}

// AddCfNonCurrentLiabilitiesSld adds f to the "CfNonCurrentLiabilitiesSld" field.
func (ru *ReportUpdate) AddCfNonCurrentLiabilitiesSld(f float64) *ReportUpdate {
	ru.mutation.AddCfNonCurrentLiabilitiesSld(f)
	return ru
}

// SetCfCurrentLiabilitesSld sets the "CfCurrentLiabilitesSld" field.
func (ru *ReportUpdate) SetCfCurrentLiabilitesSld(f float64) *ReportUpdate {
	ru.mutation.ResetCfCurrentLiabilitesSld()
	ru.mutation.SetCfCurrentLiabilitesSld(f)
	return ru
}

// AddCfCurrentLiabilitesSld adds f to the "CfCurrentLiabilitesSld" field.
func (ru *ReportUpdate) AddCfCurrentLiabilitesSld(f float64) *ReportUpdate {
	ru.mutation.AddCfCurrentLiabilitesSld(f)
	return ru
}

// SetCfNonControlledSld sets the "CfNonControlledSld" field.
func (ru *ReportUpdate) SetCfNonControlledSld(f float64) *ReportUpdate {
	ru.mutation.ResetCfNonControlledSld()
	ru.mutation.SetCfNonControlledSld(f)
	return ru
}

// AddCfNonControlledSld adds f to the "CfNonControlledSld" field.
func (ru *ReportUpdate) AddCfNonControlledSld(f float64) *ReportUpdate {
	ru.mutation.AddCfNonControlledSld(f)
	return ru
}

// SetCfEquitySld sets the "CfEquitySld" field.
func (ru *ReportUpdate) SetCfEquitySld(f float64) *ReportUpdate {
	ru.mutation.ResetCfEquitySld()
	ru.mutation.SetCfEquitySld(f)
	return ru
}

// AddCfEquitySld adds f to the "CfEquitySld" field.
func (ru *ReportUpdate) AddCfEquitySld(f float64) *ReportUpdate {
	ru.mutation.AddCfEquitySld(f)
	return ru
}

// SetCfTotalSld sets the "CfTotalSld" field.
func (ru *ReportUpdate) SetCfTotalSld(f float64) *ReportUpdate {
	ru.mutation.ResetCfTotalSld()
	ru.mutation.SetCfTotalSld(f)
	return ru
}

// AddCfTotalSld adds f to the "CfTotalSld" field.
func (ru *ReportUpdate) AddCfTotalSld(f float64) *ReportUpdate {
	ru.mutation.AddCfTotalSld(f)
	return ru
}

// SetURL sets the "Url" field.
func (ru *ReportUpdate) SetURL(s string) *ReportUpdate {
	ru.mutation.SetURL(s)
	return ru
}

// SetNillableURL sets the "Url" field if the given value is not nil.
func (ru *ReportUpdate) SetNillableURL(s *string) *ReportUpdate {
	if s != nil {
		ru.SetURL(*s)
	}
	return ru
}

// ClearURL clears the value of the "Url" field.
func (ru *ReportUpdate) ClearURL() *ReportUpdate {
	ru.mutation.ClearURL()
	return ru
}

// SetEmitentID sets the "Emitent" edge to the Emitent entity by ID.
func (ru *ReportUpdate) SetEmitentID(id xid.ID) *ReportUpdate {
	ru.mutation.SetEmitentID(id)
	return ru
}

// SetEmitent sets the "Emitent" edge to the Emitent entity.
func (ru *ReportUpdate) SetEmitent(e *Emitent) *ReportUpdate {
	return ru.SetEmitentID(e.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (ru *ReportUpdate) Mutation() *ReportMutation {
	return ru.mutation
}

// ClearEmitent clears the "Emitent" edge to the Emitent entity.
func (ru *ReportUpdate) ClearEmitent() *ReportUpdate {
	ru.mutation.ClearEmitent()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReportUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReportUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReportUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReportUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReportUpdate) check() error {
	if v, ok := ru.mutation.Year(); ok {
		if err := report.YearValidator(v); err != nil {
			return &ValidationError{Name: "Year", err: fmt.Errorf(`ent: validator failed for field "Report.Year": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Quarter(); ok {
		if err := report.QuarterValidator(v); err != nil {
			return &ValidationError{Name: "Quarter", err: fmt.Errorf(`ent: validator failed for field "Report.Quarter": %w`, err)}
		}
	}
	if v, ok := ru.mutation.URL(); ok {
		if err := report.URLValidator(v); err != nil {
			return &ValidationError{Name: "Url", err: fmt.Errorf(`ent: validator failed for field "Report.Url": %w`, err)}
		}
	}
	if _, ok := ru.mutation.EmitentID(); ru.mutation.EmitentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Report.Emitent"`)
	}
	return nil
}

func (ru *ReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   report.Table,
			Columns: report.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: report.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldYear,
		})
	}
	if value, ok := ru.mutation.AddedYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldYear,
		})
	}
	if value, ok := ru.mutation.Quarter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldQuarter,
		})
	}
	if value, ok := ru.mutation.AddedQuarter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldQuarter,
		})
	}
	if value, ok := ru.mutation.ReportDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: report.FieldReportDate,
		})
	}
	if value, ok := ru.mutation.PnlRevenueYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlRevenueYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlRevenueYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlRevenueYtd,
		})
	}
	if value, ok := ru.mutation.PnlAmortizationYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlAmortizationYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlAmortizationYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlAmortizationYtd,
		})
	}
	if value, ok := ru.mutation.PnlOperationIncomeYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlOperationIncomeYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlOperationIncomeYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlOperationIncomeYtd,
		})
	}
	if value, ok := ru.mutation.PnlInterestIncomeYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestIncomeYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlInterestIncomeYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestIncomeYtd,
		})
	}
	if value, ok := ru.mutation.PnlInterestExpensesYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestExpensesYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlInterestExpensesYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestExpensesYtd,
		})
	}
	if value, ok := ru.mutation.PnlIncomeTaxYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlIncomeTaxYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlIncomeTaxYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlIncomeTaxYtd,
		})
	}
	if value, ok := ru.mutation.PnlNetIncomeYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlNetIncomeYtd,
		})
	}
	if value, ok := ru.mutation.AddedPnlNetIncomeYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlNetIncomeYtd,
		})
	}
	if value, ok := ru.mutation.CfCashSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCashSld,
		})
	}
	if value, ok := ru.mutation.AddedCfCashSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCashSld,
		})
	}
	if value, ok := ru.mutation.CfNonCurrentLiabilitiesSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonCurrentLiabilitiesSld,
		})
	}
	if value, ok := ru.mutation.AddedCfNonCurrentLiabilitiesSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonCurrentLiabilitiesSld,
		})
	}
	if value, ok := ru.mutation.CfCurrentLiabilitesSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCurrentLiabilitesSld,
		})
	}
	if value, ok := ru.mutation.AddedCfCurrentLiabilitesSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCurrentLiabilitesSld,
		})
	}
	if value, ok := ru.mutation.CfNonControlledSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonControlledSld,
		})
	}
	if value, ok := ru.mutation.AddedCfNonControlledSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonControlledSld,
		})
	}
	if value, ok := ru.mutation.CfEquitySld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfEquitySld,
		})
	}
	if value, ok := ru.mutation.AddedCfEquitySld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfEquitySld,
		})
	}
	if value, ok := ru.mutation.CfTotalSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfTotalSld,
		})
	}
	if value, ok := ru.mutation.AddedCfTotalSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfTotalSld,
		})
	}
	if value, ok := ru.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldURL,
		})
	}
	if ru.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: report.FieldURL,
		})
	}
	if ru.mutation.EmitentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.EmitentTable,
			Columns: []string{report.EmitentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emitent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EmitentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.EmitentTable,
			Columns: []string{report.EmitentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emitent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReportUpdateOne is the builder for updating a single Report entity.
type ReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportMutation
}

// SetYear sets the "Year" field.
func (ruo *ReportUpdateOne) SetYear(i int) *ReportUpdateOne {
	ruo.mutation.ResetYear()
	ruo.mutation.SetYear(i)
	return ruo
}

// AddYear adds i to the "Year" field.
func (ruo *ReportUpdateOne) AddYear(i int) *ReportUpdateOne {
	ruo.mutation.AddYear(i)
	return ruo
}

// SetQuarter sets the "Quarter" field.
func (ruo *ReportUpdateOne) SetQuarter(i int) *ReportUpdateOne {
	ruo.mutation.ResetQuarter()
	ruo.mutation.SetQuarter(i)
	return ruo
}

// AddQuarter adds i to the "Quarter" field.
func (ruo *ReportUpdateOne) AddQuarter(i int) *ReportUpdateOne {
	ruo.mutation.AddQuarter(i)
	return ruo
}

// SetReportDate sets the "ReportDate" field.
func (ruo *ReportUpdateOne) SetReportDate(t time.Time) *ReportUpdateOne {
	ruo.mutation.SetReportDate(t)
	return ruo
}

// SetPnlRevenueYtd sets the "PnlRevenueYtd" field.
func (ruo *ReportUpdateOne) SetPnlRevenueYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlRevenueYtd()
	ruo.mutation.SetPnlRevenueYtd(f)
	return ruo
}

// AddPnlRevenueYtd adds f to the "PnlRevenueYtd" field.
func (ruo *ReportUpdateOne) AddPnlRevenueYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlRevenueYtd(f)
	return ruo
}

// SetPnlAmortizationYtd sets the "PnlAmortizationYtd" field.
func (ruo *ReportUpdateOne) SetPnlAmortizationYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlAmortizationYtd()
	ruo.mutation.SetPnlAmortizationYtd(f)
	return ruo
}

// AddPnlAmortizationYtd adds f to the "PnlAmortizationYtd" field.
func (ruo *ReportUpdateOne) AddPnlAmortizationYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlAmortizationYtd(f)
	return ruo
}

// SetPnlOperationIncomeYtd sets the "PnlOperationIncomeYtd" field.
func (ruo *ReportUpdateOne) SetPnlOperationIncomeYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlOperationIncomeYtd()
	ruo.mutation.SetPnlOperationIncomeYtd(f)
	return ruo
}

// AddPnlOperationIncomeYtd adds f to the "PnlOperationIncomeYtd" field.
func (ruo *ReportUpdateOne) AddPnlOperationIncomeYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlOperationIncomeYtd(f)
	return ruo
}

// SetPnlInterestIncomeYtd sets the "PnlInterestIncomeYtd" field.
func (ruo *ReportUpdateOne) SetPnlInterestIncomeYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlInterestIncomeYtd()
	ruo.mutation.SetPnlInterestIncomeYtd(f)
	return ruo
}

// AddPnlInterestIncomeYtd adds f to the "PnlInterestIncomeYtd" field.
func (ruo *ReportUpdateOne) AddPnlInterestIncomeYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlInterestIncomeYtd(f)
	return ruo
}

// SetPnlInterestExpensesYtd sets the "PnlInterestExpensesYtd" field.
func (ruo *ReportUpdateOne) SetPnlInterestExpensesYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlInterestExpensesYtd()
	ruo.mutation.SetPnlInterestExpensesYtd(f)
	return ruo
}

// AddPnlInterestExpensesYtd adds f to the "PnlInterestExpensesYtd" field.
func (ruo *ReportUpdateOne) AddPnlInterestExpensesYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlInterestExpensesYtd(f)
	return ruo
}

// SetPnlIncomeTaxYtd sets the "PnlIncomeTaxYtd" field.
func (ruo *ReportUpdateOne) SetPnlIncomeTaxYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlIncomeTaxYtd()
	ruo.mutation.SetPnlIncomeTaxYtd(f)
	return ruo
}

// AddPnlIncomeTaxYtd adds f to the "PnlIncomeTaxYtd" field.
func (ruo *ReportUpdateOne) AddPnlIncomeTaxYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlIncomeTaxYtd(f)
	return ruo
}

// SetPnlNetIncomeYtd sets the "PnlNetIncomeYtd" field.
func (ruo *ReportUpdateOne) SetPnlNetIncomeYtd(f float64) *ReportUpdateOne {
	ruo.mutation.ResetPnlNetIncomeYtd()
	ruo.mutation.SetPnlNetIncomeYtd(f)
	return ruo
}

// AddPnlNetIncomeYtd adds f to the "PnlNetIncomeYtd" field.
func (ruo *ReportUpdateOne) AddPnlNetIncomeYtd(f float64) *ReportUpdateOne {
	ruo.mutation.AddPnlNetIncomeYtd(f)
	return ruo
}

// SetCfCashSld sets the "CfCashSld" field.
func (ruo *ReportUpdateOne) SetCfCashSld(f float64) *ReportUpdateOne {
	ruo.mutation.ResetCfCashSld()
	ruo.mutation.SetCfCashSld(f)
	return ruo
}

// AddCfCashSld adds f to the "CfCashSld" field.
func (ruo *ReportUpdateOne) AddCfCashSld(f float64) *ReportUpdateOne {
	ruo.mutation.AddCfCashSld(f)
	return ruo
}

// SetCfNonCurrentLiabilitiesSld sets the "CfNonCurrentLiabilitiesSld" field.
func (ruo *ReportUpdateOne) SetCfNonCurrentLiabilitiesSld(f float64) *ReportUpdateOne {
	ruo.mutation.ResetCfNonCurrentLiabilitiesSld()
	ruo.mutation.SetCfNonCurrentLiabilitiesSld(f)
	return ruo
}

// AddCfNonCurrentLiabilitiesSld adds f to the "CfNonCurrentLiabilitiesSld" field.
func (ruo *ReportUpdateOne) AddCfNonCurrentLiabilitiesSld(f float64) *ReportUpdateOne {
	ruo.mutation.AddCfNonCurrentLiabilitiesSld(f)
	return ruo
}

// SetCfCurrentLiabilitesSld sets the "CfCurrentLiabilitesSld" field.
func (ruo *ReportUpdateOne) SetCfCurrentLiabilitesSld(f float64) *ReportUpdateOne {
	ruo.mutation.ResetCfCurrentLiabilitesSld()
	ruo.mutation.SetCfCurrentLiabilitesSld(f)
	return ruo
}

// AddCfCurrentLiabilitesSld adds f to the "CfCurrentLiabilitesSld" field.
func (ruo *ReportUpdateOne) AddCfCurrentLiabilitesSld(f float64) *ReportUpdateOne {
	ruo.mutation.AddCfCurrentLiabilitesSld(f)
	return ruo
}

// SetCfNonControlledSld sets the "CfNonControlledSld" field.
func (ruo *ReportUpdateOne) SetCfNonControlledSld(f float64) *ReportUpdateOne {
	ruo.mutation.ResetCfNonControlledSld()
	ruo.mutation.SetCfNonControlledSld(f)
	return ruo
}

// AddCfNonControlledSld adds f to the "CfNonControlledSld" field.
func (ruo *ReportUpdateOne) AddCfNonControlledSld(f float64) *ReportUpdateOne {
	ruo.mutation.AddCfNonControlledSld(f)
	return ruo
}

// SetCfEquitySld sets the "CfEquitySld" field.
func (ruo *ReportUpdateOne) SetCfEquitySld(f float64) *ReportUpdateOne {
	ruo.mutation.ResetCfEquitySld()
	ruo.mutation.SetCfEquitySld(f)
	return ruo
}

// AddCfEquitySld adds f to the "CfEquitySld" field.
func (ruo *ReportUpdateOne) AddCfEquitySld(f float64) *ReportUpdateOne {
	ruo.mutation.AddCfEquitySld(f)
	return ruo
}

// SetCfTotalSld sets the "CfTotalSld" field.
func (ruo *ReportUpdateOne) SetCfTotalSld(f float64) *ReportUpdateOne {
	ruo.mutation.ResetCfTotalSld()
	ruo.mutation.SetCfTotalSld(f)
	return ruo
}

// AddCfTotalSld adds f to the "CfTotalSld" field.
func (ruo *ReportUpdateOne) AddCfTotalSld(f float64) *ReportUpdateOne {
	ruo.mutation.AddCfTotalSld(f)
	return ruo
}

// SetURL sets the "Url" field.
func (ruo *ReportUpdateOne) SetURL(s string) *ReportUpdateOne {
	ruo.mutation.SetURL(s)
	return ruo
}

// SetNillableURL sets the "Url" field if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableURL(s *string) *ReportUpdateOne {
	if s != nil {
		ruo.SetURL(*s)
	}
	return ruo
}

// ClearURL clears the value of the "Url" field.
func (ruo *ReportUpdateOne) ClearURL() *ReportUpdateOne {
	ruo.mutation.ClearURL()
	return ruo
}

// SetEmitentID sets the "Emitent" edge to the Emitent entity by ID.
func (ruo *ReportUpdateOne) SetEmitentID(id xid.ID) *ReportUpdateOne {
	ruo.mutation.SetEmitentID(id)
	return ruo
}

// SetEmitent sets the "Emitent" edge to the Emitent entity.
func (ruo *ReportUpdateOne) SetEmitent(e *Emitent) *ReportUpdateOne {
	return ruo.SetEmitentID(e.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (ruo *ReportUpdateOne) Mutation() *ReportMutation {
	return ruo.mutation
}

// ClearEmitent clears the "Emitent" edge to the Emitent entity.
func (ruo *ReportUpdateOne) ClearEmitent() *ReportUpdateOne {
	ruo.mutation.ClearEmitent()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReportUpdateOne) Select(field string, fields ...string) *ReportUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Report entity.
func (ruo *ReportUpdateOne) Save(ctx context.Context) (*Report, error) {
	var (
		err  error
		node *Report
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReportUpdateOne) SaveX(ctx context.Context) *Report {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReportUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReportUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReportUpdateOne) check() error {
	if v, ok := ruo.mutation.Year(); ok {
		if err := report.YearValidator(v); err != nil {
			return &ValidationError{Name: "Year", err: fmt.Errorf(`ent: validator failed for field "Report.Year": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Quarter(); ok {
		if err := report.QuarterValidator(v); err != nil {
			return &ValidationError{Name: "Quarter", err: fmt.Errorf(`ent: validator failed for field "Report.Quarter": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.URL(); ok {
		if err := report.URLValidator(v); err != nil {
			return &ValidationError{Name: "Url", err: fmt.Errorf(`ent: validator failed for field "Report.Url": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.EmitentID(); ruo.mutation.EmitentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Report.Emitent"`)
	}
	return nil
}

func (ruo *ReportUpdateOne) sqlSave(ctx context.Context) (_node *Report, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   report.Table,
			Columns: report.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: report.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Report.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, report.FieldID)
		for _, f := range fields {
			if !report.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != report.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldYear,
		})
	}
	if value, ok := ruo.mutation.AddedYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldYear,
		})
	}
	if value, ok := ruo.mutation.Quarter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldQuarter,
		})
	}
	if value, ok := ruo.mutation.AddedQuarter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: report.FieldQuarter,
		})
	}
	if value, ok := ruo.mutation.ReportDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: report.FieldReportDate,
		})
	}
	if value, ok := ruo.mutation.PnlRevenueYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlRevenueYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlRevenueYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlRevenueYtd,
		})
	}
	if value, ok := ruo.mutation.PnlAmortizationYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlAmortizationYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlAmortizationYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlAmortizationYtd,
		})
	}
	if value, ok := ruo.mutation.PnlOperationIncomeYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlOperationIncomeYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlOperationIncomeYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlOperationIncomeYtd,
		})
	}
	if value, ok := ruo.mutation.PnlInterestIncomeYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestIncomeYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlInterestIncomeYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestIncomeYtd,
		})
	}
	if value, ok := ruo.mutation.PnlInterestExpensesYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestExpensesYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlInterestExpensesYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlInterestExpensesYtd,
		})
	}
	if value, ok := ruo.mutation.PnlIncomeTaxYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlIncomeTaxYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlIncomeTaxYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlIncomeTaxYtd,
		})
	}
	if value, ok := ruo.mutation.PnlNetIncomeYtd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlNetIncomeYtd,
		})
	}
	if value, ok := ruo.mutation.AddedPnlNetIncomeYtd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldPnlNetIncomeYtd,
		})
	}
	if value, ok := ruo.mutation.CfCashSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCashSld,
		})
	}
	if value, ok := ruo.mutation.AddedCfCashSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCashSld,
		})
	}
	if value, ok := ruo.mutation.CfNonCurrentLiabilitiesSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonCurrentLiabilitiesSld,
		})
	}
	if value, ok := ruo.mutation.AddedCfNonCurrentLiabilitiesSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonCurrentLiabilitiesSld,
		})
	}
	if value, ok := ruo.mutation.CfCurrentLiabilitesSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCurrentLiabilitesSld,
		})
	}
	if value, ok := ruo.mutation.AddedCfCurrentLiabilitesSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfCurrentLiabilitesSld,
		})
	}
	if value, ok := ruo.mutation.CfNonControlledSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonControlledSld,
		})
	}
	if value, ok := ruo.mutation.AddedCfNonControlledSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfNonControlledSld,
		})
	}
	if value, ok := ruo.mutation.CfEquitySld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfEquitySld,
		})
	}
	if value, ok := ruo.mutation.AddedCfEquitySld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfEquitySld,
		})
	}
	if value, ok := ruo.mutation.CfTotalSld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfTotalSld,
		})
	}
	if value, ok := ruo.mutation.AddedCfTotalSld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: report.FieldCfTotalSld,
		})
	}
	if value, ok := ruo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: report.FieldURL,
		})
	}
	if ruo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: report.FieldURL,
		})
	}
	if ruo.mutation.EmitentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.EmitentTable,
			Columns: []string{report.EmitentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emitent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EmitentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.EmitentTable,
			Columns: []string{report.EmitentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emitent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Report{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
