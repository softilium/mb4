// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountvaluation"
)

// InvestAccountValuationCreate is the builder for creating a InvestAccountValuation entity.
type InvestAccountValuationCreate struct {
	config
	mutation *InvestAccountValuationMutation
	hooks    []Hook
}

// SetRecDate sets the "RecDate" field.
func (iavc *InvestAccountValuationCreate) SetRecDate(t time.Time) *InvestAccountValuationCreate {
	iavc.mutation.SetRecDate(t)
	return iavc
}

// SetValue sets the "Value" field.
func (iavc *InvestAccountValuationCreate) SetValue(f float64) *InvestAccountValuationCreate {
	iavc.mutation.SetValue(f)
	return iavc
}

// SetID sets the "id" field.
func (iavc *InvestAccountValuationCreate) SetID(x xid.ID) *InvestAccountValuationCreate {
	iavc.mutation.SetID(x)
	return iavc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iavc *InvestAccountValuationCreate) SetNillableID(x *xid.ID) *InvestAccountValuationCreate {
	if x != nil {
		iavc.SetID(*x)
	}
	return iavc
}

// SetOwnerID sets the "Owner" edge to the InvestAccount entity by ID.
func (iavc *InvestAccountValuationCreate) SetOwnerID(id xid.ID) *InvestAccountValuationCreate {
	iavc.mutation.SetOwnerID(id)
	return iavc
}

// SetNillableOwnerID sets the "Owner" edge to the InvestAccount entity by ID if the given value is not nil.
func (iavc *InvestAccountValuationCreate) SetNillableOwnerID(id *xid.ID) *InvestAccountValuationCreate {
	if id != nil {
		iavc = iavc.SetOwnerID(*id)
	}
	return iavc
}

// SetOwner sets the "Owner" edge to the InvestAccount entity.
func (iavc *InvestAccountValuationCreate) SetOwner(i *InvestAccount) *InvestAccountValuationCreate {
	return iavc.SetOwnerID(i.ID)
}

// Mutation returns the InvestAccountValuationMutation object of the builder.
func (iavc *InvestAccountValuationCreate) Mutation() *InvestAccountValuationMutation {
	return iavc.mutation
}

// Save creates the InvestAccountValuation in the database.
func (iavc *InvestAccountValuationCreate) Save(ctx context.Context) (*InvestAccountValuation, error) {
	var (
		err  error
		node *InvestAccountValuation
	)
	iavc.defaults()
	if len(iavc.hooks) == 0 {
		if err = iavc.check(); err != nil {
			return nil, err
		}
		node, err = iavc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountValuationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iavc.check(); err != nil {
				return nil, err
			}
			iavc.mutation = mutation
			if node, err = iavc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iavc.hooks) - 1; i >= 0; i-- {
			if iavc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iavc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iavc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iavc *InvestAccountValuationCreate) SaveX(ctx context.Context) *InvestAccountValuation {
	v, err := iavc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iavc *InvestAccountValuationCreate) Exec(ctx context.Context) error {
	_, err := iavc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iavc *InvestAccountValuationCreate) ExecX(ctx context.Context) {
	if err := iavc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iavc *InvestAccountValuationCreate) defaults() {
	if _, ok := iavc.mutation.ID(); !ok {
		v := investaccountvaluation.DefaultID()
		iavc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iavc *InvestAccountValuationCreate) check() error {
	if _, ok := iavc.mutation.RecDate(); !ok {
		return &ValidationError{Name: "RecDate", err: errors.New(`ent: missing required field "InvestAccountValuation.RecDate"`)}
	}
	if _, ok := iavc.mutation.Value(); !ok {
		return &ValidationError{Name: "Value", err: errors.New(`ent: missing required field "InvestAccountValuation.Value"`)}
	}
	return nil
}

func (iavc *InvestAccountValuationCreate) sqlSave(ctx context.Context) (*InvestAccountValuation, error) {
	_node, _spec := iavc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iavc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (iavc *InvestAccountValuationCreate) createSpec() (*InvestAccountValuation, *sqlgraph.CreateSpec) {
	var (
		_node = &InvestAccountValuation{config: iavc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: investaccountvaluation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccountvaluation.FieldID,
			},
		}
	)
	if id, ok := iavc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iavc.mutation.RecDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: investaccountvaluation.FieldRecDate,
		})
		_node.RecDate = value
	}
	if value, ok := iavc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountvaluation.FieldValue,
		})
		_node.Value = value
	}
	if nodes := iavc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountvaluation.OwnerTable,
			Columns: []string{investaccountvaluation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invest_account_valuations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvestAccountValuationCreateBulk is the builder for creating many InvestAccountValuation entities in bulk.
type InvestAccountValuationCreateBulk struct {
	config
	builders []*InvestAccountValuationCreate
}

// Save creates the InvestAccountValuation entities in the database.
func (iavcb *InvestAccountValuationCreateBulk) Save(ctx context.Context) ([]*InvestAccountValuation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iavcb.builders))
	nodes := make([]*InvestAccountValuation, len(iavcb.builders))
	mutators := make([]Mutator, len(iavcb.builders))
	for i := range iavcb.builders {
		func(i int, root context.Context) {
			builder := iavcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvestAccountValuationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iavcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iavcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iavcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iavcb *InvestAccountValuationCreateBulk) SaveX(ctx context.Context) []*InvestAccountValuation {
	v, err := iavcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iavcb *InvestAccountValuationCreateBulk) Exec(ctx context.Context) error {
	_, err := iavcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iavcb *InvestAccountValuationCreateBulk) ExecX(ctx context.Context) {
	if err := iavcb.Exec(ctx); err != nil {
		panic(err)
	}
}
