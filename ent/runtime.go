// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/divpayout"
	"github.com/softilium/mb4/ent/emission"
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/industry"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountcashflow"
	"github.com/softilium/mb4/ent/investaccountvaluation"
	"github.com/softilium/mb4/ent/quote"
	"github.com/softilium/mb4/ent/report"
	"github.com/softilium/mb4/ent/schema"
	"github.com/softilium/mb4/ent/ticker"
	"github.com/softilium/mb4/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	divpayoutFields := schema.DivPayout{}.Fields()
	_ = divpayoutFields
	// divpayoutDescForYear is the schema descriptor for ForYear field.
	divpayoutDescForYear := divpayoutFields[0].Descriptor()
	// divpayout.ForYearValidator is a validator for the "ForYear" field. It is called by the builders before save.
	divpayout.ForYearValidator = divpayoutDescForYear.Validators[0].(func(int) error)
	// divpayoutDescForQuarter is the schema descriptor for ForQuarter field.
	divpayoutDescForQuarter := divpayoutFields[1].Descriptor()
	// divpayout.ForQuarterValidator is a validator for the "ForQuarter" field. It is called by the builders before save.
	divpayout.ForQuarterValidator = divpayoutDescForQuarter.Validators[0].(func(int) error)
	// divpayoutDescStatus is the schema descriptor for Status field.
	divpayoutDescStatus := divpayoutFields[3].Descriptor()
	// divpayout.StatusValidator is a validator for the "Status" field. It is called by the builders before save.
	divpayout.StatusValidator = divpayoutDescStatus.Validators[0].(func(int) error)
	emissionFields := schema.Emission{}.Fields()
	_ = emissionFields
	// emissionDescID is the schema descriptor for id field.
	emissionDescID := emissionFields[0].Descriptor()
	// emission.DefaultID holds the default value on creation for the id field.
	emission.DefaultID = emissionDescID.Default.(func() xid.ID)
	// emission.IDValidator is a validator for the "id" field. It is called by the builders before save.
	emission.IDValidator = func() func(string) error {
		validators := emissionDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	emitentFields := schema.Emitent{}.Fields()
	_ = emitentFields
	// emitentDescDescr is the schema descriptor for Descr field.
	emitentDescDescr := emitentFields[1].Descriptor()
	// emitent.DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	emitent.DescrValidator = func() func(string) error {
		validators := emitentDescDescr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Descr string) error {
			for _, fn := range fns {
				if err := fn(_Descr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// emitentDescID is the schema descriptor for id field.
	emitentDescID := emitentFields[0].Descriptor()
	// emitent.DefaultID holds the default value on creation for the id field.
	emitent.DefaultID = emitentDescID.Default.(func() xid.ID)
	// emitent.IDValidator is a validator for the "id" field. It is called by the builders before save.
	emitent.IDValidator = func() func(string) error {
		validators := emitentDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	industryFields := schema.Industry{}.Fields()
	_ = industryFields
	// industryDescDescr is the schema descriptor for Descr field.
	industryDescDescr := industryFields[1].Descriptor()
	// industry.DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	industry.DescrValidator = func() func(string) error {
		validators := industryDescDescr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Descr string) error {
			for _, fn := range fns {
				if err := fn(_Descr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// industryDescID is the schema descriptor for id field.
	industryDescID := industryFields[0].Descriptor()
	// industry.IDValidator is a validator for the "id" field. It is called by the builders before save.
	industry.IDValidator = func() func(string) error {
		validators := industryDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	investaccountFields := schema.InvestAccount{}.Fields()
	_ = investaccountFields
	// investaccountDescDescr is the schema descriptor for Descr field.
	investaccountDescDescr := investaccountFields[1].Descriptor()
	// investaccount.DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	investaccount.DescrValidator = func() func(string) error {
		validators := investaccountDescDescr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Descr string) error {
			for _, fn := range fns {
				if err := fn(_Descr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// investaccountDescID is the schema descriptor for id field.
	investaccountDescID := investaccountFields[0].Descriptor()
	// investaccount.DefaultID holds the default value on creation for the id field.
	investaccount.DefaultID = investaccountDescID.Default.(func() xid.ID)
	// investaccount.IDValidator is a validator for the "id" field. It is called by the builders before save.
	investaccount.IDValidator = func() func(string) error {
		validators := investaccountDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	investaccountcashflowFields := schema.InvestAccountCashflow{}.Fields()
	_ = investaccountcashflowFields
	// investaccountcashflowDescID is the schema descriptor for id field.
	investaccountcashflowDescID := investaccountcashflowFields[0].Descriptor()
	// investaccountcashflow.DefaultID holds the default value on creation for the id field.
	investaccountcashflow.DefaultID = investaccountcashflowDescID.Default.(func() xid.ID)
	// investaccountcashflow.IDValidator is a validator for the "id" field. It is called by the builders before save.
	investaccountcashflow.IDValidator = func() func(string) error {
		validators := investaccountcashflowDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	investaccountvaluationFields := schema.InvestAccountValuation{}.Fields()
	_ = investaccountvaluationFields
	// investaccountvaluationDescID is the schema descriptor for id field.
	investaccountvaluationDescID := investaccountvaluationFields[0].Descriptor()
	// investaccountvaluation.DefaultID holds the default value on creation for the id field.
	investaccountvaluation.DefaultID = investaccountvaluationDescID.Default.(func() xid.ID)
	// investaccountvaluation.IDValidator is a validator for the "id" field. It is called by the builders before save.
	investaccountvaluation.IDValidator = func() func(string) error {
		validators := investaccountvaluationDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	quoteFields := schema.Quote{}.Fields()
	_ = quoteFields
	// quoteDescID is the schema descriptor for id field.
	quoteDescID := quoteFields[0].Descriptor()
	// quote.DefaultID holds the default value on creation for the id field.
	quote.DefaultID = quoteDescID.Default.(func() xid.ID)
	// quote.IDValidator is a validator for the "id" field. It is called by the builders before save.
	quote.IDValidator = func() func(string) error {
		validators := quoteDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	reportFields := schema.Report{}.Fields()
	_ = reportFields
	// reportDescReportYear is the schema descriptor for ReportYear field.
	reportDescReportYear := reportFields[1].Descriptor()
	// report.ReportYearValidator is a validator for the "ReportYear" field. It is called by the builders before save.
	report.ReportYearValidator = reportDescReportYear.Validators[0].(func(int) error)
	// reportDescReportQuarter is the schema descriptor for ReportQuarter field.
	reportDescReportQuarter := reportFields[2].Descriptor()
	// report.ReportQuarterValidator is a validator for the "ReportQuarter" field. It is called by the builders before save.
	report.ReportQuarterValidator = reportDescReportQuarter.Validators[0].(func(int) error)
	// reportDescURL is the schema descriptor for Url field.
	reportDescURL := reportFields[17].Descriptor()
	// report.URLValidator is a validator for the "Url" field. It is called by the builders before save.
	report.URLValidator = reportDescURL.Validators[0].(func(string) error)
	// reportDescID is the schema descriptor for id field.
	reportDescID := reportFields[0].Descriptor()
	// report.DefaultID holds the default value on creation for the id field.
	report.DefaultID = reportDescID.Default.(func() xid.ID)
	// report.IDValidator is a validator for the "id" field. It is called by the builders before save.
	report.IDValidator = func() func(string) error {
		validators := reportDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	tickerFields := schema.Ticker{}.Fields()
	_ = tickerFields
	// tickerDescDescr is the schema descriptor for Descr field.
	tickerDescDescr := tickerFields[1].Descriptor()
	// ticker.DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	ticker.DescrValidator = func() func(string) error {
		validators := tickerDescDescr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Descr string) error {
			for _, fn := range fns {
				if err := fn(_Descr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tickerDescKind is the schema descriptor for Kind field.
	tickerDescKind := tickerFields[2].Descriptor()
	// ticker.DefaultKind holds the default value on creation for the Kind field.
	ticker.DefaultKind = tickerDescKind.Default.(int32)
	// tickerDescID is the schema descriptor for id field.
	tickerDescID := tickerFields[0].Descriptor()
	// ticker.IDValidator is a validator for the "id" field. It is called by the builders before save.
	ticker.IDValidator = func() func(string) error {
		validators := tickerDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUserName is the schema descriptor for UserName field.
	userDescUserName := userFields[1].Descriptor()
	// user.UserNameValidator is a validator for the "UserName" field. It is called by the builders before save.
	user.UserNameValidator = func() func(string) error {
		validators := userDescUserName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_UserName string) error {
			for _, fn := range fns {
				if err := fn(_UserName); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAdmin is the schema descriptor for Admin field.
	userDescAdmin := userFields[3].Descriptor()
	// user.DefaultAdmin holds the default value on creation for the Admin field.
	user.DefaultAdmin = userDescAdmin.Default.(bool)
	// userDescHowManyTickersOnHomepage is the schema descriptor for HowManyTickersOnHomepage field.
	userDescHowManyTickersOnHomepage := userFields[5].Descriptor()
	// user.DefaultHowManyTickersOnHomepage holds the default value on creation for the HowManyTickersOnHomepage field.
	user.DefaultHowManyTickersOnHomepage = userDescHowManyTickersOnHomepage.Default.(int)
	// user.HowManyTickersOnHomepageValidator is a validator for the "HowManyTickersOnHomepage" field. It is called by the builders before save.
	user.HowManyTickersOnHomepageValidator = userDescHowManyTickersOnHomepage.Validators[0].(func(int) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() xid.ID)
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
