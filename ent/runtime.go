// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/industry"
	"github.com/softilium/mb4/ent/schema"
	"github.com/softilium/mb4/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	emitentFields := schema.Emitent{}.Fields()
	_ = emitentFields
	// emitentDescDescr is the schema descriptor for Descr field.
	emitentDescDescr := emitentFields[0].Descriptor()
	// emitent.DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	emitent.DescrValidator = func() func(string) error {
		validators := emitentDescDescr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Descr string) error {
			for _, fn := range fns {
				if err := fn(_Descr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	industryFields := schema.Industry{}.Fields()
	_ = industryFields
	// industryDescDescr is the schema descriptor for Descr field.
	industryDescDescr := industryFields[0].Descriptor()
	// industry.DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	industry.DescrValidator = func() func(string) error {
		validators := industryDescDescr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Descr string) error {
			for _, fn := range fns {
				if err := fn(_Descr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUserName is the schema descriptor for UserName field.
	userDescUserName := userFields[0].Descriptor()
	// user.UserNameValidator is a validator for the "UserName" field. It is called by the builders before save.
	user.UserNameValidator = func() func(string) error {
		validators := userDescUserName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_UserName string) error {
			for _, fn := range fns {
				if err := fn(_UserName); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAuthType is the schema descriptor for AuthType field.
	userDescAuthType := userFields[1].Descriptor()
	// user.DefaultAuthType holds the default value on creation for the AuthType field.
	user.DefaultAuthType = userDescAuthType.Default.(int32)
	// user.AuthTypeValidator is a validator for the "AuthType" field. It is called by the builders before save.
	user.AuthTypeValidator = userDescAuthType.Validators[0].(func(int32) error)
	// userDescAdmin is the schema descriptor for Admin field.
	userDescAdmin := userFields[3].Descriptor()
	// user.DefaultAdmin holds the default value on creation for the Admin field.
	user.DefaultAdmin = userDescAdmin.Default.(bool)
}
