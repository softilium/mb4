// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/quote"
	"github.com/softilium/mb4/ent/ticker"
)

// QuoteCreate is the builder for creating a Quote entity.
type QuoteCreate struct {
	config
	mutation *QuoteMutation
	hooks    []Hook
}

// SetD sets the "D" field.
func (qc *QuoteCreate) SetD(t time.Time) *QuoteCreate {
	qc.mutation.SetD(t)
	return qc
}

// SetO sets the "O" field.
func (qc *QuoteCreate) SetO(f float64) *QuoteCreate {
	qc.mutation.SetO(f)
	return qc
}

// SetC sets the "C" field.
func (qc *QuoteCreate) SetC(f float64) *QuoteCreate {
	qc.mutation.SetC(f)
	return qc
}

// SetH sets the "H" field.
func (qc *QuoteCreate) SetH(f float64) *QuoteCreate {
	qc.mutation.SetH(f)
	return qc
}

// SetL sets the "L" field.
func (qc *QuoteCreate) SetL(f float64) *QuoteCreate {
	qc.mutation.SetL(f)
	return qc
}

// SetV sets the "V" field.
func (qc *QuoteCreate) SetV(f float64) *QuoteCreate {
	qc.mutation.SetV(f)
	return qc
}

// SetCap sets the "Cap" field.
func (qc *QuoteCreate) SetCap(f float64) *QuoteCreate {
	qc.mutation.SetCap(f)
	return qc
}

// SetDivSum5Y sets the "DivSum_5Y" field.
func (qc *QuoteCreate) SetDivSum5Y(f float64) *QuoteCreate {
	qc.mutation.SetDivSum5Y(f)
	return qc
}

// SetDivYield5Y sets the "DivYield_5Y" field.
func (qc *QuoteCreate) SetDivYield5Y(f float64) *QuoteCreate {
	qc.mutation.SetDivYield5Y(f)
	return qc
}

// SetLotSize sets the "LotSize" field.
func (qc *QuoteCreate) SetLotSize(i int) *QuoteCreate {
	qc.mutation.SetLotSize(i)
	return qc
}

// SetListLevel sets the "ListLevel" field.
func (qc *QuoteCreate) SetListLevel(i int) *QuoteCreate {
	qc.mutation.SetListLevel(i)
	return qc
}

// SetID sets the "id" field.
func (qc *QuoteCreate) SetID(x xid.ID) *QuoteCreate {
	qc.mutation.SetID(x)
	return qc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qc *QuoteCreate) SetNillableID(x *xid.ID) *QuoteCreate {
	if x != nil {
		qc.SetID(*x)
	}
	return qc
}

// SetTickerID sets the "Ticker" edge to the Ticker entity by ID.
func (qc *QuoteCreate) SetTickerID(id string) *QuoteCreate {
	qc.mutation.SetTickerID(id)
	return qc
}

// SetTicker sets the "Ticker" edge to the Ticker entity.
func (qc *QuoteCreate) SetTicker(t *Ticker) *QuoteCreate {
	return qc.SetTickerID(t.ID)
}

// Mutation returns the QuoteMutation object of the builder.
func (qc *QuoteCreate) Mutation() *QuoteMutation {
	return qc.mutation
}

// Save creates the Quote in the database.
func (qc *QuoteCreate) Save(ctx context.Context) (*Quote, error) {
	var (
		err  error
		node *Quote
	)
	qc.defaults()
	if len(qc.hooks) == 0 {
		if err = qc.check(); err != nil {
			return nil, err
		}
		node, err = qc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qc.check(); err != nil {
				return nil, err
			}
			qc.mutation = mutation
			if node, err = qc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(qc.hooks) - 1; i >= 0; i-- {
			if qc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuoteCreate) SaveX(ctx context.Context) *Quote {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuoteCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuoteCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuoteCreate) defaults() {
	if _, ok := qc.mutation.ID(); !ok {
		v := quote.DefaultID()
		qc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuoteCreate) check() error {
	if _, ok := qc.mutation.D(); !ok {
		return &ValidationError{Name: "D", err: errors.New(`ent: missing required field "Quote.D"`)}
	}
	if _, ok := qc.mutation.O(); !ok {
		return &ValidationError{Name: "O", err: errors.New(`ent: missing required field "Quote.O"`)}
	}
	if _, ok := qc.mutation.C(); !ok {
		return &ValidationError{Name: "C", err: errors.New(`ent: missing required field "Quote.C"`)}
	}
	if _, ok := qc.mutation.H(); !ok {
		return &ValidationError{Name: "H", err: errors.New(`ent: missing required field "Quote.H"`)}
	}
	if _, ok := qc.mutation.L(); !ok {
		return &ValidationError{Name: "L", err: errors.New(`ent: missing required field "Quote.L"`)}
	}
	if _, ok := qc.mutation.V(); !ok {
		return &ValidationError{Name: "V", err: errors.New(`ent: missing required field "Quote.V"`)}
	}
	if _, ok := qc.mutation.Cap(); !ok {
		return &ValidationError{Name: "Cap", err: errors.New(`ent: missing required field "Quote.Cap"`)}
	}
	if _, ok := qc.mutation.DivSum5Y(); !ok {
		return &ValidationError{Name: "DivSum_5Y", err: errors.New(`ent: missing required field "Quote.DivSum_5Y"`)}
	}
	if _, ok := qc.mutation.DivYield5Y(); !ok {
		return &ValidationError{Name: "DivYield_5Y", err: errors.New(`ent: missing required field "Quote.DivYield_5Y"`)}
	}
	if _, ok := qc.mutation.LotSize(); !ok {
		return &ValidationError{Name: "LotSize", err: errors.New(`ent: missing required field "Quote.LotSize"`)}
	}
	if v, ok := qc.mutation.LotSize(); ok {
		if err := quote.LotSizeValidator(v); err != nil {
			return &ValidationError{Name: "LotSize", err: fmt.Errorf(`ent: validator failed for field "Quote.LotSize": %w`, err)}
		}
	}
	if _, ok := qc.mutation.ListLevel(); !ok {
		return &ValidationError{Name: "ListLevel", err: errors.New(`ent: missing required field "Quote.ListLevel"`)}
	}
	if _, ok := qc.mutation.TickerID(); !ok {
		return &ValidationError{Name: "Ticker", err: errors.New(`ent: missing required edge "Quote.Ticker"`)}
	}
	return nil
}

func (qc *QuoteCreate) sqlSave(ctx context.Context) (*Quote, error) {
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (qc *QuoteCreate) createSpec() (*Quote, *sqlgraph.CreateSpec) {
	var (
		_node = &Quote{config: qc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: quote.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: quote.FieldID,
			},
		}
	)
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qc.mutation.D(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: quote.FieldD,
		})
		_node.D = value
	}
	if value, ok := qc.mutation.O(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldO,
		})
		_node.O = value
	}
	if value, ok := qc.mutation.C(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldC,
		})
		_node.C = value
	}
	if value, ok := qc.mutation.H(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldH,
		})
		_node.H = value
	}
	if value, ok := qc.mutation.L(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldL,
		})
		_node.L = value
	}
	if value, ok := qc.mutation.V(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldV,
		})
		_node.V = value
	}
	if value, ok := qc.mutation.Cap(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldCap,
		})
		_node.Cap = value
	}
	if value, ok := qc.mutation.DivSum5Y(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldDivSum5Y,
		})
		_node.DivSum5Y = value
	}
	if value, ok := qc.mutation.DivYield5Y(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: quote.FieldDivYield5Y,
		})
		_node.DivYield5Y = value
	}
	if value, ok := qc.mutation.LotSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldLotSize,
		})
		_node.LotSize = value
	}
	if value, ok := qc.mutation.ListLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: quote.FieldListLevel,
		})
		_node.ListLevel = value
	}
	if nodes := qc.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quote.TickerTable,
			Columns: []string{quote.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ticker_quotes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuoteCreateBulk is the builder for creating many Quote entities in bulk.
type QuoteCreateBulk struct {
	config
	builders []*QuoteCreate
}

// Save creates the Quote entities in the database.
func (qcb *QuoteCreateBulk) Save(ctx context.Context) ([]*Quote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Quote, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuoteCreateBulk) SaveX(ctx context.Context) []*Quote {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuoteCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuoteCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
