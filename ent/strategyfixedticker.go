// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/strategy"
	"github.com/softilium/mb4/ent/strategyfixedticker"
)

// StrategyFixedTicker is the model entity for the StrategyFixedTicker schema.
type StrategyFixedTicker struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// LineNum holds the value of the "LineNum" field.
	LineNum int `json:"LineNum,omitempty"`
	// IsUsed holds the value of the "IsUsed" field.
	IsUsed bool `json:"IsUsed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyFixedTickerQuery when eager-loading is set.
	Edges                  StrategyFixedTickerEdges `json:"edges"`
	strategy_fixed_tickers *xid.ID
}

// StrategyFixedTickerEdges holds the relations/edges for other nodes in the graph.
type StrategyFixedTickerEdges struct {
	// Strategy holds the value of the Strategy edge.
	Strategy *Strategy `json:"Strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyFixedTickerEdges) StrategyOrErr() (*Strategy, error) {
	if e.loadedTypes[0] {
		if e.Strategy == nil {
			// The edge Strategy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: strategy.Label}
		}
		return e.Strategy, nil
	}
	return nil, &NotLoadedError{edge: "Strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyFixedTicker) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategyfixedticker.FieldIsUsed:
			values[i] = new(sql.NullBool)
		case strategyfixedticker.FieldLineNum:
			values[i] = new(sql.NullInt64)
		case strategyfixedticker.FieldID:
			values[i] = new(xid.ID)
		case strategyfixedticker.ForeignKeys[0]: // strategy_fixed_tickers
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StrategyFixedTicker", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyFixedTicker fields.
func (sft *StrategyFixedTicker) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategyfixedticker.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sft.ID = *value
			}
		case strategyfixedticker.FieldLineNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LineNum", values[i])
			} else if value.Valid {
				sft.LineNum = int(value.Int64)
			}
		case strategyfixedticker.FieldIsUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsUsed", values[i])
			} else if value.Valid {
				sft.IsUsed = value.Bool
			}
		case strategyfixedticker.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_fixed_tickers", values[i])
			} else if value.Valid {
				sft.strategy_fixed_tickers = new(xid.ID)
				*sft.strategy_fixed_tickers = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryStrategy queries the "Strategy" edge of the StrategyFixedTicker entity.
func (sft *StrategyFixedTicker) QueryStrategy() *StrategyQuery {
	return (&StrategyFixedTickerClient{config: sft.config}).QueryStrategy(sft)
}

// Update returns a builder for updating this StrategyFixedTicker.
// Note that you need to call StrategyFixedTicker.Unwrap() before calling this method if this StrategyFixedTicker
// was returned from a transaction, and the transaction was committed or rolled back.
func (sft *StrategyFixedTicker) Update() *StrategyFixedTickerUpdateOne {
	return (&StrategyFixedTickerClient{config: sft.config}).UpdateOne(sft)
}

// Unwrap unwraps the StrategyFixedTicker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sft *StrategyFixedTicker) Unwrap() *StrategyFixedTicker {
	tx, ok := sft.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyFixedTicker is not a transactional entity")
	}
	sft.config.driver = tx.drv
	return sft
}

// String implements the fmt.Stringer.
func (sft *StrategyFixedTicker) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyFixedTicker(")
	builder.WriteString(fmt.Sprintf("id=%v", sft.ID))
	builder.WriteString(", LineNum=")
	builder.WriteString(fmt.Sprintf("%v", sft.LineNum))
	builder.WriteString(", IsUsed=")
	builder.WriteString(fmt.Sprintf("%v", sft.IsUsed))
	builder.WriteByte(')')
	return builder.String()
}

// StrategyFixedTickers is a parsable slice of StrategyFixedTicker.
type StrategyFixedTickers []*StrategyFixedTicker

func (sft StrategyFixedTickers) config(cfg config) {
	for _i := range sft {
		sft[_i].config = cfg
	}
}
