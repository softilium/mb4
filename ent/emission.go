// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/emission"
	"github.com/softilium/mb4/ent/ticker"
)

// Emission is the model entity for the Emission schema.
type Emission struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// RecDate holds the value of the "RecDate" field.
	RecDate time.Time `json:"RecDate,omitempty"`
	// Size holds the value of the "Size" field.
	Size int64 `json:"Size,omitempty"`
	// FreeFloat holds the value of the "FreeFloat" field.
	FreeFloat int `json:"FreeFloat,omitempty"`
	// LotSize holds the value of the "LotSize" field.
	LotSize int `json:"LotSize,omitempty"`
	// ListingLevel holds the value of the "ListingLevel" field.
	ListingLevel int `json:"ListingLevel,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmissionQuery when eager-loading is set.
	Edges            EmissionEdges `json:"edges"`
	ticker_emissions *string
}

// EmissionEdges holds the relations/edges for other nodes in the graph.
type EmissionEdges struct {
	// Ticker holds the value of the Ticker edge.
	Ticker *Ticker `json:"Ticker,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TickerOrErr returns the Ticker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmissionEdges) TickerOrErr() (*Ticker, error) {
	if e.loadedTypes[0] {
		if e.Ticker == nil {
			// The edge Ticker was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ticker.Label}
		}
		return e.Ticker, nil
	}
	return nil, &NotLoadedError{edge: "Ticker"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Emission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case emission.FieldSize, emission.FieldFreeFloat, emission.FieldLotSize, emission.FieldListingLevel:
			values[i] = new(sql.NullInt64)
		case emission.FieldRecDate:
			values[i] = new(sql.NullTime)
		case emission.FieldID:
			values[i] = new(xid.ID)
		case emission.ForeignKeys[0]: // ticker_emissions
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Emission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Emission fields.
func (e *Emission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emission.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case emission.FieldRecDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field RecDate", values[i])
			} else if value.Valid {
				e.RecDate = value.Time
			}
		case emission.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Size", values[i])
			} else if value.Valid {
				e.Size = value.Int64
			}
		case emission.FieldFreeFloat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FreeFloat", values[i])
			} else if value.Valid {
				e.FreeFloat = int(value.Int64)
			}
		case emission.FieldLotSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LotSize", values[i])
			} else if value.Valid {
				e.LotSize = int(value.Int64)
			}
		case emission.FieldListingLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ListingLevel", values[i])
			} else if value.Valid {
				e.ListingLevel = int(value.Int64)
			}
		case emission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticker_emissions", values[i])
			} else if value.Valid {
				e.ticker_emissions = new(string)
				*e.ticker_emissions = value.String
			}
		}
	}
	return nil
}

// QueryTicker queries the "Ticker" edge of the Emission entity.
func (e *Emission) QueryTicker() *TickerQuery {
	return (&EmissionClient{config: e.config}).QueryTicker(e)
}

// Update returns a builder for updating this Emission.
// Note that you need to call Emission.Unwrap() before calling this method if this Emission
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Emission) Update() *EmissionUpdateOne {
	return (&EmissionClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Emission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Emission) Unwrap() *Emission {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Emission is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Emission) String() string {
	var builder strings.Builder
	builder.WriteString("Emission(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", RecDate=")
	builder.WriteString(e.RecDate.Format(time.ANSIC))
	builder.WriteString(", Size=")
	builder.WriteString(fmt.Sprintf("%v", e.Size))
	builder.WriteString(", FreeFloat=")
	builder.WriteString(fmt.Sprintf("%v", e.FreeFloat))
	builder.WriteString(", LotSize=")
	builder.WriteString(fmt.Sprintf("%v", e.LotSize))
	builder.WriteString(", ListingLevel=")
	builder.WriteString(fmt.Sprintf("%v", e.ListingLevel))
	builder.WriteByte(')')
	return builder.String()
}

// Emissions is a parsable slice of Emission.
type Emissions []*Emission

func (e Emissions) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
