// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/investaccount"
	"github.com/softilium/mb4/ent/investaccountvaluation"
	"github.com/softilium/mb4/ent/predicate"
)

// InvestAccountValuationUpdate is the builder for updating InvestAccountValuation entities.
type InvestAccountValuationUpdate struct {
	config
	hooks    []Hook
	mutation *InvestAccountValuationMutation
}

// Where appends a list predicates to the InvestAccountValuationUpdate builder.
func (iavu *InvestAccountValuationUpdate) Where(ps ...predicate.InvestAccountValuation) *InvestAccountValuationUpdate {
	iavu.mutation.Where(ps...)
	return iavu
}

// SetRecDate sets the "RecDate" field.
func (iavu *InvestAccountValuationUpdate) SetRecDate(t time.Time) *InvestAccountValuationUpdate {
	iavu.mutation.SetRecDate(t)
	return iavu
}

// SetValue sets the "Value" field.
func (iavu *InvestAccountValuationUpdate) SetValue(f float64) *InvestAccountValuationUpdate {
	iavu.mutation.ResetValue()
	iavu.mutation.SetValue(f)
	return iavu
}

// AddValue adds f to the "Value" field.
func (iavu *InvestAccountValuationUpdate) AddValue(f float64) *InvestAccountValuationUpdate {
	iavu.mutation.AddValue(f)
	return iavu
}

// SetOwnerID sets the "Owner" edge to the InvestAccount entity by ID.
func (iavu *InvestAccountValuationUpdate) SetOwnerID(id xid.ID) *InvestAccountValuationUpdate {
	iavu.mutation.SetOwnerID(id)
	return iavu
}

// SetOwner sets the "Owner" edge to the InvestAccount entity.
func (iavu *InvestAccountValuationUpdate) SetOwner(i *InvestAccount) *InvestAccountValuationUpdate {
	return iavu.SetOwnerID(i.ID)
}

// Mutation returns the InvestAccountValuationMutation object of the builder.
func (iavu *InvestAccountValuationUpdate) Mutation() *InvestAccountValuationMutation {
	return iavu.mutation
}

// ClearOwner clears the "Owner" edge to the InvestAccount entity.
func (iavu *InvestAccountValuationUpdate) ClearOwner() *InvestAccountValuationUpdate {
	iavu.mutation.ClearOwner()
	return iavu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iavu *InvestAccountValuationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iavu.hooks) == 0 {
		if err = iavu.check(); err != nil {
			return 0, err
		}
		affected, err = iavu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountValuationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iavu.check(); err != nil {
				return 0, err
			}
			iavu.mutation = mutation
			affected, err = iavu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iavu.hooks) - 1; i >= 0; i-- {
			if iavu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iavu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iavu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iavu *InvestAccountValuationUpdate) SaveX(ctx context.Context) int {
	affected, err := iavu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iavu *InvestAccountValuationUpdate) Exec(ctx context.Context) error {
	_, err := iavu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iavu *InvestAccountValuationUpdate) ExecX(ctx context.Context) {
	if err := iavu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iavu *InvestAccountValuationUpdate) check() error {
	if _, ok := iavu.mutation.OwnerID(); iavu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvestAccountValuation.Owner"`)
	}
	return nil
}

func (iavu *InvestAccountValuationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccountvaluation.Table,
			Columns: investaccountvaluation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccountvaluation.FieldID,
			},
		},
	}
	if ps := iavu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iavu.mutation.RecDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: investaccountvaluation.FieldRecDate,
		})
	}
	if value, ok := iavu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountvaluation.FieldValue,
		})
	}
	if value, ok := iavu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountvaluation.FieldValue,
		})
	}
	if iavu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountvaluation.OwnerTable,
			Columns: []string{investaccountvaluation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iavu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountvaluation.OwnerTable,
			Columns: []string{investaccountvaluation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iavu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investaccountvaluation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InvestAccountValuationUpdateOne is the builder for updating a single InvestAccountValuation entity.
type InvestAccountValuationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvestAccountValuationMutation
}

// SetRecDate sets the "RecDate" field.
func (iavuo *InvestAccountValuationUpdateOne) SetRecDate(t time.Time) *InvestAccountValuationUpdateOne {
	iavuo.mutation.SetRecDate(t)
	return iavuo
}

// SetValue sets the "Value" field.
func (iavuo *InvestAccountValuationUpdateOne) SetValue(f float64) *InvestAccountValuationUpdateOne {
	iavuo.mutation.ResetValue()
	iavuo.mutation.SetValue(f)
	return iavuo
}

// AddValue adds f to the "Value" field.
func (iavuo *InvestAccountValuationUpdateOne) AddValue(f float64) *InvestAccountValuationUpdateOne {
	iavuo.mutation.AddValue(f)
	return iavuo
}

// SetOwnerID sets the "Owner" edge to the InvestAccount entity by ID.
func (iavuo *InvestAccountValuationUpdateOne) SetOwnerID(id xid.ID) *InvestAccountValuationUpdateOne {
	iavuo.mutation.SetOwnerID(id)
	return iavuo
}

// SetOwner sets the "Owner" edge to the InvestAccount entity.
func (iavuo *InvestAccountValuationUpdateOne) SetOwner(i *InvestAccount) *InvestAccountValuationUpdateOne {
	return iavuo.SetOwnerID(i.ID)
}

// Mutation returns the InvestAccountValuationMutation object of the builder.
func (iavuo *InvestAccountValuationUpdateOne) Mutation() *InvestAccountValuationMutation {
	return iavuo.mutation
}

// ClearOwner clears the "Owner" edge to the InvestAccount entity.
func (iavuo *InvestAccountValuationUpdateOne) ClearOwner() *InvestAccountValuationUpdateOne {
	iavuo.mutation.ClearOwner()
	return iavuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iavuo *InvestAccountValuationUpdateOne) Select(field string, fields ...string) *InvestAccountValuationUpdateOne {
	iavuo.fields = append([]string{field}, fields...)
	return iavuo
}

// Save executes the query and returns the updated InvestAccountValuation entity.
func (iavuo *InvestAccountValuationUpdateOne) Save(ctx context.Context) (*InvestAccountValuation, error) {
	var (
		err  error
		node *InvestAccountValuation
	)
	if len(iavuo.hooks) == 0 {
		if err = iavuo.check(); err != nil {
			return nil, err
		}
		node, err = iavuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestAccountValuationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iavuo.check(); err != nil {
				return nil, err
			}
			iavuo.mutation = mutation
			node, err = iavuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iavuo.hooks) - 1; i >= 0; i-- {
			if iavuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iavuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iavuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iavuo *InvestAccountValuationUpdateOne) SaveX(ctx context.Context) *InvestAccountValuation {
	node, err := iavuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iavuo *InvestAccountValuationUpdateOne) Exec(ctx context.Context) error {
	_, err := iavuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iavuo *InvestAccountValuationUpdateOne) ExecX(ctx context.Context) {
	if err := iavuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iavuo *InvestAccountValuationUpdateOne) check() error {
	if _, ok := iavuo.mutation.OwnerID(); iavuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvestAccountValuation.Owner"`)
	}
	return nil
}

func (iavuo *InvestAccountValuationUpdateOne) sqlSave(ctx context.Context) (_node *InvestAccountValuation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investaccountvaluation.Table,
			Columns: investaccountvaluation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: investaccountvaluation.FieldID,
			},
		},
	}
	id, ok := iavuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvestAccountValuation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iavuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, investaccountvaluation.FieldID)
		for _, f := range fields {
			if !investaccountvaluation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != investaccountvaluation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iavuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iavuo.mutation.RecDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: investaccountvaluation.FieldRecDate,
		})
	}
	if value, ok := iavuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountvaluation.FieldValue,
		})
	}
	if value, ok := iavuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: investaccountvaluation.FieldValue,
		})
	}
	if iavuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountvaluation.OwnerTable,
			Columns: []string{investaccountvaluation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iavuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investaccountvaluation.OwnerTable,
			Columns: []string{investaccountvaluation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: investaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvestAccountValuation{config: iavuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iavuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investaccountvaluation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
