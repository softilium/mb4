// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/softilium/mb4/ent/divpayout"
	"github.com/softilium/mb4/ent/ticker"
)

// DivPayout is the model entity for the DivPayout schema.
type DivPayout struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ForYear holds the value of the "ForYear" field.
	ForYear int `json:"ForYear,omitempty"`
	// ForQuarter holds the value of the "ForQuarter" field.
	ForQuarter int `json:"ForQuarter,omitempty"`
	// CloseDate holds the value of the "CloseDate" field.
	CloseDate time.Time `json:"CloseDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status int `json:"Status,omitempty"`
	// DPS holds the value of the "DPS" field.
	DPS float64 `json:"DPS,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DivPayoutQuery when eager-loading is set.
	Edges              DivPayoutEdges `json:"edges"`
	ticker_div_payouts *string
}

// DivPayoutEdges holds the relations/edges for other nodes in the graph.
type DivPayoutEdges struct {
	// Tickers holds the value of the Tickers edge.
	Tickers *Ticker `json:"Tickers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TickersOrErr returns the Tickers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DivPayoutEdges) TickersOrErr() (*Ticker, error) {
	if e.loadedTypes[0] {
		if e.Tickers == nil {
			// The edge Tickers was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ticker.Label}
		}
		return e.Tickers, nil
	}
	return nil, &NotLoadedError{edge: "Tickers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DivPayout) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case divpayout.FieldDPS:
			values[i] = new(sql.NullFloat64)
		case divpayout.FieldID, divpayout.FieldForYear, divpayout.FieldForQuarter, divpayout.FieldStatus:
			values[i] = new(sql.NullInt64)
		case divpayout.FieldCloseDate:
			values[i] = new(sql.NullTime)
		case divpayout.ForeignKeys[0]: // ticker_div_payouts
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DivPayout", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DivPayout fields.
func (dp *DivPayout) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case divpayout.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case divpayout.FieldForYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ForYear", values[i])
			} else if value.Valid {
				dp.ForYear = int(value.Int64)
			}
		case divpayout.FieldForQuarter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ForQuarter", values[i])
			} else if value.Valid {
				dp.ForQuarter = int(value.Int64)
			}
		case divpayout.FieldCloseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CloseDate", values[i])
			} else if value.Valid {
				dp.CloseDate = value.Time
			}
		case divpayout.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				dp.Status = int(value.Int64)
			}
		case divpayout.FieldDPS:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field DPS", values[i])
			} else if value.Valid {
				dp.DPS = value.Float64
			}
		case divpayout.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticker_div_payouts", values[i])
			} else if value.Valid {
				dp.ticker_div_payouts = new(string)
				*dp.ticker_div_payouts = value.String
			}
		}
	}
	return nil
}

// QueryTickers queries the "Tickers" edge of the DivPayout entity.
func (dp *DivPayout) QueryTickers() *TickerQuery {
	return (&DivPayoutClient{config: dp.config}).QueryTickers(dp)
}

// Update returns a builder for updating this DivPayout.
// Note that you need to call DivPayout.Unwrap() before calling this method if this DivPayout
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DivPayout) Update() *DivPayoutUpdateOne {
	return (&DivPayoutClient{config: dp.config}).UpdateOne(dp)
}

// Unwrap unwraps the DivPayout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DivPayout) Unwrap() *DivPayout {
	tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DivPayout is not a transactional entity")
	}
	dp.config.driver = tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DivPayout) String() string {
	var builder strings.Builder
	builder.WriteString("DivPayout(")
	builder.WriteString(fmt.Sprintf("id=%v", dp.ID))
	builder.WriteString(", ForYear=")
	builder.WriteString(fmt.Sprintf("%v", dp.ForYear))
	builder.WriteString(", ForQuarter=")
	builder.WriteString(fmt.Sprintf("%v", dp.ForQuarter))
	builder.WriteString(", CloseDate=")
	builder.WriteString(dp.CloseDate.Format(time.ANSIC))
	builder.WriteString(", Status=")
	builder.WriteString(fmt.Sprintf("%v", dp.Status))
	builder.WriteString(", DPS=")
	builder.WriteString(fmt.Sprintf("%v", dp.DPS))
	builder.WriteByte(')')
	return builder.String()
}

// DivPayouts is a parsable slice of DivPayout.
type DivPayouts []*DivPayout

func (dp DivPayouts) config(cfg config) {
	for _i := range dp {
		dp[_i].config = cfg
	}
}
