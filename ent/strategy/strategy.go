// Code generated by entc, DO NOT EDIT.

package strategy

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the strategy type in the database.
	Label = "strategy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescr holds the string denoting the descr field in the database.
	FieldDescr = "descr"
	// FieldMaxTickers holds the string denoting the maxtickers field in the database.
	FieldMaxTickers = "max_tickers"
	// FieldMaxTickersPerIndustry holds the string denoting the maxtickersperindustry field in the database.
	FieldMaxTickersPerIndustry = "max_tickers_per_industry"
	// FieldBaseIndex holds the string denoting the baseindex field in the database.
	FieldBaseIndex = "base_index"
	// FieldLastYearInventResult holds the string denoting the lastyearinventresult field in the database.
	FieldLastYearInventResult = "last_year_invent_result"
	// FieldLastYearYield holds the string denoting the lastyearyield field in the database.
	FieldLastYearYield = "last_year_yield"
	// FieldLast3YearsInvertResult holds the string denoting the last3yearsinvertresult field in the database.
	FieldLast3YearsInvertResult = "last3years_invert_result"
	// FieldLast3YearsYield holds the string denoting the last3yearsyield field in the database.
	FieldLast3YearsYield = "last3years_yield"
	// FieldWeekRefillAmount holds the string denoting the weekrefillamount field in the database.
	FieldWeekRefillAmount = "week_refill_amount"
	// FieldStartAmount holds the string denoting the startamount field in the database.
	FieldStartAmount = "start_amount"
	// FieldStartSimulation holds the string denoting the startsimulation field in the database.
	FieldStartSimulation = "start_simulation"
	// FieldBuyOnlyLowPrice holds the string denoting the buyonlylowprice field in the database.
	FieldBuyOnlyLowPrice = "buy_only_low_price"
	// FieldAllowLossWhenSell holds the string denoting the allowlosswhensell field in the database.
	FieldAllowLossWhenSell = "allow_loss_when_sell"
	// FieldAllowSellToFit holds the string denoting the allowselltofit field in the database.
	FieldAllowSellToFit = "allow_sell_to_fit"
	// FieldSameEmitent holds the string denoting the sameemitent field in the database.
	FieldSameEmitent = "same_emitent"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// EdgeFactors holds the string denoting the factors edge name in mutations.
	EdgeFactors = "Factors"
	// EdgeFilters holds the string denoting the filters edge name in mutations.
	EdgeFilters = "Filters"
	// EdgeFixedTickers holds the string denoting the fixedtickers edge name in mutations.
	EdgeFixedTickers = "FixedTickers"
	// Table holds the table name of the strategy in the database.
	Table = "strategies"
	// UserTable is the table that holds the User relation/edge.
	UserTable = "strategies"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the User relation/edge.
	UserColumn = "user_strategies"
	// FactorsTable is the table that holds the Factors relation/edge.
	FactorsTable = "strategy_factors"
	// FactorsInverseTable is the table name for the StrategyFactor entity.
	// It exists in this package in order to avoid circular dependency with the "strategyfactor" package.
	FactorsInverseTable = "strategy_factors"
	// FactorsColumn is the table column denoting the Factors relation/edge.
	FactorsColumn = "strategy_factors"
	// FiltersTable is the table that holds the Filters relation/edge.
	FiltersTable = "strategy_filters"
	// FiltersInverseTable is the table name for the StrategyFilter entity.
	// It exists in this package in order to avoid circular dependency with the "strategyfilter" package.
	FiltersInverseTable = "strategy_filters"
	// FiltersColumn is the table column denoting the Filters relation/edge.
	FiltersColumn = "strategy_filters"
	// FixedTickersTable is the table that holds the FixedTickers relation/edge.
	FixedTickersTable = "strategy_fixed_tickers"
	// FixedTickersInverseTable is the table name for the StrategyFixedTicker entity.
	// It exists in this package in order to avoid circular dependency with the "strategyfixedticker" package.
	FixedTickersInverseTable = "strategy_fixed_tickers"
	// FixedTickersColumn is the table column denoting the FixedTickers relation/edge.
	FixedTickersColumn = "strategy_fixed_tickers"
)

// Columns holds all SQL columns for strategy fields.
var Columns = []string{
	FieldID,
	FieldDescr,
	FieldMaxTickers,
	FieldMaxTickersPerIndustry,
	FieldBaseIndex,
	FieldLastYearInventResult,
	FieldLastYearYield,
	FieldLast3YearsInvertResult,
	FieldLast3YearsYield,
	FieldWeekRefillAmount,
	FieldStartAmount,
	FieldStartSimulation,
	FieldBuyOnlyLowPrice,
	FieldAllowLossWhenSell,
	FieldAllowSellToFit,
	FieldSameEmitent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "strategies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_strategies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DescrValidator is a validator for the "Descr" field. It is called by the builders before save.
	DescrValidator func(string) error
	// DefaultMaxTickers holds the default value on creation for the "MaxTickers" field.
	DefaultMaxTickers int
	// DefaultMaxTickersPerIndustry holds the default value on creation for the "MaxTickersPerIndustry" field.
	DefaultMaxTickersPerIndustry int
	// BaseIndexValidator is a validator for the "BaseIndex" field. It is called by the builders before save.
	BaseIndexValidator func(string) error
	// DefaultLastYearInventResult holds the default value on creation for the "LastYearInventResult" field.
	DefaultLastYearInventResult float64
	// DefaultLastYearYield holds the default value on creation for the "LastYearYield" field.
	DefaultLastYearYield float64
	// DefaultLast3YearsInvertResult holds the default value on creation for the "Last3YearsInvertResult" field.
	DefaultLast3YearsInvertResult float64
	// DefaultLast3YearsYield holds the default value on creation for the "Last3YearsYield" field.
	DefaultLast3YearsYield float64
	// WeekRefillAmountValidator is a validator for the "WeekRefillAmount" field. It is called by the builders before save.
	WeekRefillAmountValidator func(float64) error
	// StartAmountValidator is a validator for the "StartAmount" field. It is called by the builders before save.
	StartAmountValidator func(float64) error
	// DefaultBuyOnlyLowPrice holds the default value on creation for the "BuyOnlyLowPrice" field.
	DefaultBuyOnlyLowPrice bool
	// DefaultAllowLossWhenSell holds the default value on creation for the "AllowLossWhenSell" field.
	DefaultAllowLossWhenSell bool
	// DefaultAllowSellToFit holds the default value on creation for the "AllowSellToFit" field.
	DefaultAllowSellToFit bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
