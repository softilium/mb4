// Code generated by entc, DO NOT EDIT.

package emission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RecDate applies equality check predicate on the "RecDate" field. It's identical to RecDateEQ.
func RecDate(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecDate), v))
	})
}

// Size applies equality check predicate on the "Size" field. It's identical to SizeEQ.
func Size(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// FreeFloat applies equality check predicate on the "FreeFloat" field. It's identical to FreeFloatEQ.
func FreeFloat(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeFloat), v))
	})
}

// LotSize applies equality check predicate on the "LotSize" field. It's identical to LotSizeEQ.
func LotSize(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLotSize), v))
	})
}

// ListingLevel applies equality check predicate on the "ListingLevel" field. It's identical to ListingLevelEQ.
func ListingLevel(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingLevel), v))
	})
}

// RecDateEQ applies the EQ predicate on the "RecDate" field.
func RecDateEQ(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecDate), v))
	})
}

// RecDateNEQ applies the NEQ predicate on the "RecDate" field.
func RecDateNEQ(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecDate), v))
	})
}

// RecDateIn applies the In predicate on the "RecDate" field.
func RecDateIn(vs ...time.Time) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecDate), v...))
	})
}

// RecDateNotIn applies the NotIn predicate on the "RecDate" field.
func RecDateNotIn(vs ...time.Time) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecDate), v...))
	})
}

// RecDateGT applies the GT predicate on the "RecDate" field.
func RecDateGT(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecDate), v))
	})
}

// RecDateGTE applies the GTE predicate on the "RecDate" field.
func RecDateGTE(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecDate), v))
	})
}

// RecDateLT applies the LT predicate on the "RecDate" field.
func RecDateLT(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecDate), v))
	})
}

// RecDateLTE applies the LTE predicate on the "RecDate" field.
func RecDateLTE(v time.Time) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecDate), v))
	})
}

// SizeEQ applies the EQ predicate on the "Size" field.
func SizeEQ(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// SizeNEQ applies the NEQ predicate on the "Size" field.
func SizeNEQ(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSize), v))
	})
}

// SizeIn applies the In predicate on the "Size" field.
func SizeIn(vs ...int64) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSize), v...))
	})
}

// SizeNotIn applies the NotIn predicate on the "Size" field.
func SizeNotIn(vs ...int64) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSize), v...))
	})
}

// SizeGT applies the GT predicate on the "Size" field.
func SizeGT(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSize), v))
	})
}

// SizeGTE applies the GTE predicate on the "Size" field.
func SizeGTE(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSize), v))
	})
}

// SizeLT applies the LT predicate on the "Size" field.
func SizeLT(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSize), v))
	})
}

// SizeLTE applies the LTE predicate on the "Size" field.
func SizeLTE(v int64) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSize), v))
	})
}

// FreeFloatEQ applies the EQ predicate on the "FreeFloat" field.
func FreeFloatEQ(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeFloat), v))
	})
}

// FreeFloatNEQ applies the NEQ predicate on the "FreeFloat" field.
func FreeFloatNEQ(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFreeFloat), v))
	})
}

// FreeFloatIn applies the In predicate on the "FreeFloat" field.
func FreeFloatIn(vs ...int) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFreeFloat), v...))
	})
}

// FreeFloatNotIn applies the NotIn predicate on the "FreeFloat" field.
func FreeFloatNotIn(vs ...int) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFreeFloat), v...))
	})
}

// FreeFloatGT applies the GT predicate on the "FreeFloat" field.
func FreeFloatGT(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFreeFloat), v))
	})
}

// FreeFloatGTE applies the GTE predicate on the "FreeFloat" field.
func FreeFloatGTE(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFreeFloat), v))
	})
}

// FreeFloatLT applies the LT predicate on the "FreeFloat" field.
func FreeFloatLT(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFreeFloat), v))
	})
}

// FreeFloatLTE applies the LTE predicate on the "FreeFloat" field.
func FreeFloatLTE(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFreeFloat), v))
	})
}

// FreeFloatIsNil applies the IsNil predicate on the "FreeFloat" field.
func FreeFloatIsNil() predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFreeFloat)))
	})
}

// FreeFloatNotNil applies the NotNil predicate on the "FreeFloat" field.
func FreeFloatNotNil() predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFreeFloat)))
	})
}

// LotSizeEQ applies the EQ predicate on the "LotSize" field.
func LotSizeEQ(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLotSize), v))
	})
}

// LotSizeNEQ applies the NEQ predicate on the "LotSize" field.
func LotSizeNEQ(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLotSize), v))
	})
}

// LotSizeIn applies the In predicate on the "LotSize" field.
func LotSizeIn(vs ...int) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLotSize), v...))
	})
}

// LotSizeNotIn applies the NotIn predicate on the "LotSize" field.
func LotSizeNotIn(vs ...int) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLotSize), v...))
	})
}

// LotSizeGT applies the GT predicate on the "LotSize" field.
func LotSizeGT(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLotSize), v))
	})
}

// LotSizeGTE applies the GTE predicate on the "LotSize" field.
func LotSizeGTE(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLotSize), v))
	})
}

// LotSizeLT applies the LT predicate on the "LotSize" field.
func LotSizeLT(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLotSize), v))
	})
}

// LotSizeLTE applies the LTE predicate on the "LotSize" field.
func LotSizeLTE(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLotSize), v))
	})
}

// LotSizeIsNil applies the IsNil predicate on the "LotSize" field.
func LotSizeIsNil() predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLotSize)))
	})
}

// LotSizeNotNil applies the NotNil predicate on the "LotSize" field.
func LotSizeNotNil() predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLotSize)))
	})
}

// ListingLevelEQ applies the EQ predicate on the "ListingLevel" field.
func ListingLevelEQ(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingLevel), v))
	})
}

// ListingLevelNEQ applies the NEQ predicate on the "ListingLevel" field.
func ListingLevelNEQ(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListingLevel), v))
	})
}

// ListingLevelIn applies the In predicate on the "ListingLevel" field.
func ListingLevelIn(vs ...int) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldListingLevel), v...))
	})
}

// ListingLevelNotIn applies the NotIn predicate on the "ListingLevel" field.
func ListingLevelNotIn(vs ...int) predicate.Emission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldListingLevel), v...))
	})
}

// ListingLevelGT applies the GT predicate on the "ListingLevel" field.
func ListingLevelGT(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListingLevel), v))
	})
}

// ListingLevelGTE applies the GTE predicate on the "ListingLevel" field.
func ListingLevelGTE(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListingLevel), v))
	})
}

// ListingLevelLT applies the LT predicate on the "ListingLevel" field.
func ListingLevelLT(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListingLevel), v))
	})
}

// ListingLevelLTE applies the LTE predicate on the "ListingLevel" field.
func ListingLevelLTE(v int) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListingLevel), v))
	})
}

// HasTicker applies the HasEdge predicate on the "Ticker" edge.
func HasTicker() predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TickerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TickerTable, TickerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTickerWith applies the HasEdge predicate on the "Ticker" edge with a given conditions (other predicates).
func HasTickerWith(preds ...predicate.Ticker) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TickerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TickerTable, TickerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Emission) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Emission) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Emission) predicate.Emission {
	return predicate.Emission(func(s *sql.Selector) {
		p(s.Not())
	})
}
