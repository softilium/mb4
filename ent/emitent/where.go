// Code generated by entc, DO NOT EDIT.

package emitent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Descr applies equality check predicate on the "Descr" field. It's identical to DescrEQ.
func Descr(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescr), v))
	})
}

// DescrEQ applies the EQ predicate on the "Descr" field.
func DescrEQ(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescr), v))
	})
}

// DescrNEQ applies the NEQ predicate on the "Descr" field.
func DescrNEQ(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescr), v))
	})
}

// DescrIn applies the In predicate on the "Descr" field.
func DescrIn(vs ...string) predicate.Emitent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emitent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescr), v...))
	})
}

// DescrNotIn applies the NotIn predicate on the "Descr" field.
func DescrNotIn(vs ...string) predicate.Emitent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Emitent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescr), v...))
	})
}

// DescrGT applies the GT predicate on the "Descr" field.
func DescrGT(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescr), v))
	})
}

// DescrGTE applies the GTE predicate on the "Descr" field.
func DescrGTE(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescr), v))
	})
}

// DescrLT applies the LT predicate on the "Descr" field.
func DescrLT(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescr), v))
	})
}

// DescrLTE applies the LTE predicate on the "Descr" field.
func DescrLTE(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescr), v))
	})
}

// DescrContains applies the Contains predicate on the "Descr" field.
func DescrContains(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescr), v))
	})
}

// DescrHasPrefix applies the HasPrefix predicate on the "Descr" field.
func DescrHasPrefix(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescr), v))
	})
}

// DescrHasSuffix applies the HasSuffix predicate on the "Descr" field.
func DescrHasSuffix(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescr), v))
	})
}

// DescrEqualFold applies the EqualFold predicate on the "Descr" field.
func DescrEqualFold(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescr), v))
	})
}

// DescrContainsFold applies the ContainsFold predicate on the "Descr" field.
func DescrContainsFold(v string) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescr), v))
	})
}

// HasIndustry applies the HasEdge predicate on the "Industry" edge.
func HasIndustry() predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IndustryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IndustryTable, IndustryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIndustryWith applies the HasEdge predicate on the "Industry" edge with a given conditions (other predicates).
func HasIndustryWith(preds ...predicate.Industry) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IndustryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IndustryTable, IndustryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTickers applies the HasEdge predicate on the "Tickers" edge.
func HasTickers() predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TickersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TickersTable, TickersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTickersWith applies the HasEdge predicate on the "Tickers" edge with a given conditions (other predicates).
func HasTickersWith(preds ...predicate.Ticker) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TickersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TickersTable, TickersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReports applies the HasEdge predicate on the "Reports" edge.
func HasReports() predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReportsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportsWith applies the HasEdge predicate on the "Reports" edge with a given conditions (other predicates).
func HasReportsWith(preds ...predicate.Report) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReportsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Emitent) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Emitent) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Emitent) predicate.Emitent {
	return predicate.Emitent(func(s *sql.Selector) {
		p(s.Not())
	})
}
