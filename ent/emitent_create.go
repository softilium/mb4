// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/softilium/mb4/ent/emitent"
	"github.com/softilium/mb4/ent/industry"
	"github.com/softilium/mb4/ent/ticker"
)

// EmitentCreate is the builder for creating a Emitent entity.
type EmitentCreate struct {
	config
	mutation *EmitentMutation
	hooks    []Hook
}

// SetDescr sets the "Descr" field.
func (ec *EmitentCreate) SetDescr(s string) *EmitentCreate {
	ec.mutation.SetDescr(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EmitentCreate) SetID(x xid.ID) *EmitentCreate {
	ec.mutation.SetID(x)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EmitentCreate) SetNillableID(x *xid.ID) *EmitentCreate {
	if x != nil {
		ec.SetID(*x)
	}
	return ec
}

// SetIndustryID sets the "Industry" edge to the Industry entity by ID.
func (ec *EmitentCreate) SetIndustryID(id string) *EmitentCreate {
	ec.mutation.SetIndustryID(id)
	return ec
}

// SetIndustry sets the "Industry" edge to the Industry entity.
func (ec *EmitentCreate) SetIndustry(i *Industry) *EmitentCreate {
	return ec.SetIndustryID(i.ID)
}

// AddTickerIDs adds the "Tickers" edge to the Ticker entity by IDs.
func (ec *EmitentCreate) AddTickerIDs(ids ...string) *EmitentCreate {
	ec.mutation.AddTickerIDs(ids...)
	return ec
}

// AddTickers adds the "Tickers" edges to the Ticker entity.
func (ec *EmitentCreate) AddTickers(t ...*Ticker) *EmitentCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTickerIDs(ids...)
}

// Mutation returns the EmitentMutation object of the builder.
func (ec *EmitentCreate) Mutation() *EmitentMutation {
	return ec.mutation
}

// Save creates the Emitent in the database.
func (ec *EmitentCreate) Save(ctx context.Context) (*Emitent, error) {
	var (
		err  error
		node *Emitent
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmitentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmitentCreate) SaveX(ctx context.Context) *Emitent {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmitentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmitentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmitentCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := emitent.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmitentCreate) check() error {
	if _, ok := ec.mutation.Descr(); !ok {
		return &ValidationError{Name: "Descr", err: errors.New(`ent: missing required field "Emitent.Descr"`)}
	}
	if v, ok := ec.mutation.Descr(); ok {
		if err := emitent.DescrValidator(v); err != nil {
			return &ValidationError{Name: "Descr", err: fmt.Errorf(`ent: validator failed for field "Emitent.Descr": %w`, err)}
		}
	}
	if _, ok := ec.mutation.IndustryID(); !ok {
		return &ValidationError{Name: "Industry", err: errors.New(`ent: missing required edge "Emitent.Industry"`)}
	}
	return nil
}

func (ec *EmitentCreate) sqlSave(ctx context.Context) (*Emitent, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ec *EmitentCreate) createSpec() (*Emitent, *sqlgraph.CreateSpec) {
	var (
		_node = &Emitent{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emitent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emitent.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Descr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emitent.FieldDescr,
		})
		_node.Descr = value
	}
	if nodes := ec.mutation.IndustryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emitent.IndustryTable,
			Columns: []string{emitent.IndustryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: industry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.industry_emitents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TickersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emitent.TickersTable,
			Columns: []string{emitent.TickersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ticker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmitentCreateBulk is the builder for creating many Emitent entities in bulk.
type EmitentCreateBulk struct {
	config
	builders []*EmitentCreate
}

// Save creates the Emitent entities in the database.
func (ecb *EmitentCreateBulk) Save(ctx context.Context) ([]*Emitent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Emitent, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmitentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmitentCreateBulk) SaveX(ctx context.Context) []*Emitent {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmitentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmitentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
